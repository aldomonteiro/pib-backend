{"version":3,"sources":["../../../src/api/bot/actionsController.js"],"names":["QTY_1","checkTypedText","bot","sender","pageID","text","pageId","userId","id","pendingOrder","order","waitingFor","addrData","manual_addres","formattedAddress","sendActions","action","isNaN","data","mapEventsActions","event","console","error","confirmTypedTextError","Bot","wait","option","multiple","marketing","mapEventsActionsErr","split","payload","location","out","Elements","startTyping","user","fetchUser","marketing_flow","stopTyping","send","userID","validation","info","getFlavorsAndToppings","sizeID","flavorArray","flavorsWithPrice","Array","flavor","kind","pricing","price","toppings","toppingsNames","push","flavorsAndToppingsErr","inputCardapioReplyMsg","replyMsg","join","getOpenAndClose","weekDay","Date","getDay","openingTimes","openAndClose","isOpen","openTime","closeTime","mon_is_open","mon_open","mon_close","tue_is_open","tue_open","tue_close","wed_is_open","wed_open","wed_close","thu_is_open","thu_open","thu_close","fri_is_open","fri_open","fri_close","sat_is_open","sat_open","sat_close","sun_is_open","sun_open","sun_close","inputHorarioReplyMsg","strOpenTime","getHours","getMinutes","toString","padStart","strCloseTime"],"mappings":"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","sourcesContent":["import { getFlavors, getFlavorByName } from \"../controllers/flavorsController\";\nimport { getToppings, getToppingsNames } from \"../controllers/toppingsController\";\nimport { getStoreData } from '../controllers/storesController';\nimport { getOnePricing } from '../controllers/pricingsController';\nimport { Bot, Elements } from 'facebook-messenger-bot';\nimport {\n    sendWelcomeMessage,\n    sendErrorMsg,\n    sendMainMenu,\n    sendCardapio,\n    askForPhone,\n    showPhone,\n    askToTypePhone,\n    askForQuantity,\n    askForQuantityMore,\n    showQuantity,\n    askForSize,\n    showSize,\n    askForFlavor,\n    showFlavor,\n    showOrderOrNextItem,\n    askForLocation,\n    confirmAddressOrAskLocation,\n    confirmLocationAddress,\n    showAddress,\n    confirmOrder,\n    askToTypeAddress,\n    askForWantBeverage, askForBeverages, showBeverage, showNoBeverage,\n    sendHorario,\n    basicReply,\n    askForChangeOrder,\n    askForSplitFlavorOrConfirm,\n    askForFlavorOrConfirm,\n    askForSpecificItem,\n    updateItemAskOptions,\n    showOrderOrAskForPhone,\n    showSplit,\n    showFullOrder,\n    askForWantOrder,\n    askForContinue,\n    checkLastAction,\n    optionsStopOrder,\n    passThreadControl,\n    confirmAddress,\n    confirmTypedPhone\n} from './botController';\n\nimport {\n    m_askForRestaurant, m_askForOwnership, m_askForOptions,\n    m_askHowGetHere,\n    m_askForTestType, m_askForBeginTest, m_afterOrderConfirmation, m_startTrial,\n    m_openQuestion, m_confirmOpenQuestion, m_returnContact, m_contactPhone, m_contactMail, m_typePhone,\n    m_isValidPhone,\n    m_howItWorks2,\n    m_howItWorks3,\n    m_howItWorks4,\n    m_howItWorks5,\n    m_howItWorks,\n    m_askTestTypePizzaria,\n    m_showPrices,\n    m_returnedCustomer\n} from \"./botMarkController\";\nimport { getOrderPending } from \"../controllers/ordersController\";\n\n\nconst QTY_1 = [1, \"um\", \"uma\"];\n\nexport const checkTypedText = async ({ bot, sender, pageID, text }) => {\n    try {\n        const pendingOrder = await getOrderPending({ pageId: pageID, userId: sender.id });\n\n        if (pendingOrder && pendingOrder.order) {\n            if (pendingOrder.order.waitingFor === 'typed_address') {\n                const addrData = {\n                    manual_addres: true,\n                    formattedAddress: text,\n                }\n                await sendActions({ action: 'CONFIRM_ADDRESS', bot, sender, pageID, addrData })\n            }\n            else if (pendingOrder.order.waitingFor === 'phone')\n                await sendActions({ action: 'CONFIRM_TYPED_PHONE', bot, sender, pageID, text });\n            else if (pendingOrder.order.waitingFor === 'quantity' && !isNaN(text) && +text <= 6) {\n                const data = 'qty_' + text;\n                await mapEventsActions({ event: 'ORDER_QTY', data, bot, sender, pageID })\n            }\n            else // Bot didn't understand what was typed \n                await sendActions({ action: 'ASK_FOR_CONTINUE', bot, sender, pageID });\n        } else {\n            return await sendMainMenu();\n        }\n\n    } catch (confirmTypedTextError) {\n        console.error({ confirmTypedTextError });\n        throw confirmTypedTextError;\n    }\n}\n\n\n/**\n * Receive events, dispatch actions\n * @param {*} param0 \n */\nexport const mapEventsActions = async ({ event, data, bot, sender, pageID }) => {\n    try {\n        switch (event) {\n            case 'ORDER_CONTINUE_ORDER':\n                switch (data) {\n                    case 'continueorder_yes':\n                        await sendActions({ action: 'CHECK_LAST_ACTION', bot, sender, pageID });\n                        break;\n                    case 'continueorder_no':\n                        await sendActions({ action: 'CONTINUE_ORDER_NO', bot, sender, pageID });\n                        break;\n                }\n                break;\n            case 'STOP_ORDER_OPTIONS':\n                switch (data) {\n                    case 'stoporder_init':\n                        await sendActions({ action: 'SEND_MAIN_MENU', bot, sender, pageID });\n                        break;\n                    case 'stoporder_human':\n                        await sendActions({ action: 'PASS_THREAD_CONTROL', bot, sender, pageID });\n                        break;\n                }\n                break;\n            case 'MAIN-MENU':\n                switch (data) {\n                    case 'CARDAPIO_PAYLOAD':\n                        await sendActions({ action: 'SEND_CARDAPIO', bot, sender, pageID });\n                        await Bot.wait(3000);\n                        await sendActions({ action: 'ASK_FOR_ORDER', bot, sender, pageID });\n                        break;\n                    case 'PEDIDO_PAYLOAD':\n                        await sendActions({ action: 'CHECK_ADDRESS', bot, sender, pageID });\n                        break;\n                    case 'HORARIO_PAYLOAD':\n                        await sendActions({ action: 'SEND_HORARIO', bot, sender, pageID });\n                        break;\n                }\n                break;\n            case 'ORDER_WANT_ORDER':\n                switch (data) {\n                    case 'wantorder_yes':\n                        await sendActions({ action: 'CHECK_ADDRESS', bot, sender, pageID });\n                        break;\n                    case 'wantorder_no':\n                        await sendActions({ action: 'BASIC_REPLY', bot, sender, pageID, data: 'Ok, vou enviar as opções então. Para continuar é só clicar em uma delas' });\n                        await sendActions({ action: 'SEND_MAIN_MENU', bot, sender, pageID });\n                        break;\n                }\n                break;\n            case 'CORRECT_SAVED_ADDRESS':\n                await sendActions({ action: 'SHOW_ADDRESS', bot, sender, pageID, data });\n                await sendActions({ action: 'ASK_FOR_PHONE', bot, sender, pageID });\n                break;\n            case 'WRONG_SAVED_ADDRESS':\n                await sendActions({ action: 'ASK_FOR_LOCATION', bot, sender, pageID, event });\n                break;\n            case 'LOCATION_ADDRESS':\n                switch (data) {\n                    case 'incorrect_address':\n                        await sendActions({ action: 'ASK_TO_TYPE_ADDRESS', bot, sender, pageID });\n                        break;\n                    default:\n                        await sendActions({ action: 'SHOW_ADDRESS', bot, sender, pageID, data });\n                        await sendActions({ action: 'SHOW_ORDER_OR_ASK_FOR_PHONE', bot, sender, pageID });\n                        break;\n                }\n                break;\n            case 'PHONE_CONFIRMED':\n                switch (data) {\n                    case 'change_phone':\n                        await sendActions({ action: 'ASK_TO_TYPE_PHONE', bot, sender, pageID });\n                        break;\n                    default:\n                        await sendActions({ action: 'SHOW_PHONE', bot, sender, pageID, data });\n                        await sendActions({ action: 'ASK_FOR_QUANTITY', bot, sender, pageID });\n                        break;\n                }\n                break;\n            case 'ORDER_QTY':\n                switch (data) {\n                    case 'qty_more':\n                        await sendActions({ action: 'ASK_FOR_QUANTITY_MORE', bot, sender, pageID });\n                        break;\n                    case 'qty_less':\n                        await sendActions({ action: 'ASK_FOR_QUANTITY', bot, sender, pageID });\n                        break;\n                    default:\n                        await sendActions({ action: 'SHOW_QUANTITY', bot, sender, pageID, data });\n                        await sendActions({ action: 'ASK_FOR_SIZE', bot, sender, pageID });\n                        break;\n                }\n                break;\n            case 'ORDER_SIZE':\n                await sendActions({ action: 'SHOW_SIZE', bot, sender, pageID, data })\n                await sendActions({ action: 'CHECK_SPLIT', bot, sender, pageID, data })\n                break;\n            case 'ORDER_SPLIT':\n                await sendActions({ action: 'SHOW_SPLIT', bot, sender, pageID, data })\n                await sendActions({ action: 'CHECK_FLAVOR', bot, sender, pageID, data })\n                break;\n            case 'ORDER_FLAVOR':\n                switch (data.option) {\n                    case 'flavors_more':\n                        await sendActions({ action: 'ASK_FOR_FLAVOR', bot, sender, pageID, multiple: data.multiple })\n                        break;\n                    default:\n                        await sendActions({ action: 'SHOW_FLAVOR', bot, sender, pageID, data })\n                        await sendActions({ action: 'CHECK_ITEM', bot, sender, pageID })\n                        break;\n                }\n                break;\n            case 'ORDER_PIZZA_CONFIRMATION':\n                switch (data) {\n                    case 'confirmation_yes':\n                        await sendActions({ action: 'ASK_FOR_WANT_BEVERAGE', bot, sender, pageID });\n                        break;\n                    default:\n                        await sendActions({ action: 'ASK_FOR_CHANGE_ORDER', bot, sender, pageID });\n                        break;\n                }\n                break;\n            case 'ORDER_WANT_CHANGE':\n                await sendActions({ action: 'ASK_FOR_SPECIFIC_ITEM', bot, sender, pageID });\n                break;\n            case 'ORDER_CHANGE':\n                switch (data) {\n                    case 'change_quantity':\n                        await sendActions({ action: 'ASK_FOR_QUANTITY', bot, sender, pageID });\n                        break;\n                    case 'change_size':\n                        await sendActions({ action: 'ASK_FOR_SIZE', bot, sender, pageID });\n                        break;\n                    case 'change_flavor':\n                        await sendActions({ action: 'ASK_FOR_FLAVOR', bot, sender, pageID, multiple: 1 })\n                        break;\n                    case 'change_address':\n                        await sendActions({ action: 'ASK_FOR_LOCATION', bot, sender, pageID });\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            case 'ORDER_CONFIRM_BEVERAGE':\n                switch (data) {\n                    case 'beverage_yes':\n                        await sendActions({ action: 'ASK_FOR_BEVERAGE_OPTIONS', bot, sender, pageID, multiple: 1 })\n                        break;\n                    default:\n                        await sendActions({ action: 'SHOW_NO_BEVERAGE', bot, sender, pageID })\n                        await sendActions({ action: 'SHOW_FULL_ORDER', bot, sender, pageID })\n                        break;\n                }\n                break;\n            case 'ORDER_BEVERAGE':\n                switch (data.option) {\n                    case 'beverages_more':\n                        await sendActions({ action: 'ASK_FOR_BEVERAGE_OPTIONS', bot, sender, pageID, multiple: data.multiple })\n                        break;\n                    case 'beverages_cancel':\n                        await sendActions({ action: 'SHOW_NO_BEVERAGE', bot, sender, pageID })\n                        await sendActions({ action: 'SHOW_FULL_ORDER', bot, sender, pageID })\n                        break;\n                    default:\n                        await sendActions({ action: 'SHOW_BEVERAGE', bot, sender, pageID, data })\n                        await sendActions({ action: 'SHOW_FULL_ORDER', bot, sender, pageID })\n                        break;\n                }\n                break;\n            case 'ORDER_CONFIRMATION':\n                switch (data) {\n                    case 'confirmation_yes':\n                        await sendActions({ action: 'CONFIRM_ORDER', bot, sender, pageID });\n                        if (bot.marketing) { // marketing. if the order is confirmed, go on in the conversation\n                            await sendActions({ action: 'PIZZAIBOT_MARKETING', bot, sender, pageID, data: 'confirmation_yes' });\n                        }\n                        break;\n                    default:\n                        await sendActions({ action: 'ASK_FOR_CHANGE_ORDER', bot, sender, pageID });\n                        break;\n                }\n                break;\n            case 'ORDER_CHANGE_SELECT_ITEM':\n                await sendActions({ action: 'UPDATE_ITEM', bot, sender, pageID, data })\n                break;\n\n        }\n    } catch (mapEventsActionsErr) {\n        console.error({ event }, { mapEventsActionsErr }, { data });\n    }\n}\n\nexport const sendActions = async ({ action, bot, sender, pageID, multiple, split, data, payload, location, text, addrData }) => {\n    try {\n        let out = new Elements();\n        await bot.startTyping(sender.id);\n        await Bot.wait(500);\n        switch (action) {\n            case 'BASIC_REPLY':\n                out = await basicReply(data);\n                break;\n            case 'CHECK_TYPED_TEXT':\n                out = await checkTypedText(pageID, sender.id, text);\n                break;\n            case 'ASK_FOR_CONTINUE':\n                out = await askForContinue(pageID, sender.id);\n                break;\n            case 'CHECK_LAST_ACTION':\n                out = await checkLastAction(pageID, sender.id);\n                break;\n            case 'CONTINUE_ORDER_NO':\n                out = await optionsStopOrder(pageID, sender.id);\n                break;\n            case 'PASS_THREAD_CONTROL':\n                out = await passThreadControl(pageID, sender.id);\n                break;\n            case 'SEND_WELCOME':\n                out = await sendWelcomeMessage(pageID, sender)\n                break;\n            case 'SEND_MAIN_MENU':\n                out = await sendMainMenu();\n                break;\n            case 'SEND_CARDAPIO':\n                out = await sendCardapio(pageID);\n                break;\n            case 'SEND_HORARIO':\n                out = await sendHorario(pageID);\n                break;\n            case 'CHECK_ADDRESS':\n                out = await confirmAddressOrAskLocation(pageID, sender.id, user);\n                break;\n            case 'CONFIRM_ADDRESS':\n                out = await confirmAddress(pageID, sender.id, addrData);\n                break;\n            case 'ASK_FOR_ORDER':\n                out = await askForWantOrder(pageID, sender.id);\n                break;\n            case 'LOCATION_CONFIRM_ADDRESS':\n                const user = await bot.fetchUser(sender.id);\n                out = await confirmLocationAddress(pageID, sender.id, location, user);\n                break;\n            case 'ASK_FOR_PHONE':\n                out = await askForPhone(pageID, sender.id);\n                break;\n            case 'SHOW_PHONE':\n                out = await showPhone(pageID, sender.id, payload || data);\n                break;\n            case 'SHOW_ADDRESS':\n                out = await showAddress(pageID, sender.id, data);\n                break;\n            case 'SHOW_ORDER_OR_ASK_FOR_PHONE':\n                out = await showOrderOrAskForPhone(pageID, sender.id);\n                break;\n            case 'ASK_TO_TYPE_PHONE':\n                out = await askToTypePhone(pageID, sender.id);\n                break;\n            case 'CONFIRM_TYPED_PHONE':\n                out = await confirmTypedPhone(pageID, sender.id, text);\n                break;\n            case 'ASK_FOR_LOCATION':\n                out = await askForLocation(pageID, sender.id);\n                break;\n            case 'ASK_TO_TYPE_ADDRESS':\n                out = await askToTypeAddress(pageID, sender.id);\n                break;\n            case 'ASK_FOR_QUANTITY':\n                out = await askForQuantity(pageID, sender.id);\n                break;\n            case 'ASK_FOR_QUANTITY_MORE':\n                out = await askForQuantityMore(pageID, sender.id);\n                break;\n            case 'SHOW_QUANTITY':\n                out = await showQuantity(pageID, sender.id, data);\n                break;\n            case 'ASK_FOR_SIZE':\n                out = await askForSize(pageID, sender.id);\n                break;\n            case 'SHOW_SIZE':\n                out = await showSize(pageID, sender.id, data);\n                break;\n            case 'SHOW_SPLIT':\n                out = await showSplit(pageID, sender.id, data);\n                break;\n            case 'CHECK_SPLIT':\n                out = await askForSplitFlavorOrConfirm(pageID, sender.id, 1);\n                break;\n            case 'CHECK_FLAVOR':\n                out = await askForFlavorOrConfirm(pageID, sender.id, 1, data);\n                break;\n            case 'ASK_FOR_FLAVOR':\n                out = await askForFlavor(pageID, sender.id, multiple, split);\n                break;\n            case 'SHOW_FLAVOR':\n                out = await showFlavor(pageID, sender.id, data);\n                break;\n            case 'CHECK_ITEM':\n                out = await showOrderOrNextItem(pageID, sender.id);\n                break;\n            case 'ASK_FOR_WANT_BEVERAGE':\n                out = await askForWantBeverage(pageID, sender.id);\n                break;\n            case 'SHOW_NO_BEVERAGE':\n                out = await showNoBeverage(pageID, sender.id, data);\n                break;\n            case 'ASK_FOR_BEVERAGE_OPTIONS':\n                out = await askForBeverages(pageID, sender.id, multiple);\n                break;\n            case 'SHOW_BEVERAGE':\n                out = await showBeverage(pageID, sender.id, data);\n                break;\n            case 'SHOW_FULL_ORDER':\n                out = await showFullOrder(pageID, sender.id);\n                break;\n            case 'ASK_FOR_CHANGE_ORDER':\n                out = await askForChangeOrder(pageID, sender.id);\n                break;\n            case 'ASK_FOR_SPECIFIC_ITEM':\n                out = await askForSpecificItem(pageID, sender.id);\n                break;\n            case 'UPDATE_ITEM':\n                out = await updateItemAskOptions(pageID, sender.id, data);\n                break;\n            case 'CONFIRM_ORDER':\n                out = await confirmOrder(pageID, sender.id);\n                break;\n            case 'PIZZAIBOT_MARKETING':\n                out = await marketing_flow(pageID, sender.id, data, text, payload);\n                break;\n            default:\n                break;\n        }\n        await bot.stopTyping(sender.id);\n        await bot.send(sender.id, out);\n    } catch (sendActionsErr) {\n        console.error('action:', action, 'data:', data, 'err:', sendActionsErr);\n        throw sendActionsErr;\n    }\n}\n\n/**\n * Actions for marketing controller\n * @param {*} data \n */\nexport const marketing_flow = async (pageID, userID, data, text, payload) => {\n    switch (data) {\n        case 'GET_STARTED':\n            return await m_askHowGetHere(data, pageID, userID);\n        case 'howget_pizzaria':\n        case 'howget_facebookad':\n        case 'howget_activemarketing':\n        case 'howget_dontremember':\n            return await m_askForRestaurant(data, pageID, userID);\n        case 'restaurant_yes':\n            return await m_askForOwnership(data, pageID, userID);\n        case 'restaurant_no':\n            return await m_askForOptions(data, pageID, userID);\n        case 'owner_yes':\n            return await m_askForOptions(data, pageID, userID, 'owner');\n        case 'employee_yes':\n            return await m_askForOptions(data, pageID, userID, 'employee');\n        case 'options_howitworks':\n            return await m_howItWorks(data, pageID, userID);\n        case 'howitworks_2':\n            return await m_howItWorks2(data, pageID, userID);\n        case 'howitworks_3':\n            return await m_howItWorks3(data, pageID, userID);\n        case 'howitworks_4':\n            return await m_howItWorks4(data, pageID, userID);\n        case 'howitworks_5':\n            return await m_howItWorks5(data, pageID, userID);\n        case 'options_howmuch':\n            return await m_showPrices(data, pageID, userID);\n        case 'options_wanttest':\n            return await m_askForTestType(data, pageID, userID);\n        case 'testtype_customer':\n            return await m_askForBeginTest(data, pageID, userID);\n        case 'testtype_pizzaria':\n            return await m_askTestTypePizzaria(data, pageID, userID);\n        case 'confirmation_yes':\n            return await m_afterOrderConfirmation(data, pageID, userID);\n        case 'orderConfirmation_start':\n            return await m_startTrial(data, pageID, userID);\n        case 'orderConfirmation_question':\n            return await m_openQuestion(data, pageID, userID);\n        case 'open_question':\n            return await m_confirmOpenQuestion(data, pageID, userID, text);\n        case 'finalquestion_phone':\n            return await m_returnContact(data, pageID, userID, 'phone');\n        case 'finalquestion_whatsapp':\n            return await m_returnContact(data, pageID, userID, 'whatsapp');\n        case 'finalquestion_mail':\n            return await m_returnContact(data, pageID, userID, 'email');\n        case 'finalquestion_messenger':\n            return await m_returnContact(data, pageID, userID, 'messenger');\n        case 'type_phone':\n            return await m_typePhone(data, pageID, userID);\n        case 'retype_phone':\n            return await m_typePhone(data, pageID, userID);\n        case 'contact_phone':\n            const validation = await m_isValidPhone(payload || text);\n            console.info({ validation });\n            if (validation === 'OK_PHONE')\n                return await m_contactPhone(data, pageID, userID, payload || text);\n            else return await m_typePhone('retype_phone', pageID, userID, validation);\n        case 'contact_mail':\n            return await m_contactMail(data, pageID, userID, text);\n        case 'returned_customer':\n            return await m_returnedCustomer(data, pageID, userID);\n        default:\n            return await basicReply('Ops, não tenho uma resposta para isso.');\n    }\n}\n\n\n/**\n * Returns array of flavors. If sizeID was passed, only returns flavors with price.\n * @param {*} pageID \n * @param {*} sizeID \n */\nexport const getFlavorsAndToppings = async (pageID, sizeID) => {\n    try {\n        const flavorArray = await getFlavors(pageID);\n        const flavorsWithPrice = new Array();\n        for (let flavor of flavorArray) {\n            if (sizeID) {\n                const pricing = await getOnePricing(pageID, flavor.kind, sizeID);\n                if (pricing) {\n                    flavor.price = pricing.price;\n                }\n            }\n            if (sizeID) {\n                if (flavor.price) {\n                    flavor.toppingsNames = await getToppingsNames(flavor.toppings, pageID);\n                    flavorsWithPrice.push(flavor);\n                }\n            } else {\n                flavor.toppingsNames = await getToppingsNames(flavor.toppings, pageID);\n                flavorsWithPrice.push(flavor);\n            }\n        }\n        return flavorsWithPrice;\n    } catch (flavorsAndToppingsErr) {\n        console.error({ flavorsAndToppingsErr });\n    }\n}\n\nexport const inputCardapioReplyMsg = (flavorArray) => {\n    let replyMsg = '';\n    if (flavorArray) {\n        for (const flavor of flavorArray) {\n            replyMsg = replyMsg + '*' + flavor.flavor + '*' + '\\n';\n            replyMsg = replyMsg + flavor.toppingsNames.join();\n            replyMsg = replyMsg + '\\n';\n        }\n    }\n    return replyMsg;\n}\n\nexport const getOpenAndClose = async (pageID) => {\n    // TODO: timezone from the store\n    const weekDay = (new Date()).getDay();\n\n    const openingTimes = await getStoreData(pageID);\n\n    if (openingTimes) {\n        let openAndClose = { isOpen: false, openTime: null, closeTime: null };\n        if (weekDay === 1) {\n            openAndClose.isOpen = openingTimes.mon_is_open;\n            openAndClose.openTime = openingTimes.mon_open;\n            openAndClose.closeTime = openingTimes.mon_close;\n        } else if (weekDay === 2) {\n            openAndClose.isOpen = openingTimes.tue_is_open;\n            openAndClose.openTime = openingTimes.tue_open;\n            openAndClose.closeTime = openingTimes.tue_close;\n        } else if (weekDay === 3) {\n            openAndClose.isOpen = openingTimes.wed_is_open;\n            openAndClose.openTime = openingTimes.wed_open;\n            openAndClose.closeTime = openingTimes.wed_close;\n        } else if (weekDay === 4) {\n            openAndClose.isOpen = openingTimes.thu_is_open;\n            openAndClose.openTime = openingTimes.thu_open;\n            openAndClose.closeTime = openingTimes.thu_close;\n        } else if (weekDay === 5) {\n            openAndClose.isOpen = openingTimes.fri_is_open;\n            openAndClose.openTime = openingTimes.fri_open;\n            openAndClose.closeTime = openingTimes.fri_close;\n        } else if (weekDay === 6) {\n            openAndClose.isOpen = openingTimes.sat_is_open;\n            openAndClose.openTime = openingTimes.sat_open;\n            openAndClose.closeTime = openingTimes.sat_close;\n        }\n        else if (weekDay === 7) {\n            openAndClose.isOpen = openingTimes.sun_is_open;\n            openAndClose.openTime = openingTimes.sun_open;\n            openAndClose.closeTime = openingTimes.sun_close;\n        }\n        return openAndClose;\n    }\n    return null;\n}\n\nexport const inputHorarioReplyMsg = (openAndClose) => {\n    let replyMsg = '';\n    if (openAndClose) {\n        if (openAndClose.isOpen === true) {\n            const strOpenTime = new Date(openAndClose.openTime).getHours() + ':' + new Date(openAndClose.openTime).getMinutes().toString().padStart(2, '0');\n            const strCloseTime = new Date(openAndClose.closeTime).getHours() + ':' + new Date(openAndClose.closeTime).getMinutes().toString().padStart(2, '0');\n\n            replyMsg = 'Olá, hoje nosso horário de funcionamento é a partir das ';\n            replyMsg = replyMsg + strOpenTime + ' horas, até às ';\n            replyMsg = replyMsg + strCloseTime + ' horas.';\n        } else {\n            replyMsg = 'Olá, infelizmente hoje estamos fechados, então, não estamos aceitando pedidos. ';\n        }\n    }\n    return replyMsg;\n}\n"],"file":"actionsController.js"}