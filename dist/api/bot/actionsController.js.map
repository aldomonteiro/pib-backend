{"version":3,"sources":["../../../src/api/bot/actionsController.js"],"names":["QTY_1","getFlavorsAndToppings","pageID","sizeID","flavorArray","flavor","kind","pricing","price","toppings","toppingsNames","console","log","inputCardapioReplyMsg","replyMsg","join","getOpenAndClose","weekDay","Date","getDay","openingTimes","openAndClose","isOpen","openTime","closeTime","mon_is_open","mon_open","mon_close","tue_is_open","tue_open","tue_close","wed_is_open","wed_open","wed_close","thu_is_open","thu_open","thu_close","fri_is_open","fri_open","fri_close","sat_is_open","sat_open","sat_close","sun_is_open","sun_open","sun_close","inputHorarioReplyMsg","strOpenTime","getHours","getMinutes","toString","padStart","strCloseTime","validateBotOrder","entities","quantidade","tamanho","produto","sabor","validated","basicValidation","replyText","String","order_flavor","order_qty","order_size","order_prod","length","order_flav","concat"],"mappings":"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","sourcesContent":["import { getFlavors, getFlavorByName } from \"../controllers/flavorsController\";\nimport { getToppings, getToppingsNames } from \"../controllers/toppingsController\";\nimport { getOpeningTimes } from '../controllers/storesController';\nimport { getOnePricing } from '../controllers/pricingsController';\n\nconst QTY_1 = [1, \"um\", \"uma\"];\n\nexport const getFlavorsAndToppings = async (pageID, sizeID) => {\n    try {\n        const flavorArray = await getFlavors(pageID);\n        for (let flavor of flavorArray) {\n            if (sizeID) {\n                const pricing = await getOnePricing(pageID, flavor.kind, sizeID);\n                if (pricing) {\n                    flavor.price = pricing.price;\n                }\n            }\n            flavor.toppingsNames = await getToppingsNames(flavor.toppings);\n        }\n        return flavorArray;\n    } catch (err) {\n        console.log(\"err on getFlavorsAndToppings\");\n        console.log(err);\n    }\n}\n\nexport const inputCardapioReplyMsg = (flavorArray) => {\n    let replyMsg = '';\n    if (flavorArray) {\n        for (const flavor of flavorArray) {\n            replyMsg = replyMsg + '*' + flavor.flavor + '*' + '\\n';\n            replyMsg = replyMsg + flavor.toppingsNames.join();\n            replyMsg = replyMsg + '\\n';\n        }\n    }\n    return replyMsg;\n}\n\nexport const getOpenAndClose = async (pageID) => {\n    // TODO: timezone from the store\n    const weekDay = (new Date()).getDay();\n\n    const openingTimes = await getOpeningTimes(pageID);\n\n    if (openingTimes) {\n        let openAndClose = { isOpen: false, openTime: null, closeTime: null };\n        if (weekDay === 1) {\n            openAndClose.isOpen = openingTimes.mon_is_open;\n            openAndClose.openTime = openingTimes.mon_open;\n            openAndClose.closeTime = openingTimes.mon_close;\n        } else if (weekDay === 2) {\n            openAndClose.isOpen = openingTimes.tue_is_open;\n            openAndClose.openTime = openingTimes.tue_open;\n            openAndClose.closeTime = openingTimes.tue_close;\n        } else if (weekDay === 3) {\n            openAndClose.isOpen = openingTimes.wed_is_open;\n            openAndClose.openTime = openingTimes.wed_open;\n            openAndClose.closeTime = openingTimes.wed_close;\n        } else if (weekDay === 4) {\n            openAndClose.isOpen = openingTimes.thu_is_open;\n            openAndClose.openTime = openingTimes.thu_open;\n            openAndClose.closeTime = openingTimes.thu_close;\n        } else if (weekDay === 5) {\n            openAndClose.isOpen = openingTimes.fri_is_open;\n            openAndClose.openTime = openingTimes.fri_open;\n            openAndClose.closeTime = openingTimes.fri_close;\n        } else if (weekDay === 6) {\n            openAndClose.isOpen = openingTimes.sat_is_open;\n            openAndClose.openTime = openingTimes.sat_open;\n            openAndClose.closeTime = openingTimes.sat_close;\n        }\n        else if (weekDay === 7) {\n            openAndClose.isOpen = openingTimes.sun_is_open;\n            openAndClose.openTime = openingTimes.sun_open;\n            openAndClose.closeTime = openingTimes.sun_close;\n        }\n        return openAndClose;\n    }\n    return null;\n}\n\nexport const inputHorarioReplyMsg = (openAndClose) => {\n    let replyMsg = '';\n    if (openAndClose) {\n        if (openAndClose.isOpen === true) {\n            const strOpenTime = new Date(openAndClose.openTime).getHours() + ':' + new Date(openAndClose.openTime).getMinutes().toString().padStart(2, '0');\n            const strCloseTime = new Date(openAndClose.closeTime).getHours() + ':' + new Date(openAndClose.closeTime).getMinutes().toString().padStart(2, '0');\n\n            replyMsg = 'Olá, hoje nosso horário de funcionamento é a partir das ';\n            replyMsg = replyMsg + strOpenTime + ' horas, até às ';\n            replyMsg = replyMsg + strCloseTime + ' horas.';\n        } else {\n            replyMsg = 'Olá, infelizmente hoje estamos fechados, então, não estamos aceitando pedidos. ';\n        }\n    }\n    return replyMsg;\n}\n\n/**\n * validateBotOrder\n * @param {*} pageID \n * @param {*} entities \n * @return\n */\nexport const validateBotOrder = async (pageID, entities) => {\n    const { quantidade, tamanho, produto, sabor } = entities;\n    const validated = basicValidation(quantidade, tamanho, produto, sabor);\n    var replyText = new String();\n    if (validated === 0) { // passed\n        const order_flavor = await getFlavorByName(pageID, sabor[0]);\n\n        if (order_flavor) {\n            const order_qty = quantidade[0];\n            const order_size = tamanho[0];\n            const order_prod = produto.length > 0 ? produto[0] : 'pizza';\n            const order_flav = order_flavor.flavor;\n\n            replyText = 'Ok, o seu pedido é : \\n';\n            replyText = replyText.concat(order_qty, ' ', order_prod, ' ', order_size, ' de ', order_flav, '\\n');\n            replyText = replyText.concat('Para confirmar, digite SIM. Se tem algum problema, diga pra mim o que está errado');\n        } else {\n            replyText = 'Não temos o sabor ' + sabor[0];\n        }\n    } else if (validated === 1) {\n        replyText = 'A quantidade solicitada não bate, vou questionar se está faltando algo...';\n    } else {\n        replyText = 'Algum problema com tamanho ou sabor...';\n    }\n    return replyText;\n}\n\n/**\n * basicValidation\n * @param {*} quantidade \n * @param {*} tamanho \n * @param {*} produto \n * @param {*} sabor \n * @returns\n *      0 - if the validation passed\n *      1 - if quantidade validation failed\n *      2 - if tamanho validation failed\n *      3 - if produto validation failed\n *      4 - if sabor validation failed\n */\nconst basicValidation = (quantidade, tamanho, produto, sabor) => {\n    // 1 pizza, 1 sabor, 1 quantidade\n    if (quantidade.length === 1) { // && QTY_1.includes(quantidade[1])) {\n        if (tamanho.length === 1) {\n            if (sabor.length === 1) {\n                return 0;\n            }\n        }\n    }\n    return 5;\n}\n\n\n"],"file":"actionsController.js"}