{"version":3,"sources":["../../../src/api/bot/actionsController.js"],"names":["QTY_1","checkTypedText","bot","sender","pageID","text","pageId","userId","id","pendingOrder","order","waitingFor","addrData","manual_addres","formattedAddress","sendActions","action","isNaN","data","mapEventsActions","event","console","error","confirmTypedTextError","Bot","wait","type","option","multiple","marketing","mapEventsActionsErr","split","payload","location","out","Elements","startTyping","getElement","basicReply","askForContinue","checkLastAction","optionsStopOrder","passThreadControl","sendWelcomeMessage","sendMainMenu","sendCardapio","sendHorario","askForDeliver","showDeliver","fetchUser","user1","confirmAddressOrAskLocation","confirmAddress","askForWantOrder","user2","confirmLocationAddress","askForPhone","showAddress","showOrderOrAskForPhone","user","askForLocation","askToTypeAddress","askForQuantity","askForQuantityMore","showQuantity","askForSize","showSize","showSplit","checkSplit","askForFlavorOrConfirm","askForFlavor","showFlavor","showOrderOrNextItem","askForWantBeverage","showNoBeverage","askForBeverages","showBeverage","askForPaymentType","showPaymentType","askForPaymentChange","showPaymentChange","askForComments","askToTypeComments","showComments","showFullOrder","askForChangeOrder","askForSpecificItem","changeItem","cancelItem","updateItemAskOptions","cancelPendingOrder","confirmOrder","marketing_flow","stopTyping","send","fn","params","add","buttons","Buttons","options","map","replies","QuickReplies","setQuickReplies","setListStyle","hidden","isOnlyButtons","subtext","userID","validation","info"],"mappings":"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","sourcesContent":["import { Bot, Elements, Buttons, QuickReplies } from 'facebook-messenger-bot';\nimport {\n    sendWelcomeMessage,\n    sendMainMenu,\n    sendCardapio,\n    askForPhone,\n    showPhone,\n    askToTypePhone,\n    askForQuantity,\n    askForQuantityMore,\n    showQuantity,\n    askForSize,\n    showSize,\n    askForFlavor,\n    showFlavor,\n    showOrderOrNextItem,\n    askForLocation,\n    confirmAddressOrAskLocation,\n    confirmLocationAddress,\n    showAddress,\n    confirmOrder,\n    askToTypeAddress,\n    askForWantBeverage, askForBeverages, showBeverage, showNoBeverage,\n    sendHorario,\n    basicReply,\n    askForChangeOrder,\n    cancelItem,\n    changeItem,\n    checkSplit,\n    askForFlavorOrConfirm,\n    askForSpecificItem,\n    updateItemAskOptions,\n    showOrderOrAskForPhone,\n    showSplit,\n    showFullOrder,\n    askForWantOrder,\n    askForContinue,\n    checkLastAction,\n    optionsStopOrder,\n    passThreadControl,\n    confirmAddress,\n    confirmTypedPhone,\n    askForPaymentType,\n    showPaymentType,\n    showPaymentChange,\n    askForPaymentChange,\n    cancelPendingOrder,\n    askForComments,\n    showComments,\n    askToTypeComments,\n    askForDeliver,\n    showDeliver,\n} from './botController';\n\nimport {\n    m_askForRestaurant, m_askForOwnership, m_askForOptions,\n    m_askHowGetHere,\n    m_askForTestType, m_askForBeginTest, m_afterOrderConfirmation, m_startTrial,\n    m_openQuestion, m_confirmOpenQuestion, m_returnContact, m_contactPhone, m_contactMail, m_typePhone,\n    m_isValidPhone,\n    m_howItWorks2,\n    m_howItWorks3,\n    m_howItWorks4,\n    m_howItWorks5,\n    m_howItWorks,\n    m_askTestTypePizzaria,\n    m_showPrices,\n    m_returnedCustomer,\n} from './botMarkController';\nimport { getOrderPending } from '../controllers/ordersController';\n\nconst QTY_1 = [1, 'um', 'uma'];\n\nexport const checkTypedText = async ({ bot, sender, pageID, text }) => {\n    try {\n        const pendingOrder = await getOrderPending({ pageId: pageID, userId: sender.id });\n\n        if (pendingOrder && pendingOrder.order) {\n            if (pendingOrder.order.waitingFor === 'typed_address') {\n                const addrData = {\n                    manual_addres: true,\n                    formattedAddress: text,\n                }\n                await sendActions({ action: 'CONFIRM_ADDRESS', bot, sender, pageID, addrData })\n            }\n            else if (pendingOrder.order.waitingFor === 'phone')\n                await sendActions({ action: 'CONFIRM_TYPED_PHONE', bot, sender, pageID, text });\n            else if (pendingOrder.order.waitingFor === 'quantity' && !isNaN(text) && +text <= 6) {\n                const data = 'qty_' + text;\n                await mapEventsActions({ event: 'ORDER_QTY', data, bot, sender, pageID })\n            }\n            else if (pendingOrder.order.waitingFor === 'typed_comments') {\n                await sendActions({ action: 'SHOW_COMMENTS', bot, sender, pageID, text });\n                await sendActions({ action: 'SHOW_FULL_ORDER', bot, sender, pageID });\n            }\n            else // Bot didn't understand what was typed\n                await sendActions({ action: 'ASK_FOR_CONTINUE', bot, sender, pageID });\n        } else {\n            await sendActions({ action: 'SEND_MAIN_MENU', bot, sender, pageID });\n        }\n\n    } catch (confirmTypedTextError) {\n        console.error({ confirmTypedTextError });\n        throw confirmTypedTextError;\n    }\n}\n\n\n/**\n * Receive events, dispatch actions\n * @param {*} param\n */\nexport const mapEventsActions = async ({ event, data, bot, sender, pageID, text }) => {\n    try {\n        switch (event) {\n            case 'ORDER_CONTINUE_ORDER':\n                switch (data) {\n                    case 'continueorder_yes':\n                        await sendActions({ action: 'CHECK_LAST_ACTION', bot, sender, pageID });\n                        break;\n                    case 'continueorder_no':\n                        await sendActions({ action: 'CONTINUE_ORDER_NO', bot, sender, pageID });\n                        break;\n                }\n                break;\n            case 'STOP_ORDER_OPTIONS':\n                switch (data) {\n                    case 'stoporder_init':\n                        await sendActions({ action: 'CANCEL_PENDING_ORDER', bot, sender, pageID });\n                        break;\n                    case 'stoporder_human':\n                        await sendActions({ action: 'PASS_THREAD_CONTROL', bot, sender, pageID });\n                        break;\n                }\n                break;\n            case 'MAIN-MENU':\n                switch (data) {\n                    case 'CARDAPIO_PAYLOAD':\n                        await sendActions({ action: 'SEND_CARDAPIO', bot, sender, pageID });\n                        await Bot.wait(3000);\n                        await sendActions({ action: 'ASK_FOR_ORDER', bot, sender, pageID });\n                        break;\n                    case 'PEDIDO_PAYLOAD':\n                        // await sendActions({ action: 'CHECK_ADDRESS', bot, sender, pageID });\n                        await sendActions({ action: 'ASK_FOR_DELIVER', bot, sender, pageID });\n                        break;\n                    case 'HORARIO_PAYLOAD':\n                        await sendActions({ action: 'SEND_HORARIO', bot, sender, pageID });\n                        break;\n                }\n                break;\n            case 'ORDER_WANT_ORDER':\n                switch (data) {\n                    case 'wantorder_yes':\n                        // await sendActions({ action: 'CHECK_ADDRESS', bot, sender, pageID });\n                        await sendActions({ action: 'ASK_FOR_DELIVER', bot, sender, pageID });\n                        break;\n                    case 'wantorder_no':\n                        await sendActions({ action: 'BASIC_REPLY', bot, sender, pageID, data: 'Ok, vou enviar as opções então. Para continuar é só clicar em uma delas' });\n                        await sendActions({ action: 'SEND_MAIN_MENU', bot, sender, pageID });\n                        break;\n                }\n                break;\n            case 'ORDER_DELIVER':\n                await sendActions({ action: 'SHOW_DELIVER', bot, sender, pageID, data });\n                switch (data.type) {\n                    case 'delivery':\n                        await sendActions({ action: 'CHECK_ADDRESS', bot, sender, pageID });\n                        break;\n                    case 'pickup':\n                        await sendActions({ action: 'ASK_FOR_PHONE', bot, sender, pageID });\n                        break;\n                }\n                break;\n            case 'CORRECT_SAVED_ADDRESS':\n                await sendActions({ action: 'SHOW_ADDRESS', bot, sender, pageID, data });\n                await sendActions({ action: 'ASK_FOR_PHONE', bot, sender, pageID });\n                break;\n            case 'WRONG_SAVED_ADDRESS':\n                await sendActions({ action: 'ASK_FOR_LOCATION', bot, sender, pageID, event });\n                break;\n            case 'LOCATION_ADDRESS':\n                switch (data) {\n                    case 'incorrect_address':\n                        await sendActions({ action: 'ASK_TO_TYPE_ADDRESS', bot, sender, pageID });\n                        break;\n                    default:\n                        await sendActions({ action: 'SHOW_ADDRESS', bot, sender, pageID, data });\n                        await sendActions({ action: 'SHOW_ORDER_OR_ASK_FOR_PHONE', bot, sender, pageID });\n                        break;\n                }\n                break;\n            case 'PHONE_CONFIRMED':\n                switch (data) {\n                    case 'change_phone':\n                        await sendActions({ action: 'ASK_TO_TYPE_PHONE', bot, sender, pageID });\n                        break;\n                    default:\n                        await sendActions({ action: 'SHOW_PHONE', bot, sender, pageID, data });\n                        await sendActions({ action: 'ASK_FOR_QUANTITY', bot, sender, pageID });\n                        break;\n                }\n                break;\n            case 'ORDER_QTY':\n                switch (data) {\n                    case 'qty_more':\n                        await sendActions({ action: 'ASK_FOR_QUANTITY_MORE', bot, sender, pageID });\n                        break;\n                    case 'qty_less':\n                        await sendActions({ action: 'ASK_FOR_QUANTITY', bot, sender, pageID });\n                        break;\n                    default:\n                        await sendActions({ action: 'SHOW_QUANTITY', bot, sender, pageID, data });\n                        await sendActions({ action: 'ASK_FOR_SIZE', bot, sender, pageID });\n                        break;\n                }\n                break;\n            case 'ORDER_SIZE':\n                await sendActions({ action: 'SHOW_SIZE', bot, sender, pageID, data })\n                await sendActions({ action: 'CHECK_SPLIT', bot, sender, pageID, data })\n                break;\n            case 'ORDER_SPLIT':\n                await sendActions({ action: 'SHOW_SPLIT', bot, sender, pageID, data })\n                await sendActions({ action: 'CHECK_FLAVOR', bot, sender, pageID, data })\n                break;\n            case 'ORDER_FLAVOR':\n                switch (data.option) {\n                    case 'flavors_more':\n                        await sendActions({ action: 'ASK_FOR_FLAVOR', bot, sender, pageID, multiple: data.multiple })\n                        break;\n                    default:\n                        await sendActions({ action: 'SHOW_FLAVOR', bot, sender, pageID, data })\n                        await sendActions({ action: 'CHECK_ITEM', bot, sender, pageID })\n                        break;\n                }\n                break;\n            case 'ORDER_PIZZA_CONFIRMATION':\n                switch (data.type) {\n                    case 'confirmation_yes':\n                        await sendActions({ action: 'ASK_FOR_WANT_BEVERAGE', bot, sender, pageID });\n                        break;\n                    default:\n                        await sendActions({ action: 'ASK_FOR_CHANGE_ORDER', bot, sender, pageID, data });\n                        break;\n                }\n                break;\n            case 'ORDER_WANT_CHANGE':\n                await sendActions({ action: 'ASK_FOR_SPECIFIC_ITEM', bot, sender, pageID });\n                break;\n            case 'ORDER_CHANGE':\n                switch (data) {\n                    case 'change_quantity':\n                        await sendActions({ action: 'ASK_FOR_QUANTITY', bot, sender, pageID });\n                        break;\n                    case 'change_size':\n                        await sendActions({ action: 'ASK_FOR_SIZE', bot, sender, pageID });\n                        break;\n                    case 'change_flavor':\n                        await sendActions({ action: 'ASK_FOR_FLAVOR', bot, sender, pageID, multiple: 1 })\n                        break;\n                    case 'change_address':\n                        await sendActions({ action: 'ASK_FOR_LOCATION', bot, sender, pageID });\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            case 'ORDER_CHANGE_ITEM':\n                await sendActions({ action: 'CHANGE_ITEM', bot, sender, pageID, data });\n                break;\n            case 'ORDER_CANCEL_ITEM':\n                await sendActions({ action: 'CANCEL_ITEM', bot, sender, pageID, data });\n                break;\n            case 'ORDER_CONFIRM_BEVERAGE':\n                switch (data) {\n                    case 'beverage_yes':\n                        await sendActions({ action: 'ASK_FOR_BEVERAGE_OPTIONS', bot, sender, pageID, multiple: 1 })\n                        break;\n                    default:\n                        await sendActions({ action: 'SHOW_NO_BEVERAGE', bot, sender, pageID })\n                        await sendActions({ action: 'ASK_FOR_PAYMENT_TYPE', bot, sender, pageID })\n                        break;\n                }\n                break;\n            case 'ORDER_BEVERAGE':\n                switch (data.option) {\n                    case 'beverages_more':\n                        await sendActions({ action: 'ASK_FOR_BEVERAGE_OPTIONS', bot, sender, pageID, multiple: data.multiple })\n                        break;\n                    case 'beverages_cancel':\n                        await sendActions({ action: 'SHOW_NO_BEVERAGE', bot, sender, pageID })\n                        await sendActions({ action: 'ASK_FOR_PAYMENT_TYPE', bot, sender, pageID })\n                        break;\n                    default:\n                        await sendActions({ action: 'SHOW_BEVERAGE', bot, sender, pageID, data })\n                        await sendActions({ action: 'ASK_FOR_PAYMENT_TYPE', bot, sender, pageID })\n                        break;\n                }\n                break;\n            case 'ORDER_PAYMENT_TYPE':\n                await sendActions({ action: 'SHOW_PAYMENT_TYPE', bot, sender, pageID, data })\n\n                switch (data) {\n                    case 'payment_money':\n                        await sendActions({ action: 'ASK_FOR_PAYMENT_CHANGE', bot, sender, pageID })\n                        break;\n                    case 'payment_card':\n                        await sendActions({ action: 'ASK_FOR_COMMENTS', bot, sender, pageID })\n                        // await sendActions({ action: 'SHOW_FULL_ORDER', bot, sender, pageID })\n                        break;\n                }\n                break;\n            case 'ORDER_PAYMENT_CHANGE':\n                await sendActions({ action: 'SHOW_PAYMENT_CHANGE', bot, sender, pageID, data })\n                await sendActions({ action: 'ASK_FOR_COMMENTS', bot, sender, pageID })\n                break;\n            case 'ORDER_COMMENTS':\n                switch (data) {\n                    case 'comments_yes':\n                        await sendActions({ action: 'ASK_FOR_TYPE_COMMENTS', bot, sender, pageID })\n                        break;\n                    default:\n                        await sendActions({ action: 'SHOW_FULL_ORDER', bot, sender, pageID })\n                        break;\n                }\n                break;\n            case 'ORDER_CONFIRMATION':\n                switch (data.type) {\n                    case 'confirmation_yes':\n                        await sendActions({ action: 'CONFIRM_ORDER', bot, sender, pageID });\n                        if (bot.marketing) { // marketing. if the order is confirmed, go on in the conversation\n                            await sendActions({ action: 'PIZZAIBOT_MARKETING', bot, sender, pageID, data: 'confirmation_yes' });\n                        }\n                        break;\n                    default:\n                        await sendActions({ action: 'ASK_FOR_CHANGE_ORDER', bot, sender, pageID });\n                        break;\n                }\n                break;\n            case 'ORDER_CHANGE_SELECT_ITEM':\n                await sendActions({ action: 'UPDATE_ITEM', bot, sender, pageID, data })\n                break;\n\n        }\n    } catch (mapEventsActionsErr) {\n        console.error({ event }, { mapEventsActionsErr }, { data });\n    }\n}\n\nexport const sendActions = async ({ action, bot, sender, pageID, multiple, split,\n    data, payload, location, text, addrData }) => {\n    try {\n        let out = new Elements();\n        await bot.startTyping(sender.id);\n        await Bot.wait(500);\n        switch (action) {\n            case 'BASIC_REPLY':\n                out = await getElement(basicReply, data);\n                break;\n            case 'CHECK_TYPED_TEXT':\n                out = await checkTypedText(pageID, sender.id, text);\n                break;\n            case 'ASK_FOR_CONTINUE':\n                out = await getElement(askForContinue);\n                break;\n            case 'CHECK_LAST_ACTION':\n                out = await getElement(checkLastAction, [pageID, sender.id]);\n                break;\n            case 'CONTINUE_ORDER_NO':\n                out = await getElement(optionsStopOrder);\n                break;\n            case 'PASS_THREAD_CONTROL':\n                out = await getElement(passThreadControl, [pageID, sender.id]);\n                break;\n            case 'SEND_WELCOME':\n                out = await getElement(sendWelcomeMessage, [pageID, sender]);\n                break;\n            case 'SEND_MAIN_MENU':\n                out = await getElement(sendMainMenu);\n                break;\n            case 'SEND_CARDAPIO':\n                out = await getElement(sendCardapio, [pageID]);\n                break;\n            case 'SEND_HORARIO':\n                out = await getElement(sendHorario, [pageID]);\n                break;\n            case 'ASK_FOR_DELIVER':\n                out = await getElement(askForDeliver, [pageID, sender.id]);\n                break;\n            case 'SHOW_DELIVER':\n                out = await getElement(showDeliver, [pageID, sender.id, data]);\n                break;\n            case 'CHECK_ADDRESS':\n                const user1 = await bot.fetchUser(sender.id);\n                out = await getElement(confirmAddressOrAskLocation, [pageID, sender.id, user1]);\n                break;\n            case 'CONFIRM_ADDRESS':\n                out = await getElement(confirmAddress, [pageID, sender.id, addrData]);\n                break;\n            case 'ASK_FOR_ORDER':\n                out = await getElement(askForWantOrder);\n                break;\n            case 'LOCATION_CONFIRM_ADDRESS':\n                const user2 = await bot.fetchUser(sender.id);\n                out = await getElement(confirmLocationAddress,\n                    [pageID, sender.id, location, user2]);\n                break;\n            case 'ASK_FOR_PHONE':\n                out = await getElement(askForPhone, [pageID, sender.id]);\n                break;\n            case 'SHOW_PHONE':\n                out = await showPhone(pageID, sender.id, payload || data);\n                break;\n            case 'SHOW_ADDRESS':\n                out = await getElement(showAddress, [pageID, sender.id, data]);\n                break;\n            case 'SHOW_ORDER_OR_ASK_FOR_PHONE':\n                out = await getElement(showOrderOrAskForPhone, [pageID, sender.id]);\n                break;\n            case 'ASK_TO_TYPE_PHONE':\n                out = await askToTypePhone(pageID, sender.id);\n                break;\n            case 'CONFIRM_TYPED_PHONE':\n                out = await confirmTypedPhone(pageID, sender.id, text);\n                break;\n            case 'ASK_FOR_LOCATION':\n                const user = await bot.fetchUser(sender.id);\n                out = await getElement(askForLocation, [pageID, sender.id, user]);\n                break;\n            case 'ASK_TO_TYPE_ADDRESS':\n                out = await getElement(askToTypeAddress, [pageID, sender.id]);\n                break;\n            case 'ASK_FOR_QUANTITY':\n                out = await getElement(askForQuantity, [pageID, sender.id]);\n                break;\n            case 'ASK_FOR_QUANTITY_MORE':\n                out = await getElement(askForQuantityMore, [pageID, sender.id]);\n                break;\n            case 'SHOW_QUANTITY':\n                out = await getElement(showQuantity, [pageID, sender.id, data]);\n                break;\n            case 'ASK_FOR_SIZE':\n                out = await getElement(askForSize, [pageID, sender.id]);\n                break;\n            case 'SHOW_SIZE':\n                out = await getElement(showSize, [pageID, sender.id, data]);\n                break;\n            case 'SHOW_SPLIT':\n                out = await getElement(showSplit, [pageID, sender.id, data]);\n                break;\n            case 'CHECK_SPLIT':\n                out = await getElement(checkSplit, [pageID, sender.id, 1]);\n                break;\n            case 'CHECK_FLAVOR':\n                out = await getElement(askForFlavorOrConfirm, [pageID, sender.id, 1]);\n                break;\n            case 'ASK_FOR_FLAVOR':\n                out = await getElement(askForFlavor, [pageID, sender.id, multiple]);\n                break;\n            case 'SHOW_FLAVOR':\n                out = await getElement(showFlavor, [pageID, sender.id, data]);\n                break;\n            case 'CHECK_ITEM':\n                out = await getElement(showOrderOrNextItem, [pageID, sender.id]);\n                break;\n            case 'ASK_FOR_WANT_BEVERAGE':\n                out = await getElement(askForWantBeverage, [pageID, sender.id]);\n                break;\n            case 'SHOW_NO_BEVERAGE':\n                out = await getElement(showNoBeverage, [pageID, sender.id, data]);\n                break;\n            case 'ASK_FOR_BEVERAGE_OPTIONS':\n                out = await getElement(askForBeverages, [pageID, sender.id, multiple]);\n                break;\n            case 'SHOW_BEVERAGE':\n                out = await getElement(showBeverage, [pageID, sender.id, data]);\n                break;\n            case 'ASK_FOR_PAYMENT_TYPE':\n                out = await getElement(askForPaymentType, [pageID, sender.id]);\n                break;\n            case 'SHOW_PAYMENT_TYPE':\n                out = await getElement(showPaymentType, [pageID, sender.id, data]);\n                break;\n            case 'ASK_FOR_PAYMENT_CHANGE':\n                out = await getElement(askForPaymentChange, [pageID, sender.id]);\n                break;\n            case 'SHOW_PAYMENT_CHANGE':\n                out = await getElement(showPaymentChange, [pageID, sender.id, data]);\n                break;\n            case 'ASK_FOR_COMMENTS':\n                out = await getElement(askForComments, [pageID, sender.id]);\n                break;\n            case 'ASK_FOR_TYPE_COMMENTS':\n                out = await getElement(askToTypeComments, [pageID, sender.id]);\n                break;\n            case 'SHOW_COMMENTS':\n                out = await getElement(showComments, [pageID, sender.id, text]);\n                break;\n            case 'ASK_TO_TYPE_COMMENTS':\n                out = await getElement(askToTypeComments, [pageID, sender.id]);\n                break;\n            case 'SHOW_FULL_ORDER':\n                out = await getElement(showFullOrder, [pageID, sender.id]);\n                break;\n            case 'ASK_FOR_CHANGE_ORDER':\n                out = await getElement(askForChangeOrder, [pageID, sender.id, data]);\n                break;\n            case 'ASK_FOR_SPECIFIC_ITEM':\n                out = await getElement(askForSpecificItem, [pageID, sender.id]);\n                break;\n            case 'CHANGE_ITEM':\n                out = await getElement(changeItem, [pageID, sender.id, data]);\n                break;\n            case 'CANCEL_ITEM':\n                out = await getElement(cancelItem, [pageID, sender.id, data]);\n                break;\n            case 'UPDATE_ITEM':\n                out = await getElement(updateItemAskOptions, [pageID, sender.id, data]);\n                break;\n            case 'CANCEL_PENDING_ORDER':\n                out = await getElement(cancelPendingOrder, [pageID, sender.id]);\n                break;\n            case 'CONFIRM_ORDER':\n                out = await getElement(confirmOrder, [pageID, sender.id]);\n                break;\n            case 'PIZZAIBOT_MARKETING':\n                out = await marketing_flow(pageID, sender.id, data, text, payload);\n                break;\n            default:\n                break;\n        }\n        await bot.stopTyping(sender.id);\n        await bot.send(sender.id, out);\n    } catch (sendActionsErr) {\n        console.error('action:', action, 'data:', data, 'err:', sendActionsErr);\n        throw sendActionsErr;\n    }\n}\n\nconst getElement = async (fn, params) => {\n    // TODO: Where check if it is facebook or whatsapp?\n\n    const out = new Elements();\n    const data = params ? await fn(...params) : await fn();\n    if (data.type === 'text') {\n        out.add({ text: data.text });\n    } else if (data.type === 'buttons') {\n        const buttons = new Buttons();\n        data.options.map(option => buttons.add(option));\n        out.add({ text: data.text, buttons });\n    }\n    else if (data.type === 'replies') {\n        out.add({ text: data.text });\n        const replies = new QuickReplies();\n        data.options.map(option => replies.add(option));\n        out.setQuickReplies(replies);\n    }\n    else if (data.type === 'list' || data.type === 'fulllist') {\n        out.setListStyle('compact');\n        data.options.map(option => {\n            if (!option.hidden) {\n                const buttons = new Buttons();\n                buttons.add(option.buttons);\n                if (option.isOnlyButtons) out.add({ isOnlyButtons: option.isOnlyButtons, buttons: buttons })\n                else out.add({ text: option.text, subtext: option.subtext, buttons: buttons })\n            }\n        });\n    }\n\n    return out;\n}\n\n\n/**\n * Actions for marketing controller\n * @param {*} data \n */\nexport const marketing_flow = async (pageID, userID, data, text, payload) => {\n    switch (data) {\n        case 'GET_STARTED':\n            return await m_askHowGetHere(data, pageID, userID);\n        case 'howget_pizzaria':\n        case 'howget_facebookad':\n        case 'howget_activemarketing':\n        case 'howget_dontremember':\n            return await m_askForRestaurant(data, pageID, userID);\n        case 'restaurant_yes':\n            return await m_askForOwnership(data, pageID, userID);\n        case 'restaurant_no':\n            return await m_askForOptions(data, pageID, userID);\n        case 'owner_yes':\n            return await m_askForOptions(data, pageID, userID, 'owner');\n        case 'employee_yes':\n            return await m_askForOptions(data, pageID, userID, 'employee');\n        case 'options_howitworks':\n            return await m_howItWorks(data, pageID, userID);\n        case 'howitworks_2':\n            return await m_howItWorks2(data, pageID, userID);\n        case 'howitworks_3':\n            return await m_howItWorks3(data, pageID, userID);\n        case 'howitworks_4':\n            return await m_howItWorks4(data, pageID, userID);\n        case 'howitworks_5':\n            return await m_howItWorks5(data, pageID, userID);\n        case 'options_howmuch':\n            return await m_showPrices(data, pageID, userID);\n        case 'options_wanttest':\n            return await m_askForTestType(data, pageID, userID);\n        case 'testtype_customer':\n            return await m_askForBeginTest(data, pageID, userID);\n        case 'testtype_pizzaria':\n            return await m_askTestTypePizzaria(data, pageID, userID);\n        case 'confirmation_yes':\n            return await m_afterOrderConfirmation(data, pageID, userID);\n        case 'orderConfirmation_start':\n            return await m_startTrial(data, pageID, userID);\n        case 'orderConfirmation_question':\n            return await m_openQuestion(data, pageID, userID);\n        case 'open_question':\n            return await m_confirmOpenQuestion(data, pageID, userID, text);\n        case 'finalquestion_phone':\n            return await m_returnContact(data, pageID, userID, 'phone');\n        case 'finalquestion_whatsapp':\n            return await m_returnContact(data, pageID, userID, 'whatsapp');\n        case 'finalquestion_mail':\n            return await m_returnContact(data, pageID, userID, 'email');\n        case 'finalquestion_messenger':\n            return await m_returnContact(data, pageID, userID, 'messenger');\n        case 'type_phone':\n            return await m_typePhone(data, pageID, userID);\n        case 'retype_phone':\n            return await m_typePhone(data, pageID, userID);\n        case 'contact_phone':\n            const validation = await m_isValidPhone(payload || text);\n            console.info({ validation });\n            if (validation === 'OK_PHONE')\n                return await m_contactPhone(data, pageID, userID, payload || text);\n            else return await m_typePhone('retype_phone', pageID, userID, validation);\n        case 'contact_mail':\n            return await m_contactMail(data, pageID, userID, text);\n        case 'returned_customer':\n            return await m_returnedCustomer(data, pageID, userID);\n        default:\n            return await basicReply('Ops, não tenho uma resposta para isso.');\n    }\n}\n\n\n// export const getOpenAndClose = async (pageID) => {\n//     // TODO: timezone from the store\n//     const weekDay = (new Date()).getDay();\n\n//     const openingTimes = await getStoreData(pageID);\n\n//     if (openingTimes) {\n//         let openAndClose = { isOpen: false, openTime: null, closeTime: null };\n//         if (weekDay === 1) {\n//             openAndClose.isOpen = openingTimes.mon_is_open;\n//             openAndClose.openTime = openingTimes.mon_open;\n//             openAndClose.closeTime = openingTimes.mon_close;\n//         } else if (weekDay === 2) {\n//             openAndClose.isOpen = openingTimes.tue_is_open;\n//             openAndClose.openTime = openingTimes.tue_open;\n//             openAndClose.closeTime = openingTimes.tue_close;\n//         } else if (weekDay === 3) {\n//             openAndClose.isOpen = openingTimes.wed_is_open;\n//             openAndClose.openTime = openingTimes.wed_open;\n//             openAndClose.closeTime = openingTimes.wed_close;\n//         } else if (weekDay === 4) {\n//             openAndClose.isOpen = openingTimes.thu_is_open;\n//             openAndClose.openTime = openingTimes.thu_open;\n//             openAndClose.closeTime = openingTimes.thu_close;\n//         } else if (weekDay === 5) {\n//             openAndClose.isOpen = openingTimes.fri_is_open;\n//             openAndClose.openTime = openingTimes.fri_open;\n//             openAndClose.closeTime = openingTimes.fri_close;\n//         } else if (weekDay === 6) {\n//             openAndClose.isOpen = openingTimes.sat_is_open;\n//             openAndClose.openTime = openingTimes.sat_open;\n//             openAndClose.closeTime = openingTimes.sat_close;\n//         }\n//         else if (weekDay === 7) {\n//             openAndClose.isOpen = openingTimes.sun_is_open;\n//             openAndClose.openTime = openingTimes.sun_open;\n//             openAndClose.closeTime = openingTimes.sun_close;\n//         }\n//         return openAndClose;\n//     }\n//     return null;\n// }\n\n// export const inputHorarioReplyMsg = (openAndClose) => {\n//     let replyMsg = '';\n//     if (openAndClose) {\n//         if (openAndClose.isOpen === true) {\n//             const strOpenTime = new Date(openAndClose.openTime).getHours() + ':' + new Date(openAndClose.openTime).getMinutes().toString().padStart(2, '0');\n//             const strCloseTime = new Date(openAndClose.closeTime).getHours() + ':' + new Date(openAndClose.closeTime).getMinutes().toString().padStart(2, '0');\n\n//             replyMsg = 'Olá, hoje nosso horário de funcionamento é a partir das ';\n//             replyMsg = replyMsg + strOpenTime + ' horas, até às ';\n//             replyMsg = replyMsg + strCloseTime + ' horas.';\n//         } else {\n//             replyMsg = 'Olá, infelizmente hoje estamos fechados, então, não estamos aceitando pedidos. ';\n//         }\n//     }\n//     return replyMsg;\n// }\n"],"file":"actionsController.js"}