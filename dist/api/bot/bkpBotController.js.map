{"version":3,"sources":["../../../src/api/bot/bkpBotController.js"],"names":["log_file","fs","createWriteStream","__dirname","flags","log_stdout","process","stdout","console","log","d","write","util","format","MSG_GENERAL_ERROR","sendErrorMsg","_errorMsg","out","Elements","_showErrorMsg","add","text","basicReply","replyText","type","askForContinue","pageId","userId","options","data","event","checkLastAction","pendingOrder","order","waitingFor","addrData","confirmAddress","askForLocation","location","lat","location_lat","long","location_long","url","location_url","confirmLocationAddress","askForSize","askForQuantity","askForSplitFlavorOrConfirm","askForFlavor","askForWantBeverage","askForBeverages","showFullOrder","showOrderOrNextItem","sendMainMenu","optionsStopOrder","_txt","replies","QuickReplies","setQuickReplies","passThreadControl","result","sendWelcomeMessage","pageID","sender","fetch","page","replyMsg","String","firstResponseText","replace","first_name","sendHorario","todayIsOpen","todayOpenAt","todayCloseAt","sendCardapio","askForWantOrder","user","isLocation","addresses","length","setListStyle","foundAnyCompleteAddress","i","element","address_components","_data","formatted_address","buttons","Buttons","addressNumber","subtext","buttonsOpt","isOnlyButtons","askToTypeAddress","confirmAddressOrAskLocation","userID","waitingForAddress","_replyText","formattedAddress","showAddress","formattedAddrData","showOrderOrAskForPhone","isComplete","po","askForPhone","isPhoneNumber","askToTypePhone","confirmTypedPhone","phone","showPhone","askForQuantityMore","showQuantity","qty","substr","currentItem","_text","qty_total","sizesWithPricing","sizes","id","size","split","eraseSplit","showSize","sizeId","multiple","currentItemSize","currentSize","askForFlavorOrConfirm","showSplit","originalSplit","_txtFlavor","inputCardapioReplyMsg","flavorArray","flavor","toppingsNames","join","getFlavorsAndToppings","sizeID","flavorsWithPrice","Array","getOnePricing","kind","pricing","price","toppings","push","error","flavorsAndToppingsErr","items","status","flavorId","_id","flavorsArray","_rangeIni","_rangeEnd","_fl","_subtext","concat","option","showFlavor","completeItem","calcTotal","currentItemSplit","item_complete","nextItem","total_price","_item","_txtQty","beverageId","beverage","address","askForPaymentType","showPaymentType","paymentType","_txtPaymentType","askForPaymentChange","showPaymentChange","paymentChange","_txtPaymentChange","payment_type","payment_change","confirmOrder","askForChangeOrder","askForOptionsToChange","item","askForOptionsToChangeErr","askForSpecificItem","forEach","noBeverage","no_beverage","beveragesArr","_bev","name","showNoBeverage","showBeverage","beveragePrice","updateItemAskOptions","objectId","sendShippingNotification","orderId","accessToken","Bot","send_message_tag","sendRejectionNotification","rejectionExplanation"],"mappings":"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","sourcesContent":["import util from 'util';\nimport fs from 'fs';\nimport { Bot, Elements, Buttons, QuickReplies } from 'facebook-messenger-bot';\nimport { getOnePageToken, getOnePageData, sendPassThreadControl } from '../controllers/pagesController';\nimport { getPricingSizing } from '../controllers/pricingsController';\nimport { getFlavors } from \"../controllers/flavorsController\";\nimport { getToppingsNames } from \"../controllers/toppingsController\";\nimport getCardapio from './show_cardapio';\nimport { getSizes, getSize } from '../controllers/sizesController';\nimport { getBeverages } from '../controllers/beveragesController';\nimport { getTodayOpeningTime } from '../controllers/storesController';\nimport { updateOrder, getOrderPending } from '../controllers/ordersController';\nimport { getAddressLocation, getCustomerAddress, formatAddrData } from '../controllers/customersController';\nimport { updateStatusSpecificItem } from '../controllers/itemsController';\n\n// TODO: create a debugger with json format\nvar log_file = fs.createWriteStream(__dirname + '/debug.log', { flags: 'w' });\nvar log_stdout = process.stdout;\n\nconsole.log = function (d) { //\n    log_file.write(util.format(d) + '\\n');\n    log_stdout.write(util.format(d) + '\\n');\n};\n\nconst MSG_GENERAL_ERROR = 'Ops, estamos com um probleminha técnico: ';\n\n// // create a custom timestamp format for log statements\n// const SimpleNodeLogger = require('simple-node-logger'),\n//     opts = {\n//         logFilePath: 'logs/bot.log',\n//         timestampFormat: 'YYYY-MM-DD HH:mm:ss.SSS'\n//     },\n//     log = SimpleNodeLogger.createSimpleLogger(opts);\n\nexport const sendErrorMsg = async (_errorMsg) => {\n    const out = new Elements();\n    let _showErrorMsg = _errorMsg ? _errorMsg : 'ERRO DESCONHECIDO';\n    out.add({ text: MSG_GENERAL_ERROR + _showErrorMsg });\n    return out;\n}\n\n// export const updateOrderFlow = async (pageID, userID) => {\n\n// }\n\nexport const basicReply = async (replyText) => {\n    if (!replyText) {\n        replyText = 'Hi, how are you doing?';\n    }\n    return { type: 'text', text: replyText };\n}\n\n/**\n * Send Yes or No to the user asking if he wants to place an order right now.\n * @param {*} pageId \n * @param {*} userId \n */\nexport const askForContinue = async (pageId, userId) => {\n    return {\n        type: 'replies',\n        text: 'Não entendi o que você quis dizer. 😞. Vamos continuar com o pedido?',\n        options: [\n            { text: \"Sim\", data: \"continueorder_yes\", event: 'ORDER_CONTINUE_ORDER' },\n            { text: \"Não\", data: \"continueorder_no\", event: 'ORDER_CONTINUE_ORDER' }\n        ]\n    }\n}\n\nexport const checkLastAction = async (pageId, userId) => {\n\n    const pendingOrder = await getOrderPending({ pageId, userId });\n\n    if (pendingOrder.order) {\n        if (pendingOrder.order.waitingFor === 'confirm_address') {\n            const addrData = await getCustomerAddress(pageId, userId);\n            return await confirmAddress(pageId, userId, addrData);\n        }\n        else if (pendingOrder.order.waitingFor === 'location')\n            return await askForLocation(pageId, userId);\n        else if (pendingOrder.order.waitingFor === 'location_address') {\n            const location = {\n                lat: pendingOrder.order.location_lat,\n                long: pendingOrder.order.location_long,\n                url: pendingOrder.order.location_url,\n            }\n            return await confirmLocationAddress(pageId, userId, location);\n        }\n        else if (pendingOrder.order.waitingFor === 'size')\n            return await askForSize(pageId, userId)\n        else if (pendingOrder.order.waitingFor === 'quantity')\n            return await askForQuantity(pageId, userId);\n        else if (pendingOrder.order.waitingFor === 'split')\n            return askForSplitFlavorOrConfirm(pageId, userId, 1);\n        else if (pendingOrder.order.waitingFor === 'flavor')\n            return await askForFlavor(pageId, userId, 1);\n        else if (pendingOrder.order.waitingFor === 'want_beverage')\n            return await askForWantBeverage(pageId, userId);\n        else if (pendingOrder.order.waitingFor === 'beverage')\n            return await askForBeverages(pageId, userId, 1);\n        else if (pendingOrder.order.waitingFor === 'confirmation')\n            return await showFullOrder(pageId, userId);\n        else if (pendingOrder.order.waitingFor === 'nothing')\n            return await showOrderOrNextItem(pageId, userId);\n        else\n            return await sendMainMenu();\n    } else\n        return await sendMainMenu();\n}\n\nexport const optionsStopOrder = async (pageId, userId) => {\n    const out = new Elements();\n    let _txt = 'Muito bem, aqui estão as opções:';\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    // replies.add({ text: \"Quantidade\", data: \"change_quantity\", event: 'ORDER_CHANGE' });\n    replies.add({ text: \"Voltar p/ Início\", data: \"stoporder_init\", event: 'STOP_ORDER_OPTIONS' });\n    replies.add({ text: \"Falar c/ Humano\", data: \"stoporder_human\", event: 'STOP_ORDER_OPTIONS' });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const passThreadControl = async (pageId, userId) => {\n    const out = new Elements();\n\n    const result = await sendPassThreadControl(pageId, userId);\n    if (result === 200) {\n        let _txt = 'Ok, a partir de agora você está nas mãos do nosso humano. \\\n    O que você escrever a partir de agora será respondido por uma pessoa, \\\n    o mais rápido possível!';\n        out.add({ text: _txt });\n    } else {\n        let _txt = 'Ops, tivemos um probleminha. Tente novamente';\n        out.add({ text: _txt });\n    }\n    return out;\n}\n\n\n/**\n * \n * @param {*} sender \n * @param {*} pageID \n */\nexport const sendWelcomeMessage = async (pageID, sender) => {\n    await sender.fetch('first_name');\n    const page = await getOnePageData(pageID);\n    const replyMsg = new String(page.firstResponseText).replace('$NAME', sender.first_name);\n    const out = new Elements();\n    out.add({ text: replyMsg });\n    return out;\n}\n\nexport const sendMainMenu = async () => {\n    return {\n        type: 'buttons',\n        text: 'Por favor escolha uma das opções',\n        options: [\n            { text: '🍕 Cardápio', data: 'CARDAPIO_PAYLOAD', event: 'MAIN-MENU' },\n            { text: '🕒 Horários', data: 'HORARIO_PAYLOAD', event: 'MAIN-MENU' },\n            { text: '📨 Fazer Pedido', data: 'PEDIDO_PAYLOAD', event: 'MAIN-MENU' }\n        ]\n    };\n\n    // const buttons = new Buttons();\n    // buttons.add({ text: '🍕 Cardápio', data: 'CARDAPIO_PAYLOAD', event: 'MAIN-MENU' });\n    // buttons.add({ text: '🕒 Horários', data: 'HORARIO_PAYLOAD', event: 'MAIN-MENU' });\n    // buttons.add({ text: '📨 Fazer Pedido', data: 'PEDIDO_PAYLOAD', event: 'MAIN-MENU' });\n\n    // const out = new Elements();\n    // out.add({ text: 'Por favor escolha uma das opções', buttons });\n\n    // return out;\n}\n\nexport const sendHorario = async (pageID) => {\n    const { todayIsOpen, todayOpenAt, todayCloseAt } = await getTodayOpeningTime(pageID);\n\n    let replyMsg = '';\n    if (todayIsOpen === true) {\n        replyMsg = 'Estamos abertos hoje, a partir das ' + todayOpenAt + ' horas, até às ' + todayCloseAt + ' horas.';\n    } else {\n        replyMsg = 'Infelizmente hoje não estamos abertos, mas você pode consultar nosso cardápio no menu principal.';\n    }\n    return { type: 'text', text: replyMsg };\n}\n\n/**\n * Returns only the formatted text to be sent to the user\n * @param {*} pageID \n */\nexport const sendCardapio = async (pageID) => {\n    const replyMsg = await getCardapio(pageID);\n    return { type: 'text', text: replyMsg };\n\n    // const out = new Elements();\n    // out.add({ text: replyMsg });\n\n    // return out;\n}\n\n/**\n * Send Yes or No to the user asking if he wants to place an order right now.\n */\nexport const askForWantOrder = async () => {\n    return {\n        type: 'replies',\n        text: 'Agora que você viu nosso cardápio, você está pronto para fazer o pedido?',\n        options: [\n            { text: \"Sim\", data: \"wantorder_yes\", event: 'ORDER_WANT_ORDER' },\n            { text: \"Não\", data: \"wantorder_no\", event: 'ORDER_WANT_ORDER' }\n        ]\n    };\n\n    // const out = new Elements();\n    // let _txt = 'Agora que você viu nosso cardápio, você está pronto para fazer o pedido?';\n    // out.add({ text: _txt });\n\n    // const replies = new QuickReplies();\n    // // replies.add({ text: \"Quantidade\", data: \"change_quantity\", event: 'ORDER_CHANGE' });\n    // replies.add({ text: \"Sim\", data: \"wantorder_yes\", event: 'ORDER_WANT_ORDER' });\n    // replies.add({ text: \"Não\", data: \"wantorder_no\", event: 'ORDER_WANT_ORDER' });\n    // out.setQuickReplies(replies);\n    // return out;\n}\n\n\n/**\n * Question No.01\n * If the user doesnt have an address in the database, this will be the first question.\n */\nexport const askForLocation = async (pageId, userId, user) => {\n    await updateOrder({ pageId, userId, user, waitingFor: 'location' });\n\n    const out = new Elements();\n    out.add({ text: 'Para começar, preciso saber aonde você está. Clique no botão abaixo que receberei a sua localização.' });\n\n    const replies = new QuickReplies();\n    replies.add({ text: 'Localização', isLocation: true, data: 'location_location', event: 'LOCATION' });\n    // replies.add({ text: 'Informar o CEP', data: 'location_cep', event: 'LOCATION' });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const confirmLocationAddress = async (pageId, userId, location, user) => {\n\n    await updateOrder({ pageId, userId, location, user, waitingFor: 'location_address' });\n\n    const addresses = await getAddressLocation(location);\n\n    if (addresses && addresses.length && addresses.length > 0) {\n\n        const out = new Elements();\n        out.setListStyle('compact');\n\n        let foundAnyCompleteAddress = false;\n        for (let i = 0; i < 4; i++) {\n            const element = addresses[i];\n            if (element.address_components && element.address_components.length >= 6) {\n                foundAnyCompleteAddress = true;\n                const _data = { formatted_address: element.formatted_address, address_components: element.address_components };\n                const buttons = new Buttons();\n                buttons.add({ text: 'Esse!', data: _data, event: 'LOCATION_ADDRESS' });\n                let addressNumber = i + 1;\n                out.add({ text: 'Endereço ' + addressNumber, subtext: element.formatted_address, buttons });\n            }\n        }\n\n        if (foundAnyCompleteAddress) {\n            const buttonsOpt = new Buttons();\n            buttonsOpt.add({ text: 'Não é meu endereço..', data: \"incorrect_address\", event: 'LOCATION_ADDRESS' });\n            out.add({ buttons: buttonsOpt, isOnlyButtons: true });\n            return out;\n        } else {\n            return await askToTypeAddress(pageId, userId);\n        }\n    }\n    else {\n        return await askToTypeAddress(pageId, userId);\n    }\n}\n\nexport const confirmAddressOrAskLocation = async (pageId, userId, user) => {\n\n    // TODO: check if the location is in the neighborhood.\n    // TODO: check if the location is the same as stored in db.\n    const addrData = await getCustomerAddress(pageId, userId);\n\n    if (addrData) {\n        // const out = new Elements();\n\n        // let _replyText = 'A entrega será para esse endereço?\\n';\n        // _replyText = _replyText + addrData.formattedAddress;\n\n        // out.add({ text: _replyText });\n\n        // const replies = new QuickReplies();\n        // replies.add({ text: 'Sim', data: addrData, event: 'CORRECT_SAVED_ADDRESS' });\n        // replies.add({ text: 'Não', data: addrData, event: 'WRONG_SAVED_ADDRESS' });\n        // out.setQuickReplies(replies);\n\n        // await updateOrder({ pageId, userId, user, waitingFor: 'confirm_address' });\n\n        // return out;\n        return confirmAddress(pageId, userId, addrData, user);\n    } else {\n        return await askForLocation(pageId, userId, user);\n    }\n}\n\nexport const askToTypeAddress = async (pageID, userID) => {\n    await updateOrder({ pageId: pageID, userId: userID, waitingForAddress: true, waitingFor: 'typed_address' });\n\n    const out = new Elements();\n    out.add({ text: 'Não foi possível localizar um endereço válido. Digite o seu endereço completo por favor.' });\n    return out;\n}\n\nexport const confirmAddress = async (pageId, userId, addrData, user) => {\n\n    if (user)\n        await updateOrder({ pageId, userId, user, waitingForAddress: false, waitingFor: 'confirm_address' });\n    else\n        await updateOrder({ pageId, userId, waitingForAddress: false, waitingFor: 'confirm_address' });\n\n    const out = new Elements();\n\n    let _replyText = 'A entrega será para esse endereço?\\n';\n    _replyText = _replyText + addrData.formattedAddress;\n    out.add({ text: _replyText });\n\n    const replies = new QuickReplies();\n    replies.add({ text: 'Sim', data: addrData, event: 'CORRECT_SAVED_ADDRESS' });\n    replies.add({ text: 'Não', data: addrData, event: 'WRONG_SAVED_ADDRESS' });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const showAddress = async (pageId, userId, addrData) => {\n    if (addrData && addrData.address_components) {\n        const formattedAddrData = await formatAddrData(addrData);\n        await updateOrder({ pageId, userId, addrData: formattedAddrData });\n    }\n    else {\n        await updateOrder({ pageId, userId, addrData });\n    }\n\n    const out = new Elements();\n    out.add({ text: 'Ok, entregaremos nesse endereço.' });\n    return out;\n}\n\nexport const showOrderOrAskForPhone = async (pageId, userId) => {\n    const po = await getOrderPending({ pageId, userId, isComplete: false });\n\n    if (po.order && po.order.waitingFor === 'confirmation')\n        return await showOrderOrNextItem(pageId, userId);\n    else\n        return await askForPhone(pageId, userId);\n}\n\nexport const askForPhone = async (pageId, userId) => {\n\n    await updateOrder({ pageId, userId, waitingFor: 'phone' });\n\n    const out = new Elements();\n    out.add({ text: 'Pode nos enviar o seu telefone para confirmar o seu pedido? Se não aparecer o seu telefone (ou estiver errado), use a opção digitar.' });\n\n    const replies = new QuickReplies();\n    replies.add({ text: 'Telefone', isPhoneNumber: true, data: 'phone_number', event: 'PHONE_NUMBER' });\n    replies.add({ text: 'Digitar o telefone', data: 'change_phone', event: 'PHONE_CONFIRMED' });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const askToTypePhone = async (pageId, userId) => {\n\n    await updateOrder({ pageId, userId, waitingFor: 'phone' });\n\n    const out = new Elements();\n    out.add({ text: 'Por favor, digite o número do telefone válido para que possamos confirmar o pedido. Pode digitar o 📞:' });\n    return out;\n}\n\nexport const confirmTypedPhone = async (pageId, userId, phone) => {\n    const out = new Elements();\n\n    await updateOrder({ pageId, userId, waitingFor: 'phone' });\n\n    let _txt = 'O telefone ' + phone + ' está coreto?';\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Sim\", data: phone, event: 'PHONE_CONFIRMED' });\n    replies.add({ text: \"Não, usar outro\", data: \"change_phone\", event: 'PHONE_CONFIRMED' });\n    out.setQuickReplies(replies);\n\n    return out;\n}\n\n\nexport const showPhone = async (pageId, userId, phone) => {\n    await updateOrder({ pageId, userId, phone, waitingFor: 'nothing' });\n\n    const out = new Elements();\n    out.add({ text: 'Usaremos o número ' + phone + ' para confirmar o pedido. Agora vou pegar as informações do pedido.' });\n    return out;\n}\n\n\n// export const askForEmail = async () => {\n//     const out = new Elements();\n//     out.add({ text: 'Pode também nos enviar o seu e-mail?' });\n\n//     const replies = new QuickReplies();\n//     replies.add({ text: 'E-mail', isPhoneNumber: true, data: 'phone_number', event: 'PHONE_NUMBER' });\n//     out.setQuickReplies(replies);\n//     return out;\n// }\n\nexport const askForQuantity = async (pageId, userId) => {\n    const out = new Elements();\n    out.add({ text: 'Quantas pizzas você quer?' });\n\n    const replies = new QuickReplies();\n    replies.add({ text: '1', data: 'qty_1', event: 'ORDER_QTY' });\n    replies.add({ text: '2', data: 'qty_2', event: 'ORDER_QTY' });\n    replies.add({ text: '3', data: 'qty_3', event: 'ORDER_QTY' });\n    replies.add({ text: '+ de 3', data: 'qty_more', event: 'ORDER_QTY' });\n    out.setQuickReplies(replies);\n\n    await updateOrder({ pageId, userId, waitingFor: 'quantity' });\n\n    return out;\n}\n\nexport const askForQuantityMore = async (pageId, userId) => {\n    const out = new Elements();\n    out.add({ text: 'Por favor informe a quantidade de pizzas:' });\n\n    const replies = new QuickReplies();\n    replies.add({ text: '- de 4', data: 'qty_less', event: 'ORDER_QTY' });\n    replies.add({ text: '4', data: 'qty_4', event: 'ORDER_QTY' });\n    replies.add({ text: '5', data: 'qty_5', event: 'ORDER_QTY' });\n    replies.add({ text: '6', data: 'qty_6', event: 'ORDER_QTY' });\n    // replies.add({ text: '+ de 6', data: 'qty_more_more', event: 'ORDER_QTY' });\n    out.setQuickReplies(replies);\n\n    await updateOrder({ pageId, userId, waitingFor: 'quantity' });\n\n    return out;\n}\n\nexport const showQuantity = async (pageId, userId, data) => {\n    // data is 'qty_1', 'qty_2', 'qty_3'...\n    const qty = new String(data).substr(data.length - 1, 1);\n\n    await updateOrder({ pageId, userId, qty, waitingFor: 'size', currentItem: 1 });\n\n    const out = new Elements();\n    if (qty == 1) {\n        out.add({ text: '✅ ' + ' 1 pizza.' });\n    } else {\n        out.add({ text: '✅ ' + qty + ' pizzas.' });\n    }\n    return out;\n}\n\nexport const askForSize = async (pageId, userId) => {\n\n    const out = new Elements();\n    const po = await getOrderPending({ pageId, userId, isComplete: false });\n\n    if (po.order) {\n        let _text = '';\n        if (po.order.qty_total === 1) {\n            _text = 'Qual o tamanho da pizza?';\n        } else {\n            _text = 'Agora vou pegar os detalhes da ' + po.order.currentItem + 'a. pizza.\\n';\n            _text = _text + 'Qual o tamanho dela?';\n        }\n        out.add({ text: _text });\n\n        const replies = new QuickReplies();\n        const sizesWithPricing = await getPricingSizing(pageId); // only sizes with pricing\n        const sizes = await getSizes(pageId, sizesWithPricing);\n        for (let i = 0; i < sizes.length; i++) {\n            const _data = { id: sizes[i].id, size: sizes[i].size, split: sizes[i].split };\n            replies.add({ text: sizes[i].size, data: _data, event: 'ORDER_SIZE' });\n        }\n        out.setQuickReplies(replies);\n\n        if (po.order.qty_total === 1)\n            await updateOrder({ pageId, userId, waitingFor: 'size' });\n        else\n            await updateOrder({ pageId, userId, waitingFor: 'size', qty: po.order.qty_total, eraseSplit: true });\n    }\n    else {\n        out.add({ text: MSG_GENERAL_ERROR });\n    }\n\n    return out;\n}\n\nexport const showSize = async (pageId, userId, data) => {\n    if (data && data.split && data.split > 1)\n        await updateOrder({ pageId, userId, sizeId: data.id, waitingFor: 'split' });\n    else\n        await updateOrder({ pageId, userId, sizeId: data.id, waitingFor: 'flavor' });\n\n    const out = new Elements();\n    out.add({ text: '✅ ' + ' Tamanho: ' + data.size });\n    return out;\n}\n\nexport const askForSplitFlavorOrConfirm = async (pageId, userId, multiple) => {\n    const pendingOrder = await getOrderPending({ pageId: pageId, userId: userId, isComplete: true });\n    if (pendingOrder.order) {\n        const currentSize = await getSize(pageId, pendingOrder.order.currentItemSize);\n        // if split is gt than 1, ask user if he wants to split in more than one flavor.\n        if (currentSize.split && currentSize.split > 1) {\n            let _txt = 'A pizza ' + currentSize.size + ' pode ser dividida em ' + currentSize.split + ' sabores.\\n';\n            _txt = _txt + 'Escolha quantos sabores você quer:';\n\n            const out = new Elements();\n            out.add({ text: _txt });\n\n            const replies = new QuickReplies();\n            for (let i = 1; i <= currentSize.split; i++) {\n                let _replyText = i === 1 ? i + ' Sabor' : i + ' Sabores';\n                replies.add({ text: _replyText, data: i, event: 'ORDER_SPLIT' });\n            }\n            out.setQuickReplies(replies);\n\n            return out;\n        } else {\n            return await askForFlavorOrConfirm(pageId, userId, multiple);\n        }\n    }\n}\n\n/**\n * After user answer if he wants to split the pizza, show the chosen option.\n * @param {*} pageId \n * @param {*} userId \n * @param {*} data \n */\nexport const showSplit = async (pageId, userId, data) => {\n    await updateOrder({ pageId, userId, sizeId: data.id, waitingFor: 'flavor', originalSplit: data });\n\n    let _txtFlavor = data === 1 ? 'Sabor' : 'Sabores';\n\n    const out = new Elements();\n    out.add({ text: '✅ ' + data + ' ' + _txtFlavor });\n    return out;\n}\n\nexport const inputCardapioReplyMsg = (flavorArray) => {\n    let replyMsg = '';\n    if (flavorArray) {\n        for (let i = 0; i < flavorArray.length; i++) {\n            const flavor = flavorArray[i];\n\n            replyMsg = replyMsg + '𝐒𝐚𝐛𝐨𝐫: ' + flavor.flavor + '\\n';\n            replyMsg = replyMsg + '𝐈𝐧𝐠𝐫𝐞𝐝𝐢𝐞𝐧𝐭𝐞𝐬: ' + flavor.toppingsNames.join(\", \");\n            replyMsg = replyMsg + '\\n\\n';\n        }\n    }\n    return replyMsg;\n}\n\n\n/**\n * Returns array of flavors. If sizeID was passed, only returns flavors with price.\n * @param {*} pageID \n * @param {*} sizeID \n */\nexport const getFlavorsAndToppings = async (pageID, sizeID) => {\n    try {\n        const flavorArray = await getFlavors(pageID);\n        const flavorsWithPrice = new Array();\n        for (let flavor of flavorArray) {\n            if (sizeID) {\n                const pricing = await getOnePricing(pageID, flavor.kind, sizeID);\n                if (pricing) {\n                    flavor.price = pricing.price;\n                }\n            }\n            if (sizeID) {\n                if (flavor.price) {\n                    flavor.toppingsNames = await getToppingsNames(flavor.toppings, pageID);\n                    flavorsWithPrice.push(flavor);\n                }\n            } else {\n                flavor.toppingsNames = await getToppingsNames(flavor.toppings, pageID);\n                flavorsWithPrice.push(flavor);\n            }\n        }\n        return flavorsWithPrice;\n    } catch (flavorsAndToppingsErr) {\n        console.error({ flavorsAndToppingsErr });\n    }\n}\n\n\nexport const askForFlavorOrConfirm = async (pageId, userId, multiple, split) => {\n    const pendingOrder = await getOrderPending({ pageId: pageId, userId: userId, isComplete: true });\n\n    if (pendingOrder.order) {\n        if (split && split > 1) {\n            return await askForFlavor(pageId, userId, multiple, split, pendingOrder);\n        } else {\n            const currentSize = await getSize(pageId, pendingOrder.order.currentItemSize);\n\n            if (pendingOrder.items && pendingOrder.items.length) {\n                for (let i = 0; i < pendingOrder.items.length; i++) {\n                    if (pendingOrder.items[i].status === 0 && pendingOrder.items[i].flavorId > 0) {\n                        await updateStatusSpecificItem(pendingOrder.items[i]._id, 1);\n                        return await showOrderOrNextItem(pageId, userId);\n                    }\n                }\n                return await askForFlavor(pageId, userId, multiple);\n            }\n        }\n    }\n}\n\n/**\n * \n * @param {*} pageId \n * @param {*} userId \n * @param {*} multiple: if are the first 4 flavors, multiple=1, if are the next, multiple=2 and so on. \n */\nexport const askForFlavor = async (pageId, userId, multiple, split, pendingOrder) => {\n    const out = new Elements();\n\n    out.setListStyle('compact'); // or 'large'\n\n    let po = null;\n    if (pendingOrder)\n        po = pendingOrder;\n    else po = await getOrderPending({ pageId: pageId, userId: userId, isComplete: false });\n\n    const flavorsArray = await getFlavorsAndToppings(pageId, po.order.currentItemSize);\n\n    let _rangeIni = (multiple - 1) * 4;\n    let _rangeEnd = multiple * 4;\n\n    for (let i = _rangeIni; i < _rangeEnd; i++) {\n        if (flavorsArray[i]) {\n            const _fl = flavorsArray[i];\n            const _data = { id: _fl.id, flavor: _fl.flavor }\n            const buttons = new Buttons();\n            buttons.add({ text: 'Quero', data: _data, event: 'ORDER_FLAVOR' });\n\n            let _subtext = _fl.toppingsNames.join();\n            if (_fl.price) {\n                _subtext = _subtext.concat('\\n R$', _fl.price);\n            }\n            out.add({ text: _fl.flavor, subtext: _subtext, buttons });\n        }\n    }\n\n\n    if (flavorsArray.length > _rangeEnd) {\n        multiple++;\n        const buttonsOpt = new Buttons();\n        buttonsOpt.add({ text: '+ Opções', data: { option: \"flavors_more\", multiple: multiple }, event: 'ORDER_FLAVOR' });\n        out.add({ buttons: buttonsOpt, isOnlyButtons: true });\n    }\n\n\n    await updateOrder({ pageId, userId, waitingFor: 'flavor', split: split });\n\n    return out;\n}\n\nexport const showFlavor = async (pageId, userId, data) => {\n    await updateOrder({ pageId, userId, flavorId: data.id, completeItem: true, waitingFor: 'nothing', calcTotal: true });\n\n    const out = new Elements();\n    out.add({ text: '✅ ' + ' Sabor: ' + data.flavor });\n    return out;\n}\n\nexport const showOrderOrNextItem = async (pageId, userId) => {\n    const po = await getOrderPending({ pageId, userId, isComplete: true });\n\n    if (po.order.currentItemSplit > 1) {\n        const split = po.order.currentItemSplit - 1;\n        return await askForFlavor(pageId, userId, 1, split, po);\n    }\n    else if (po.order.qty_total > 1 && po.order.item_complete < po.order.qty_total) {\n        const nextItem = po.order.currentItem + 1;\n        await updateOrder({ pageId, userId, waitingFor: 'size', currentItem: nextItem });\n        return await askForSize(pageId, userId);\n    }\n    else {\n        await updateOrder({ pageId, userId, waitingFor: 'want_beverage' });\n\n        const out = new Elements();\n        let total_price = 0;\n        let _txt = 'Seguem os detalhes do seu pedido:\\n';\n        _txt = _txt + '𝗣𝗲𝗱𝗶𝗱𝗼:' + po.order.id + '\\n';\n        for (let i = 0; i < po.items.length; i++) {\n            const _item = po.items[i];\n            if (_item.flavorId && _item.sizeId) {\n                let _txtQty = _item.split > 1 ? _item.qty + '/' + _item.split : _item.qty;\n                _txt = _txt + `${_txtQty} pizza ${_item.size} de ${_item.flavor}\\n`;\n            } else if (_item.beverageId && _item.beverage) {\n                _txt = _txt + `1 ${_item.beverage}\\n`;\n            }\n            total_price += _item.price;\n        }\n        _txt = _txt + '𝗘𝗻𝗱𝗲𝗿𝗲𝗰̧𝗼 𝗱𝗲 𝗘𝗻𝘁𝗿𝗲𝗴𝗮: ' + po.order.address + '\\n';\n        _txt = _txt + '𝗧𝗲𝗹𝗲𝗳𝗼𝗻𝗲: ' + po.order.phone + '\\n';\n        _txt = _txt + '𝗧𝗼𝘁𝗮𝗹: R$ ' + total_price + '\\n';\n        _txt = _txt + 'O pedido está correto?';\n\n        out.add({ text: _txt });\n\n        const replies = new QuickReplies();\n        replies.add({ text: \"Sim\", data: \"confirmation_yes\", event: 'ORDER_PIZZA_CONFIRMATION' });\n        replies.add({ text: \"Não\", data: \"confirmation_no\", event: 'ORDER_PIZZA_CONFIRMATION' });\n        out.setQuickReplies(replies);\n\n        return out;\n    }\n}\n\nexport const askForPaymentType = async (pageId, userId) => {\n    const out = new Elements();\n    out.add({ text: 'Qual a forma de pagamento?' });\n\n    const replies = new QuickReplies();\n    replies.add({ text: 'Dinheiro', data: 'payment_money', event: 'ORDER_PAYMENT_TYPE' });\n    replies.add({ text: 'Cartão', data: 'payment_card', event: 'ORDER_PAYMENT_TYPE' });\n    out.setQuickReplies(replies);\n\n    await updateOrder({ pageId, userId, waitingFor: 'payment_type' });\n\n    return out;\n}\n\nexport const showPaymentType = async (pageId, userId, data) => {\n    await updateOrder({ pageId, userId, paymentType: data });\n\n    let _txtPaymentType = data === 'payment_money' ? 'Dinheiro' : 'Cartão';\n\n    const out = new Elements();\n    out.add({ text: '✅ ' + ' Forma de pagamento: ' + _txtPaymentType });\n    return out;\n}\n\nexport const askForPaymentChange = async (pageId, userId) => {\n    const out = new Elements();\n    out.add({ text: 'Precisa de troco?' });\n\n    const replies = new QuickReplies();\n    replies.add({ text: 'Sim', data: 'payment_change_yes', event: 'ORDER_PAYMENT_CHANGE' });\n    replies.add({ text: 'Não', data: 'payment_change_no', event: 'ORDER_PAYMENT_CHANGE' });\n    out.setQuickReplies(replies);\n\n    await updateOrder({ pageId, userId, waitingFor: 'payment_change' });\n\n    return out;\n}\n\nexport const showPaymentChange = async (pageId, userId, data) => {\n    await updateOrder({ pageId, userId, paymentChange: data });\n\n    let _txtPaymentChange = data === 'payment_change_yes' ? 'Levaremos trocado' : 'Não precisa de troco';\n\n    const out = new Elements();\n    out.add({ text: '✅ ' + _txtPaymentChange });\n    return out;\n}\n\n\nexport const showFullOrder = async (pageId, userId) => {\n    const po = await getOrderPending({ pageId, userId, isComplete: true });\n\n    const out = new Elements();\n    let total_price = 0;\n    let _txt = 'Seguem os detalhes do seu pedido:\\n';\n\n\n\n    _txt = _txt + '𝗣𝗲𝗱𝗶𝗱𝗼: ' + po.order.id + '\\n';\n    for (let i = 0; i < po.items.length; i++) {\n        const _item = po.items[i];\n        if (_item.flavorId && _item.sizeId) {\n            let _txtQty = _item.split > 1 ? _item.qty + '/' + _item.split : _item.qty;\n            _txt = _txt + `${_txtQty} pizza ${_item.size} de ${_item.flavor}\\n`;\n        } else if (_item.beverageId && _item.beverage) {\n            _txt = _txt + `1 ${_item.beverage}\\n`;\n        }\n        total_price += _item.price;\n    }\n    _txt = _txt + '𝗘𝗻𝗱𝗲𝗿𝗲𝗰̧𝗼 𝗱𝗲 𝗘𝗻𝘁𝗿𝗲𝗴𝗮: ' + po.order.address + '\\n';\n    _txt = _txt + '𝗧𝗲𝗹𝗲𝗳𝗼𝗻𝗲: ' + po.order.phone + '\\n';\n    _txt = _txt + '𝗧𝗼𝘁𝗮𝗹: R$ ' + total_price + '\\n';\n\n    let _txtPaymentType = po.payment_type === 'payment_card' ? 'Cartão' : 'Dinheiro';\n    _txt = _txt + '𝗙𝗼𝗿𝗺𝗮 𝗱𝗲 𝗣𝗮𝗴𝗮𝗺𝗲𝗻𝘁𝗼: ' + _txtPaymentType + '\\n';\n\n    if (po.payment_change === 'payment_change_yes') {\n        _txt = _txt + '𝗟𝗲𝘃𝗮𝗿 𝗧𝗿𝗼𝗰𝗼? Sim \\n';\n    }\n\n    _txt = _txt + 'Posso confirmar o pedido?';\n\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Sim\", data: \"confirmation_yes\", event: 'ORDER_CONFIRMATION' });\n    replies.add({ text: \"Não\", data: \"confirmation_no\", event: 'ORDER_CONFIRMATION' });\n    out.setQuickReplies(replies);\n\n    return out;\n}\n\n\nexport const confirmOrder = async (pageId, userId) => {\n    await updateOrder({ pageId, userId, confirmOrder: true, calcTotal: true });\n\n    const out = new Elements();\n    out.add({ text: \"Pedido Confirmado!\" });\n    return out;\n}\n\nexport const askForChangeOrder = async (pageId, userId) => {\n    const out = new Elements();\n\n    await updateOrder({ pageId, userId, waitingFor: 'confirmation' });\n\n    let _txt = 'O que você gostaria de fazer com o seu pedido?';\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Mudar pedido\", data: \"changeOrder\", event: 'ORDER_WANT_CHANGE' });\n    replies.add({ text: \"Mudar endereço\", data: \"change_address\", event: 'ORDER_CHANGE' });\n    replies.add({ text: \"Confirmar.\", data: \"confirmation_yes\", event: 'ORDER_CONFIRMATION' });\n    out.setQuickReplies(replies);\n\n    return out;\n}\n\nexport const askForOptionsToChange = async (pageId, userId, item) => {\n    try {\n        if (item && item.beverageId) {\n            return await askForBeverages(pageId, userId, 1);\n        } else {\n            const out = new Elements();\n\n            let _txt = 'Ok, qual das informações que você gostaria de alterar?';\n            out.add({ text: _txt });\n\n            const replies = new QuickReplies();\n            // replies.add({ text: \"Quantidade\", data: \"change_quantity\", event: 'ORDER_CHANGE' });\n            replies.add({ text: \"Tamanho\", data: \"change_size\", event: 'ORDER_CHANGE' });\n            replies.add({ text: \"Sabor\", data: \"change_flavor\", event: 'ORDER_CHANGE' });\n            out.setQuickReplies(replies);\n            return out;\n        }\n    } catch (askForOptionsToChangeErr) {\n        console.error({ askForOptionsToChangeErr });\n        throw askForOptionsToChangeErr;\n    }\n}\n\nexport const askForSpecificItem = async (pageId, userId) => {\n    const pendingOrder = await getOrderPending({ pageId, userId, isComplete: true });\n    if (pendingOrder.items && pendingOrder.items.length > 1) {\n        const out = new Elements();\n        out.add({ text: 'Primeiro, escolha qual os itens deseja mudar:' });\n\n        const replies = new QuickReplies();\n        let i = 1;\n        pendingOrder.items.forEach(item => {\n            let _txt = item.flavor ? item.flavor : item.beverage;\n            replies.add({ text: i + \"a. \" + _txt, data: item._id, event: 'ORDER_CHANGE_SELECT_ITEM' });\n            i++;\n        });\n        out.setQuickReplies(replies);\n        return out;\n    } else {\n        await updateOrder({ pageId, userId, completeItem: false });\n        return await askForOptionsToChange(pageId, userId);\n    }\n}\n\n/**\n * \n * @param {*} pageId \n * @param {*} userId \n */\nexport const askForWantBeverage = async (pageId, userId) => {\n    const pendingOrder = await getOrderPending({ pageId, userId, isComplete: false });\n\n    const noBeverage = pendingOrder.order.no_beverage;\n\n    if (typeof noBeverage === 'undefined') {\n\n        const out = new Elements();\n        let _txt = 'Gostaria de algo para beber?';\n        out.add({ text: _txt });\n\n        const replies = new QuickReplies();\n        // replies.add({ text: \"Quantidade\", data: \"change_quantity\", event: 'ORDER_CHANGE' });\n        replies.add({ text: \"Sim\", data: \"beverage_yes\", event: 'ORDER_CONFIRM_BEVERAGE' });\n        replies.add({ text: \"Não\", data: \"beverage_no\", event: 'ORDER_CONFIRM_BEVERAGE' });\n        out.setQuickReplies(replies);\n        return out;\n    } else {\n        return showFullOrder(pageId, userId);\n    }\n}\n/**\n * \n * @param {*} pageId \n * @param {*} userId \n * @param {*} multiple \n */\nexport const askForBeverages = async (pageId, userId, multiple) => {\n    const out = new Elements();\n    out.setListStyle('compact'); // or 'large'\n\n    // const po = await getOrderPending({ pageId: pageId, userId: userId, isComplete: false });\n\n    const beveragesArr = await getBeverages(pageId);\n    let _rangeIni = (multiple - 1) * 4;\n    let _rangeEnd = multiple * 4;\n\n    for (let i = _rangeIni; i < _rangeEnd; i++) {\n        if (beveragesArr[i]) {\n            const _bev = beveragesArr[i];\n            const _data = { id: _bev.id, beverage: _bev.name, price: _bev.price }\n            const buttons = new Buttons();\n            buttons.add({ text: 'Quero', data: _data, event: 'ORDER_BEVERAGE' });\n\n            let _subtext = _bev.kind;\n            if (_bev.price) {\n                _subtext = _subtext.concat('\\n R$', _bev.price);\n            }\n            out.add({ text: _bev.name, subtext: _subtext, buttons });\n        }\n    }\n    if ((beveragesArr.length + 1) > _rangeEnd) {\n        multiple++;\n        const buttonsOpt = new Buttons();\n        buttonsOpt.add({ text: '+ Opções (clique aqui para ver + opções..)', data: { option: \"beverages_more\", multiple: multiple }, event: 'ORDER_BEVERAGE' });\n        out.add({ buttons: buttonsOpt, isOnlyButtons: true });\n    } else {\n        // const lastButton = new Buttons();\n        // lastButton.add({ text: 'Não tem, cancelar.', data: { option: \"beverages_cancel\" }, event: 'ORDER_BEVERAGE' });\n        // out.add({ buttons: lastButton, isOnlyButtons: true });\n\n        const _data = { option: 'beverages_cancel' }\n        const buttons = new Buttons();\n        buttons.add({ text: 'Sem bebida', data: _data, event: 'ORDER_BEVERAGE' });\n        let _subtext = 'Se não encontrou, clique em \"Sem bebida\"';\n        out.add({ text: 'Não encontrei', subtext: _subtext, buttons });\n    }\n\n    await updateOrder({ pageId, userId, waitingFor: 'beverage', noBeverage: false });\n    return out;\n}\n\n/**\n * Show that user did not want beverage and update order with this info.\n * @param {*} pageId \n * @param {*} userId \n * @param {*} data \n */\nexport const showNoBeverage = async (pageId, userId, data) => {\n    await updateOrder({ pageId, userId, noBeverage: true, waitingFor: 'confirm' });\n\n    const out = new Elements();\n    out.add({ text: '❌ ' + ' Sem bebida para o seu pedido. ' });\n    return out;\n}\n\n/**\n * Show the chosen beverage.\n * @param {*} pageId \n * @param {*} userId \n * @param {*} data \n */\nexport const showBeverage = async (pageId, userId, data) => {\n    await updateOrder({ pageId, userId, beverageId: data.id, beveragePrice: data.price, completeItem: true, noBeverage: false, waitingFor: 'confirmation', calcTotal: true });\n\n    const out = new Elements();\n    out.add({ text: '✅ ' + '1 Bebida: ' + data.beverage });\n    return out;\n}\n\nexport const updateItemAskOptions = async (pageId, userId, objectId) => {\n    const item = await updateStatusSpecificItem(objectId, 0);\n    return await askForOptionsToChange(pageId, userId, item);\n}\n\nexport const sendShippingNotification = async (pageId, userId, orderId) => {\n    const { accessToken } = await getOnePageToken(pageId);\n\n    const _txt = 'O seu pedido número ' + orderId + ' acabou de sair para entrega. Bom apetite!';\n\n    const out = new Elements();\n    out.add({ text: _txt });\n    await Bot.send_message_tag(accessToken, userId, out);\n}\n\nexport const sendRejectionNotification = async (pageId, userId, orderId, rejectionExplanation) => {\n    const { accessToken } = await getOnePageToken(pageId);\n\n    const _txt = 'Infelizmente não poderemos atender o seu pedido número ' + orderId + '. Segue o motivo: ' + rejectionExplanation;\n\n    const out = new Elements();\n    out.add({ text: _txt });\n    await Bot.send_message_tag(accessToken, userId, out);\n}\n\n\n\n"],"file":"bkpBotController.js"}