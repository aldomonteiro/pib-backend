{"version":3,"sources":["../../../src/api/bot/botController.js"],"names":["log_file","fs","createWriteStream","__dirname","flags","log_stdout","process","stdout","console","log","d","write","util","format","MSG_GENERAL_ERROR","SimpleNodeLogger","require","opts","logFilePath","timestampFormat","createSimpleLogger","sendErrorMsg","sender","fetch","out","Elements","add","text","sendWelcomeMessage","pageID","page","replyMsg","String","firstResponseText","replace","first_name","sendMainMenu","buttons","Buttons","data","event","sendCardapio","askForQuantity","replies","QuickReplies","setQuickReplies","askForQuantityMore","askForSize","sizesWithPricing","sizes","i","length","size","id"],"mappings":"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","sourcesContent":["import util from 'util';\nimport fs from 'fs';\nimport { Elements, Buttons, QuickReplies } from 'facebook-messenger-bot';\nimport { getOnePage, getAllPages, getOnePageData } from '../controllers/pagesController';\nimport { getPricingSizing } from '../controllers/pricingsController';\nimport getCardapio from './show_cardapio';\nimport {\n    getFlavorsAndToppings,\n    inputCardapioReplyMsg,\n    getOpenAndClose,\n    inputHorarioReplyMsg,\n    validateBotOrder,\n} from \"./actionsController\";\nimport { getSizes } from '../controllers/sizesController';\n\n// TODO: create a debugger with json format\nvar log_file = fs.createWriteStream(__dirname + '/debug.log', { flags: 'w' });\nvar log_stdout = process.stdout;\n\nconsole.log = function (d) { //\n    log_file.write(util.format(d) + '\\n');\n    log_stdout.write(util.format(d) + '\\n');\n};\n\nconst MSG_GENERAL_ERROR = 'Ops, estamos com um probleminha técnico';\n\n// create a custom timestamp format for log statements\nconst SimpleNodeLogger = require('simple-node-logger'),\n    opts = {\n        logFilePath: 'logs/bot.log',\n        timestampFormat: 'YYYY-MM-DD HH:mm:ss.SSS'\n    },\n    log = SimpleNodeLogger.createSimpleLogger(opts);\n\nexport const sendErrorMsg = async () => {\n    await sender.fetch('first_name');\n    const out = new Elements();\n    out.add({ text: 'Ops, tivemos um probleminha técnico.' });\n    return out;\n}\n\n\n/**\n * \n * @param {*} sender \n * @param {*} pageID \n */\nexport const sendWelcomeMessage = async (sender, pageID) => {\n    await sender.fetch('first_name');\n    const page = await getOnePageData(pageID);\n    const replyMsg = new String(page.firstResponseText).replace('$NAME', sender.first_name);\n    const out = new Elements();\n    out.add({ text: replyMsg });\n    return out;\n}\n\nexport const sendMainMenu = async () => {\n    const buttons = new Buttons();\n    buttons.add({ text: 'Cardápio', data: 'CARDAPIO_PAYLOAD', event: 'MAIN-MENU' });\n    buttons.add({ text: 'Horários', data: 'HORARIO_PAYLOAD', event: 'MAIN-MENU' });\n    buttons.add({ text: 'Fazer Pedido', data: 'PEDIDO_PAYLOAD', event: 'MAIN-MENU' });\n\n    const out = new Elements();\n    out.add({ text: 'Por favor escolha uma das opções', buttons });\n\n    return out;\n}\n\nexport const sendCardapio = async (pageID) => {\n    const replyMsg = await getCardapio(pageID);\n    const out = new Elements();\n    out.add({ text: replyMsg });\n\n    return out;\n}\n\nexport const askForQuantity = async () => {\n    const out = new Elements();\n    out.add({ text: 'Quantas pizzas você quer?' });\n\n    const replies = new QuickReplies();\n    replies.add({ text: '1', data: 'qty_1', event: 'ORDER_QTY' });\n    replies.add({ text: '2', data: 'qty_2', event: 'ORDER_QTY' });\n    replies.add({ text: '3', data: 'qty_3', event: 'ORDER_QTY' });\n    replies.add({ text: '+ de 3', data: 'qty_more', event: 'ORDER_QTY_MORE' });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const askForQuantityMore = async () => {\n    const out = new Elements();\n    out.add({ text: 'Por favor informe a quantidade de pizzas:' });\n\n    const replies = new QuickReplies();\n    replies.add({ text: '4', data: 'qty_4', event: 'ORDER_QTY' });\n    replies.add({ text: '5', data: 'qty_5', event: 'ORDER_QTY' });\n    replies.add({ text: '6', data: 'qty_6', event: 'ORDER_QTY' });\n    replies.add({ text: '+ de 6', data: 'qty_more_more', event: 'ORDER_QTY_MORE' });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const askForSize = async (pageID) => {\n    const out = new Elements();\n    out.add({ text: 'Qual o tamanho da pizza?' });\n\n    const replies = new QuickReplies();\n    const sizesWithPricing = await getPricingSizing(pageID); // only sizes with pricing\n    const sizes = await getSizes(pageID, sizesWithPricing);\n    for (var i = 0; i < sizes.length; i++) {\n        replies.add({ text: sizes[i].size, data: sizes[i].id, event: 'ORDER_SIZE' });\n    }\n    out.setQuickReplies(replies);\n    return out;\n}\n"],"file":"botController.js"}