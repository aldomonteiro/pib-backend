{"version":3,"sources":["../../../src/api/bot/botController.js"],"names":["log_file","fs","createWriteStream","__dirname","flags","log_stdout","process","stdout","console","log","d","write","util","format","MSG_GENERAL_ERROR","SimpleNodeLogger","require","opts","logFilePath","timestampFormat","createSimpleLogger","sendErrorMsg","_errorMsg","out","Elements","_showErrorMsg","add","text","basicReply","sendWelcomeMessage","pageID","sender","fetch","page","replyMsg","String","firstResponseText","replace","first_name","sendMainMenu","buttons","Buttons","data","event","sendHorario","todayIsOpen","todayOpenAt","todayCloseAt","sendCardapio","askForLocation","replies","QuickReplies","isLocation","setQuickReplies","confirmLocationAddress","pageId","userId","location","addresses","length","setListStyle","foundAnyCompleteAddress","i","element","address_components","_data","formatted_address","addressNumber","subtext","buttonsOpt","isOnlyButtons","askToTypeAddress","confirmAddressOrAskLocation","user","addrData","_replyText","formattedAddress","userID","waitingForAddress","waitingFor","confirmTypedText","message","pendingOrder","order","manual_addres","confirmTypedPhone","askForSize","askForQuantity","askForFlavor","askForBeverages","showOrderOrNextItem","error","confirmTypedTextError","showAddress","formattedAddrData","showOrderOrAskForPhone","isComplete","po","askForPhone","isPhoneNumber","askToTypePhone","phone","_txt","showPhone","askForQuantityMore","showQuantity","qty","substr","currentItem","_text","qty_total","sizesWithPricing","sizes","id","size","eraseSplit","showSize","sizeId","askForSplitFlavorOrConfirm","multiple","currentItemSize","currentSize","split","askForFlavorOrConfirm","showSplit","originalSplit","_txtFlavor","items","status","flavorId","_id","flavorsArray","_rangeIni","_rangeEnd","_fl","flavor","_subtext","toppingsNames","join","price","concat","option","showFlavor","completeItem","calcTotal","currentItemSplit","item_complete","nextItem","total_price","_item","_txtQty","beverageId","beverage","address","showFullOrder","confirmOrder","askForChangeOrder","askForOptionsToChange","item","askForOptionsToChangeErr","askForSpecificItem","forEach","askForWantBeverage","noBeverage","no_beverage","beveragesArr","_bev","name","kind","showNoBeverage","showBeverage","beveragePrice","updateItemAskOptions","objectId","sendShippingNotification","orderId","accessToken","Bot","send_message_tag"],"mappings":"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","sourcesContent":["import util from 'util';\nimport fs from 'fs';\nimport { Bot, Elements, Buttons, QuickReplies } from 'facebook-messenger-bot';\nimport { getOnePageToken, getOnePageData } from '../controllers/pagesController';\nimport { getPricingSizing } from '../controllers/pricingsController';\nimport getCardapio from './show_cardapio';\nimport {\n    getFlavorsAndToppings,\n    inputCardapioReplyMsg,\n    getOpenAndClose,\n    inputHorarioReplyMsg,\n} from \"./actionsController\";\nimport { getSizes, getSize } from '../controllers/sizesController';\nimport { getBeverages } from '../controllers/beveragesController';\nimport { getTodayOpeningTime } from '../controllers/storesController';\nimport { updateOrder, getOrderPending } from '../controllers/ordersController';\nimport { getAddressLocation, getCustomerAddress, formatAddrData } from '../controllers/customersController';\nimport { updateStatusSpecificItem } from '../controllers/itemsController';\n\n// TODO: create a debugger with json format\nvar log_file = fs.createWriteStream(__dirname + '/debug.log', { flags: 'w' });\nvar log_stdout = process.stdout;\n\nconsole.log = function (d) { //\n    log_file.write(util.format(d) + '\\n');\n    log_stdout.write(util.format(d) + '\\n');\n};\n\nconst MSG_GENERAL_ERROR = 'Ops, estamos com um probleminha técnico';\n\n// create a custom timestamp format for log statements\nconst SimpleNodeLogger = require('simple-node-logger'),\n    opts = {\n        logFilePath: 'logs/bot.log',\n        timestampFormat: 'YYYY-MM-DD HH:mm:ss.SSS'\n    },\n    log = SimpleNodeLogger.createSimpleLogger(opts);\n\nexport const sendErrorMsg = async (_errorMsg) => {\n    const out = new Elements();\n    let _showErrorMsg = _errorMsg ? _errorMsg : 'ERRO DESCONHECIDO';\n    out.add({ text: 'Ops, tivemos um probleminha técnico: ' + _showErrorMsg });\n    return out;\n}\n\nexport const basicReply = async () => {\n    const out = new Elements();\n    out.add({ text: 'Hi, how are you doing?' });\n    return out;\n}\n\n/**\n * \n * @param {*} sender \n * @param {*} pageID \n */\nexport const sendWelcomeMessage = async (pageID, sender) => {\n    await sender.fetch('first_name');\n    const page = await getOnePageData(pageID);\n    const replyMsg = new String(page.firstResponseText).replace('$NAME', sender.first_name);\n    const out = new Elements();\n    out.add({ text: replyMsg });\n    return out;\n}\n\nexport const sendMainMenu = async () => {\n    const buttons = new Buttons();\n    buttons.add({ text: 'Cardápio', data: 'CARDAPIO_PAYLOAD', event: 'MAIN-MENU' });\n    buttons.add({ text: 'Horários', data: 'HORARIO_PAYLOAD', event: 'MAIN-MENU' });\n    buttons.add({ text: 'Fazer Pedido', data: 'PEDIDO_PAYLOAD', event: 'MAIN-MENU' });\n\n    const out = new Elements();\n    out.add({ text: 'Por favor escolha uma das opções', buttons });\n\n    return out;\n}\n\nexport const sendHorario = async (pageID) => {\n    const { todayIsOpen, todayOpenAt, todayCloseAt } = await getTodayOpeningTime(pageID);\n\n    let replyMsg = '';\n    if (todayIsOpen === true) {\n        replyMsg = 'Estamos abertos hoje, a partir das ' + todayOpenAt + ' horas, até às ' + todayCloseAt + ' horas.';\n    } else {\n        replyMsg = 'Infelizmente hoje não estamos abertos, mas você pode consultar nosso cardápio no menu principal.';\n    }\n    const out = new Elements();\n    out.add({ text: replyMsg });\n    return out;\n}\n\nexport const sendCardapio = async (pageID) => {\n    const replyMsg = await getCardapio(pageID);\n    const out = new Elements();\n    out.add({ text: replyMsg });\n\n    return out;\n}\n\n/**\n * Question No.01\n * If the user doesnt have an address in the database, this will be the first question.\n */\nexport const askForLocation = async () => {\n    const out = new Elements();\n    out.add({ text: 'Para começar, preciso saber aonde você está. Clique no botão abaixo que receberei a sua localização.' });\n\n    const replies = new QuickReplies();\n    replies.add({ text: 'Localização', isLocation: true, data: 'location_location', event: 'LOCATION' });\n    // replies.add({ text: 'Informar o CEP', data: 'location_cep', event: 'LOCATION' });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const confirmLocationAddress = async (pageId, userId, location) => {\n\n    await updateOrder({ pageId, userId, location });\n\n    const addresses = await getAddressLocation(location);\n\n    if (addresses && addresses.length && addresses.length > 0) {\n\n        const out = new Elements();\n        out.setListStyle('compact');\n\n        let foundAnyCompleteAddress = false;\n        for (let i = 0; i < 4; i++) {\n            const element = addresses[i];\n            if (element.address_components && element.address_components.length >= 6) {\n                foundAnyCompleteAddress = true;\n                const _data = { formatted_address: element.formatted_address, address_components: element.address_components };\n                const buttons = new Buttons();\n                buttons.add({ text: 'Esse!', data: _data, event: 'LOCATION_ADDRESS' });\n                let addressNumber = i + 1;\n                out.add({ text: 'Endereço ' + addressNumber, subtext: element.formatted_address, buttons });\n            }\n        }\n\n        if (foundAnyCompleteAddress) {\n            const buttonsOpt = new Buttons();\n            buttonsOpt.add({ text: 'Não é meu endereço..', data: \"incorrect_address\", event: 'LOCATION_ADDRESS' });\n            out.add({ buttons: buttonsOpt, isOnlyButtons: true });\n            return out;\n        } else {\n            return await askToTypeAddress(pageId, userId);\n        }\n    }\n    else {\n        return await askToTypeAddress(pageId, userId);\n    }\n}\n\nexport const confirmAddressOrAskLocation = async (pageId, userId, user) => {\n\n    await updateOrder({ pageId, userId, user });\n\n    // TODO: check if the location is in the neighborhood.\n    // TODO: check if the location is the same as stored in db.\n    const addrData = await getCustomerAddress(pageId, userId);\n\n    if (addrData) {\n        const out = new Elements();\n\n        let _replyText = 'A entrega será para esse endereço?\\n';\n        _replyText = _replyText + addrData.formattedAddress;\n\n        out.add({ text: _replyText });\n\n        const replies = new QuickReplies();\n        replies.add({ text: 'Sim', data: addrData, event: 'CORRECT_SAVED_ADDRESS' });\n        replies.add({ text: 'Não', data: addrData, event: 'WRONG_SAVED_ADDRESS' });\n        out.setQuickReplies(replies);\n\n        return out;\n    } else {\n        return await askForLocation();\n    }\n}\n\nexport const askToTypeAddress = async (pageID, userID) => {\n    await updateOrder({ pageId: pageID, userId: userID, waitingForAddress: true, waitingFor: 'typed_address' });\n\n    const out = new Elements();\n    out.add({ text: 'Não foi possível localizar um endereço válido. Digite o seu endereço completo por favor.' });\n    return out;\n}\n\nexport const confirmTypedText = async (pageId, userId, message) => {\n    try {\n        const pendingOrder = await getOrderPending({ pageId, userId });\n\n        //console.info({ pendingOrder });\n\n        let out = new Elements();\n\n        if (pendingOrder && pendingOrder.order) {\n            if (typeof pendingOrder.order.waitingForAddress === 'boolean' &&\n                pendingOrder.order.waitingForAddress === true) {\n\n                await updateOrder({ pageId, userId, waitingForAddress: false, waitingFor: 'address' });\n\n                let _replyText = 'A entrega será para esse endereço?\\n';\n                _replyText = _replyText + message.text;\n                out.add({ text: _replyText });\n\n                const addrData = {\n                    manual_addres: true,\n                    formattedAddress: message.text,\n                }\n\n                const replies = new QuickReplies();\n                replies.add({ text: 'Sim', data: addrData, event: 'CORRECT_SAVED_ADDRESS' });\n                replies.add({ text: 'Não', data: addrData, event: 'WRONG_SAVED_ADDRESS' });\n                out.setQuickReplies(replies);\n\n                return out;\n            }\n            else {\n                if (pendingOrder.order.waitingFor === 'phone')\n                    return await confirmTypedPhone(pageId, userId, message.text);\n                else if (pendingOrder.order.waitingFor === 'size')\n                    return await askForSize(pageId, userId)\n                else if (pendingOrder.order.waitingFor === 'quantity')\n                    return await askForQuantity(pageId, userId);\n                else if (pendingOrder.order.waitingFor === 'flavor')\n                    return await askForFlavor(pageId, userId, 1);\n                else if (pendingOrder.order.waitingFor === 'beverage')\n                    return await askForBeverages(pageId, userId, 1);\n                else if (pendingOrder.order.waitingFor === 'nothing')\n                    return await showOrderOrNextItem(pageId, userId);\n                else\n                    return await sendMainMenu();\n            }\n        }\n        else {\n            out = await sendMainMenu();\n        }\n\n        return out;\n    } catch (confirmTypedTextError) {\n        console.error({ confirmTypedTextError });\n        throw confirmTypedTextError;\n    }\n}\n\nexport const showAddress = async (pageId, userId, addrData) => {\n    if (addrData && addrData.address_components) {\n        const formattedAddrData = await formatAddrData(addrData);\n        await updateOrder({ pageId, userId, addrData: formattedAddrData });\n    }\n    else {\n        await updateOrder({ pageId, userId, addrData });\n    }\n\n    const out = new Elements();\n    out.add({ text: 'Ok, entregaremos nesse endereço.' });\n    return out;\n}\n\nexport const showOrderOrAskForPhone = async (pageId, userId) => {\n    const po = await getOrderPending({ pageId, userId, isComplete: false });\n\n    if (po.order && po.order.waitingFor === 'confirmation')\n        return await showOrderOrNextItem(pageId, userId);\n    else\n        return await askForPhone(pageId, userId);\n}\n\nexport const askForPhone = async (pageId, userId) => {\n\n    await updateOrder({ pageId, userId, waitingFor: 'phone' });\n\n    const out = new Elements();\n    out.add({ text: 'Pode nos enviar o seu telefone para confirmar o seu pedido? Se não aparecer o seu telefone (ou estiver errado), use a opção digitar.' });\n\n    const replies = new QuickReplies();\n    replies.add({ text: 'Telefone', isPhoneNumber: true, data: 'phone_number', event: 'PHONE_NUMBER' });\n    replies.add({ text: 'Digitar o telefone', data: 'change_phone', event: 'PHONE_CONFIRMED' });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const askToTypePhone = async (pageId, userId) => {\n\n    await updateOrder({ pageId, userId, waitingFor: 'phone' });\n\n    const out = new Elements();\n    out.add({ text: 'Por favor, digite o número do telefone válido para que possamos confirmar o pedido. Pode digitar:' });\n    return out;\n}\n\nexport const confirmTypedPhone = async (pageId, userId, phone) => {\n    const out = new Elements();\n\n    await updateOrder({ pageId, userId, waitingFor: 'phone' });\n\n    let _txt = 'O telefone ' + phone + ' está coreto?';\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Sim\", data: phone, event: 'PHONE_CONFIRMED' });\n    replies.add({ text: \"Não, usar outro\", data: \"change_phone\", event: 'PHONE_CONFIRMED' });\n    out.setQuickReplies(replies);\n\n    return out;\n}\n\n\nexport const showPhone = async (pageId, userId, phone) => {\n    await updateOrder({ pageId, userId, phone, waitingFor: 'nothing' });\n\n    const out = new Elements();\n    out.add({ text: 'Usaremos o número ' + phone + ' para confirmar o pedido. Agora vou pegar as informações do pedido.' });\n    return out;\n}\n\n\n// export const askForEmail = async () => {\n//     const out = new Elements();\n//     out.add({ text: 'Pode também nos enviar o seu e-mail?' });\n\n//     const replies = new QuickReplies();\n//     replies.add({ text: 'E-mail', isPhoneNumber: true, data: 'phone_number', event: 'PHONE_NUMBER' });\n//     out.setQuickReplies(replies);\n//     return out;\n// }\n\nexport const askForQuantity = async (pageId, userId) => {\n    const out = new Elements();\n    out.add({ text: 'Quantas pizzas você quer?' });\n\n    const replies = new QuickReplies();\n    replies.add({ text: '1', data: 'qty_1', event: 'ORDER_QTY' });\n    replies.add({ text: '2', data: 'qty_2', event: 'ORDER_QTY' });\n    replies.add({ text: '3', data: 'qty_3', event: 'ORDER_QTY' });\n    replies.add({ text: '+ de 3', data: 'qty_more', event: 'ORDER_QTY_MORE' });\n    out.setQuickReplies(replies);\n\n    await updateOrder({ pageId, userId, waitingFor: 'quantity' });\n\n    return out;\n}\n\nexport const askForQuantityMore = async () => {\n    const out = new Elements();\n    out.add({ text: 'Por favor informe a quantidade de pizzas:' });\n\n    const replies = new QuickReplies();\n    replies.add({ text: '4', data: 'qty_4', event: 'ORDER_QTY' });\n    replies.add({ text: '5', data: 'qty_5', event: 'ORDER_QTY' });\n    replies.add({ text: '6', data: 'qty_6', event: 'ORDER_QTY' });\n    replies.add({ text: '+ de 6', data: 'qty_more_more', event: 'ORDER_QTY_MORE' });\n    out.setQuickReplies(replies);\n\n    await updateOrder({ pageId, userId, waitingFor: 'quantity' });\n\n    return out;\n}\n\nexport const showQuantity = async (pageId, userId, data) => {\n    // data is 'qty_1', 'qty_2', 'qty_3'...\n    const qty = new String(data).substr(data.length - 1, 1);\n\n    await updateOrder({ pageId, userId, qty, waitingFor: 'size', currentItem: 1 });\n\n    const out = new Elements();\n    if (qty == 1) {\n        out.add({ text: '✅ ' + ' 1 pizza.' });\n    } else {\n        out.add({ text: '✅ ' + qty + ' pizzas.' });\n    }\n    return out;\n}\n\nexport const askForSize = async (pageId, userId) => {\n\n    const out = new Elements();\n    const po = await getOrderPending({ pageId, userId, isComplete: false });\n\n    if (po.order) {\n        let _text = '';\n        if (po.order.qty_total === 1) {\n            _text = 'Qual o tamanho da pizza?';\n        } else {\n            _text = 'Agora vou pegar os detalhes da ' + po.order.currentItem + 'a. pizza.\\n';\n            _text = _text + 'Qual o tamanho dela?';\n        }\n        out.add({ text: _text });\n\n        const replies = new QuickReplies();\n        const sizesWithPricing = await getPricingSizing(pageId); // only sizes with pricing\n        const sizes = await getSizes(pageId, sizesWithPricing);\n        for (let i = 0; i < sizes.length; i++) {\n            const _data = { id: sizes[i].id, size: sizes[i].size };\n            replies.add({ text: sizes[i].size, data: _data, event: 'ORDER_SIZE' });\n        }\n        out.setQuickReplies(replies);\n\n        if (po.order.qty_total === 1)\n            await updateOrder({ pageId, userId, waitingFor: 'size' });\n        else\n            await updateOrder({ pageId, userId, waitingFor: 'size', qty: po.order.qty_total, eraseSplit: true });\n    }\n    else {\n        out.add({ text: MSG_GENERAL_ERROR });\n    }\n\n    return out;\n}\n\nexport const showSize = async (pageId, userId, data) => {\n    await updateOrder({ pageId, userId, sizeId: data.id, waitingFor: 'flavor' });\n\n    const out = new Elements();\n    out.add({ text: '✅ ' + ' Tamanho: ' + data.size });\n    return out;\n}\n\nexport const askForSplitFlavorOrConfirm = async (pageId, userId, multiple) => {\n    const pendingOrder = await getOrderPending({ pageId: pageId, userId: userId, isComplete: true });\n    if (pendingOrder.order) {\n        const currentSize = await getSize(pageId, pendingOrder.order.currentItemSize);\n        // if split is gt than 1, ask user if he wants to split in more than one flavor.\n        if (currentSize.split && currentSize.split > 1) {\n            let _txt = 'A pizza ' + currentSize.size + ' pode ser dividida em ' + currentSize.split + ' sabores.\\n';\n            _txt = _txt + 'Escolha quantos sabores você quer:';\n\n            const out = new Elements();\n            out.add({ text: _txt });\n\n            const replies = new QuickReplies();\n            for (let i = 1; i <= currentSize.split; i++) {\n                let _replyText = i === 1 ? i + ' Sabor' : i + ' Sabores';\n                replies.add({ text: _replyText, data: i, event: 'ORDER_SPLIT' });\n            }\n            out.setQuickReplies(replies);\n\n            return out;\n        } else {\n            return await askForFlavorOrConfirm(pageId, userId, multiple);\n        }\n    }\n}\n\n/**\n * After user answer if he wants to split the pizza, show the chosen option.\n * @param {*} pageId \n * @param {*} userId \n * @param {*} data \n */\nexport const showSplit = async (pageId, userId, data) => {\n    await updateOrder({ pageId, userId, sizeId: data.id, waitingFor: 'flavor', originalSplit: data });\n\n    let _txtFlavor = data === 1 ? 'Sabor' : 'Sabores';\n\n    const out = new Elements();\n    out.add({ text: '✅ ' + data + ' ' + _txtFlavor });\n    return out;\n}\n\n\nexport const askForFlavorOrConfirm = async (pageId, userId, multiple, split) => {\n    const pendingOrder = await getOrderPending({ pageId: pageId, userId: userId, isComplete: true });\n\n    if (pendingOrder.order) {\n        if (split && split > 1) {\n            return await askForFlavor(pageId, userId, multiple, split, pendingOrder);\n        } else {\n            const currentSize = await getSize(pageId, pendingOrder.order.currentItemSize);\n\n            if (pendingOrder.items && pendingOrder.items.length) {\n                for (let i = 0; i < pendingOrder.items.length; i++) {\n                    if (pendingOrder.items[i].status === 0 && pendingOrder.items[i].flavorId > 0) {\n                        await updateStatusSpecificItem(pendingOrder.items[i]._id, 1);\n                        return await showOrderOrNextItem(pageId, userId);\n                    }\n                }\n                return await askForFlavor(pageId, userId, multiple);\n            }\n        }\n    }\n}\n\n/**\n * \n * @param {*} pageId \n * @param {*} userId \n * @param {*} multiple: if are the first 4 flavors, multiple=1, if are the next, multiple=2 and so on. \n */\nexport const askForFlavor = async (pageId, userId, multiple, split, pendingOrder) => {\n    const out = new Elements();\n\n    out.setListStyle('compact'); // or 'large'\n\n    let po = null;\n    if (pendingOrder)\n        po = pendingOrder;\n    else po = await getOrderPending({ pageId: pageId, userId: userId, isComplete: false });\n\n    const flavorsArray = await getFlavorsAndToppings(pageId, po.order.currentItemSize);\n\n    let _rangeIni = (multiple - 1) * 4;\n    let _rangeEnd = multiple * 4;\n\n    for (let i = _rangeIni; i < _rangeEnd; i++) {\n        if (flavorsArray[i]) {\n            const _fl = flavorsArray[i];\n            const _data = { id: _fl.id, flavor: _fl.flavor }\n            const buttons = new Buttons();\n            buttons.add({ text: 'Quero', data: _data, event: 'ORDER_FLAVOR' });\n\n            let _subtext = _fl.toppingsNames.join();\n            if (_fl.price) {\n                _subtext = _subtext.concat('\\n R$', _fl.price);\n            }\n            out.add({ text: _fl.flavor, subtext: _subtext, buttons });\n        }\n    }\n\n\n    if (flavorsArray.length > _rangeEnd) {\n        multiple++;\n        const buttonsOpt = new Buttons();\n        buttonsOpt.add({ text: '+ Opções', data: { option: \"flavors_more\", multiple: multiple }, event: 'ORDER_FLAVOR' });\n        out.add({ buttons: buttonsOpt, isOnlyButtons: true });\n    }\n\n\n    await updateOrder({ pageId, userId, waitingFor: 'flavor', split: split });\n\n    return out;\n}\n\nexport const showFlavor = async (pageId, userId, data) => {\n    await updateOrder({ pageId, userId, flavorId: data.id, completeItem: true, waitingFor: 'nothing', calcTotal: true });\n\n    const out = new Elements();\n    out.add({ text: '✅ ' + ' Sabor: ' + data.flavor });\n    return out;\n}\n\nexport const showOrderOrNextItem = async (pageId, userId) => {\n    const po = await getOrderPending({ pageId, userId, isComplete: true });\n\n    if (po.order.currentItemSplit > 1) {\n        const split = po.order.currentItemSplit - 1;\n        return await askForFlavor(pageId, userId, 1, split, po);\n    }\n    else if (po.order.qty_total > 1 && po.order.item_complete < po.order.qty_total) {\n        const nextItem = po.order.currentItem + 1;\n        await updateOrder({ pageId, userId, waitingFor: 'size', currentItem: nextItem });\n        return await askForSize(pageId, userId);\n    }\n    else {\n        const out = new Elements();\n        let total_price = 0;\n        let _txt = 'Seguem os detalhes do seu pedido:\\n';\n        _txt = _txt + '*Pedido:* ' + po.order.id + '\\n';\n        for (let i = 0; i < po.items.length; i++) {\n            const _item = po.items[i];\n            if (_item.flavorId && _item.sizeId) {\n                let _txtQty = _item.split > 1 ? _item.qty + '/' + _item.split : _item.qty;\n                _txt = _txt + `${_txtQty} pizza ${_item.size} de ${_item.flavor}\\n`;\n            } else if (_item.beverageId && _item.beverage) {\n                _txt = _txt + `1 ${_item.beverage}\\n`;\n            }\n            total_price += _item.price;\n        }\n        _txt = _txt + '*Endereço de entrega:* ' + po.order.address + '\\n';\n        _txt = _txt + '*Telefone:* ' + po.order.phone + '\\n';\n        _txt = _txt + '*Total:* R$ ' + total_price + '\\n';\n        _txt = _txt + 'O pedido está correto?';\n\n        out.add({ text: _txt });\n\n        const replies = new QuickReplies();\n        replies.add({ text: \"Sim\", data: \"confirmation_yes\", event: 'ORDER_PIZZA_CONFIRMATION' });\n        replies.add({ text: \"Não\", data: \"confirmation_no\", event: 'ORDER_PIZZA_CONFIRMATION' });\n        out.setQuickReplies(replies);\n\n        return out;\n    }\n}\n\nexport const showFullOrder = async (pageId, userId) => {\n    const po = await getOrderPending({ pageId, userId, isComplete: true });\n\n    const out = new Elements();\n    let total_price = 0;\n    let _txt = 'Seguem os detalhes do seu pedido:\\n';\n    _txt = _txt + '*Pedido:* ' + po.order.id + '\\n';\n    for (let i = 0; i < po.items.length; i++) {\n        const _item = po.items[i];\n        if (_item.flavorId && _item.sizeId) {\n            let _txtQty = _item.split > 1 ? _item.qty + '/' + _item.split : _item.qty;\n            _txt = _txt + `${_txtQty} pizza ${_item.size} de ${_item.flavor}\\n`;\n        } else if (_item.beverageId && _item.beverage) {\n            _txt = _txt + `1 ${_item.beverage}\\n`;\n        }\n        total_price += _item.price;\n    }\n    _txt = _txt + '*Endereço de entrega:* ' + po.order.address + '\\n';\n    _txt = _txt + '*Telefone:* ' + po.order.phone + '\\n';\n    _txt = _txt + '*Total:* R$ ' + total_price + '\\n';\n    _txt = _txt + 'Posso confirmar o pedido?';\n\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Sim\", data: \"confirmation_yes\", event: 'ORDER_CONFIRMATION' });\n    replies.add({ text: \"Não\", data: \"confirmation_no\", event: 'ORDER_CONFIRMATION' });\n    out.setQuickReplies(replies);\n\n    return out;\n}\n\n\nexport const confirmOrder = async (pageId, userId) => {\n    await updateOrder({ pageId, userId, confirmOrder: true, calcTotal: true });\n\n    const out = new Elements();\n    out.add({ text: \"Pedido Confirmado!\" });\n    return out;\n}\n\nexport const askForChangeOrder = async (pageId, userId) => {\n    const out = new Elements();\n\n    await updateOrder({ pageId, userId, waitingFor: 'confirmation' });\n\n    let _txt = 'O que você gostaria de fazer com o seu pedido?';\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Mudar pedido\", data: \"changeOrder\", event: 'ORDER_WANT_CHANGE' });\n    replies.add({ text: \"Mudar endereço\", data: \"change_address\", event: 'ORDER_CHANGE' });\n    replies.add({ text: \"Confirmar.\", data: \"confirmation_yes\", event: 'ORDER_CONFIRMATION' });\n    out.setQuickReplies(replies);\n\n    return out;\n}\n\nexport const askForOptionsToChange = async (pageId, userId, item) => {\n    try {\n        if (item && item.beverageId) {\n            return await askForBeverages(pageId, userId, 1);\n        } else {\n            const out = new Elements();\n\n            let _txt = 'Ok, qual das informações que você gostaria de alterar?';\n            out.add({ text: _txt });\n\n            const replies = new QuickReplies();\n            // replies.add({ text: \"Quantidade\", data: \"change_quantity\", event: 'ORDER_CHANGE' });\n            replies.add({ text: \"Tamanho\", data: \"change_size\", event: 'ORDER_CHANGE' });\n            replies.add({ text: \"Sabor\", data: \"change_flavor\", event: 'ORDER_CHANGE' });\n            out.setQuickReplies(replies);\n            return out;\n        }\n    } catch (askForOptionsToChangeErr) {\n        console.error({ askForOptionsToChangeErr });\n        throw askForOptionsToChangeErr;\n    }\n}\n\nexport const askForSpecificItem = async (pageId, userId) => {\n    const pendingOrder = await getOrderPending({ pageId, userId, isComplete: true });\n    if (pendingOrder.items && pendingOrder.items.length > 1) {\n        const out = new Elements();\n        out.add({ text: 'Primeiro, escolha qual os itens deseja mudar:' });\n\n        const replies = new QuickReplies();\n        let i = 1;\n        pendingOrder.items.forEach(item => {\n            let _txt = item.flavor ? item.flavor : item.beverage;\n            replies.add({ text: i + \"a. \" + _txt, data: item._id, event: 'ORDER_CHANGE_SELECT_ITEM' });\n            i++;\n        });\n        out.setQuickReplies(replies);\n        return out;\n    } else {\n        await updateOrder({ pageId, userId, completeItem: false });\n        return await askForOptionsToChange(pageId, userId);\n    }\n}\n\n/**\n * \n * @param {*} pageId \n * @param {*} userId \n */\nexport const askForWantBeverage = async (pageId, userId) => {\n    const pendingOrder = await getOrderPending({ pageId, userId, isComplete: false });\n\n    const noBeverage = pendingOrder.order.no_beverage;\n\n    if (typeof noBeverage === 'undefined') {\n\n        const out = new Elements();\n        let _txt = 'Gostaria de algo para beber?';\n        out.add({ text: _txt });\n\n        const replies = new QuickReplies();\n        // replies.add({ text: \"Quantidade\", data: \"change_quantity\", event: 'ORDER_CHANGE' });\n        replies.add({ text: \"Sim\", data: \"beverage_yes\", event: 'ORDER_CONFIRM_BEVERAGE' });\n        replies.add({ text: \"Não\", data: \"beverage_no\", event: 'ORDER_CONFIRM_BEVERAGE' });\n        out.setQuickReplies(replies);\n        return out;\n    } else {\n        return showFullOrder(pageId, userId);\n    }\n}\n/**\n * \n * @param {*} pageId \n * @param {*} userId \n * @param {*} multiple \n */\nexport const askForBeverages = async (pageId, userId, multiple) => {\n    const out = new Elements();\n    out.setListStyle('compact'); // or 'large'\n\n    // const po = await getOrderPending({ pageId: pageId, userId: userId, isComplete: false });\n\n    const beveragesArr = await getBeverages(pageId);\n    let _rangeIni = (multiple - 1) * 4;\n    let _rangeEnd = multiple * 4;\n\n    for (let i = _rangeIni; i < _rangeEnd; i++) {\n        if (beveragesArr[i]) {\n            const _bev = beveragesArr[i];\n            const _data = { id: _bev.id, beverage: _bev.name, price: _bev.price }\n            const buttons = new Buttons();\n            buttons.add({ text: 'Quero', data: _data, event: 'ORDER_BEVERAGE' });\n\n            let _subtext = _bev.kind;\n            if (_bev.price) {\n                _subtext = _subtext.concat('\\n R$', _bev.price);\n            }\n            out.add({ text: _bev.name, subtext: _subtext, buttons });\n        }\n    }\n    if (beveragesArr.length > _rangeEnd) {\n        multiple++;\n        const buttonsOpt = new Buttons();\n        buttonsOpt.add({ text: '+ Opções (clique aqui para ver + opções..)', data: { option: \"beverages_more\", multiple: multiple }, event: 'ORDER_BEVERAGE' });\n        out.add({ buttons: buttonsOpt, isOnlyButtons: true });\n    } else {\n        // const lastButton = new Buttons();\n        // lastButton.add({ text: 'Não tem, cancelar.', data: { option: \"beverages_cancel\" }, event: 'ORDER_BEVERAGE' });\n        // out.add({ buttons: lastButton, isOnlyButtons: true });\n\n        const _data = { option: 'beverages_cancel' }\n        const buttons = new Buttons();\n        buttons.add({ text: 'Sem bebida', data: _data, event: 'ORDER_BEVERAGE' });\n        let _subtext = 'Se não encontrou, clique em \"Sem bebida\"';\n        out.add({ text: 'Não encontrei', subtext: _subtext, buttons });\n    }\n\n    await updateOrder({ pageId, userId, waitingFor: 'beverage', noBeverage: false });\n    return out;\n}\n\n/**\n * Show that user did not want beverage and update order with this info.\n * @param {*} pageId \n * @param {*} userId \n * @param {*} data \n */\nexport const showNoBeverage = async (pageId, userId, data) => {\n    await updateOrder({ pageId, userId, noBeverage: true, waitingFor: 'confirm' });\n\n    const out = new Elements();\n    out.add({ text: '❌ ' + ' Sem bebida para o seu pedido. ' });\n    return out;\n}\n\n/**\n * Show the chosen beverage.\n * @param {*} pageId \n * @param {*} userId \n * @param {*} data \n */\nexport const showBeverage = async (pageId, userId, data) => {\n    await updateOrder({ pageId, userId, beverageId: data.id, beveragePrice: data.price, completeItem: true, noBeverage: false, waitingFor: 'confirmation', calcTotal: true });\n\n    const out = new Elements();\n    out.add({ text: '✅ ' + '1 Bebida: ' + data.beverage });\n    return out;\n}\n\nexport const updateItemAskOptions = async (pageId, userId, objectId) => {\n    const item = await updateStatusSpecificItem(objectId, 0);\n    return await askForOptionsToChange(pageId, userId, item);\n}\n\nexport const sendShippingNotification = async (pageId, userId, orderId) => {\n    const { accessToken } = await getOnePageToken(pageId);\n\n    const _txt = 'O seu pedido número ' + orderId + ' acabou de sair para entrega. Bom apetite!';\n\n    const out = new Elements();\n    out.add({ text: _txt });\n    await Bot.send_message_tag(accessToken, userId, out);\n}\n\n\n\n"],"file":"botController.js"}