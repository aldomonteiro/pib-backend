{"version":3,"sources":["../../../src/api/bot/botController.js"],"names":["log_file","fs","createWriteStream","__dirname","flags","log_stdout","process","stdout","console","log","d","write","util","format","MSG_GENERAL_ERROR","SimpleNodeLogger","require","opts","logFilePath","timestampFormat","createSimpleLogger","sendErrorMsg","sender","fetch","out","Elements","add","text","sendWelcomeMessage","pageID","page","replyMsg","String","firstResponseText","replace","first_name","sendMainMenu","buttons","Buttons","data","event","sendCardapio","askForLocation","replies","QuickReplies","isLocation","setQuickReplies","confirmLocationAddress","pageId","userId","location","addresses","length","setListStyle","foundAnyCompleteAddress","i","element","address_components","_data","formatted_address","addressNumber","subtext","buttonsOpt","isOnlyButtons","askToTypeAddress","confirmAddressOrAskLocation","user","addrData","_replyText","formattedAddress","userID","waitingForAddress","confirmTypedAddress","message","pendingOrder","info","order","manual_addres","showAddress","formattedAddrData","askForPhone","isPhoneNumber","showPhone","phone","askForQuantity","askForQuantityMore","showQuantity","qty","substr","askForSize","isComplete","_text","qty_total","_itemNumber","item_complete","sizesWithPricing","sizes","id","size","showSize","sizeId","askForFlavor","flavorsArray","_fl","flavor","_tn","toppingsNames","_subtext","j","concat","topping","showFlavor","flavorId","completeItem","showOrderOrNextItem","_txt","items","confirmOrder"],"mappings":"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","sourcesContent":["import util from 'util';\nimport fs from 'fs';\nimport { Elements, Buttons, QuickReplies } from 'facebook-messenger-bot';\nimport { getOnePage, getAllPages, getOnePageData } from '../controllers/pagesController';\nimport { getPricingSizing } from '../controllers/pricingsController';\nimport getCardapio from './show_cardapio';\nimport {\n    getFlavorsAndToppings,\n    inputCardapioReplyMsg,\n    getOpenAndClose,\n    inputHorarioReplyMsg,\n    validateBotOrder,\n} from \"./actionsController\";\nimport { getSizes } from '../controllers/sizesController';\nimport { updateOrder, getOrderPending } from '../controllers/ordersController';\nimport { getAddressLocation, getCustomerAddress, formatAddrData } from '../controllers/customersController';\n\n// TODO: create a debugger with json format\nvar log_file = fs.createWriteStream(__dirname + '/debug.log', { flags: 'w' });\nvar log_stdout = process.stdout;\n\nconsole.log = function (d) { //\n    log_file.write(util.format(d) + '\\n');\n    log_stdout.write(util.format(d) + '\\n');\n};\n\nconst MSG_GENERAL_ERROR = 'Ops, estamos com um probleminha técnico';\n\n// create a custom timestamp format for log statements\nconst SimpleNodeLogger = require('simple-node-logger'),\n    opts = {\n        logFilePath: 'logs/bot.log',\n        timestampFormat: 'YYYY-MM-DD HH:mm:ss.SSS'\n    },\n    log = SimpleNodeLogger.createSimpleLogger(opts);\n\nexport const sendErrorMsg = async () => {\n    await sender.fetch('first_name');\n    const out = new Elements();\n    out.add({ text: 'Ops, tivemos um probleminha técnico.' });\n    return out;\n}\n\n\n/**\n * \n * @param {*} sender \n * @param {*} pageID \n */\nexport const sendWelcomeMessage = async (sender, pageID) => {\n    await sender.fetch('first_name');\n    const page = await getOnePageData(pageID);\n    const replyMsg = new String(page.firstResponseText).replace('$NAME', sender.first_name);\n    const out = new Elements();\n    out.add({ text: replyMsg });\n    return out;\n}\n\nexport const sendMainMenu = async () => {\n    const buttons = new Buttons();\n    buttons.add({ text: 'Cardápio', data: 'CARDAPIO_PAYLOAD', event: 'MAIN-MENU' });\n    buttons.add({ text: 'Horários', data: 'HORARIO_PAYLOAD', event: 'MAIN-MENU' });\n    buttons.add({ text: 'Fazer Pedido', data: 'PEDIDO_PAYLOAD', event: 'MAIN-MENU' });\n\n    const out = new Elements();\n    out.add({ text: 'Por favor escolha uma das opções', buttons });\n\n    return out;\n}\n\nexport const sendCardapio = async (pageID) => {\n    const replyMsg = await getCardapio(pageID);\n    const out = new Elements();\n    out.add({ text: replyMsg });\n\n    return out;\n}\n\nexport const askForLocation = async () => {\n    const out = new Elements();\n    out.add({ text: 'Para começar, preciso saber aonde você está. Clique no botão abaixo que receberei a sua localização.' });\n\n    const replies = new QuickReplies();\n    replies.add({ text: 'Localização', isLocation: true, data: 'location_location', event: 'LOCATION' });\n    // replies.add({ text: 'Informar o CEP', data: 'location_cep', event: 'LOCATION' });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const confirmLocationAddress = async (pageId, userId, location) => {\n\n    await updateOrder({ pageId, userId, location });\n\n    const addresses = await getAddressLocation(location);\n\n    if (addresses && addresses.length && addresses.length > 0) {\n\n        const out = new Elements();\n        out.setListStyle('compact');\n\n        let foundAnyCompleteAddress = false;\n        for (let i = 0; i < 4; i++) {\n            const element = addresses[i];\n            if (element.address_components && element.address_components.length >= 6) {\n                foundAnyCompleteAddress = true;\n                const _data = { formatted_address: element.formatted_address, address_components: element.address_components };\n                const buttons = new Buttons();\n                buttons.add({ text: 'Esse!', data: _data, event: 'LOCATION_ADDRESS' });\n                let addressNumber = i + 1;\n                out.add({ text: 'Endereço ' + addressNumber, subtext: element.formatted_address, buttons });\n            }\n        }\n\n        if (foundAnyCompleteAddress) {\n            const buttonsOpt = new Buttons();\n            buttonsOpt.add({ text: 'Não é meu endereço..', data: \"incorrect_address\", event: 'LOCATION_ADDRESS' });\n            out.add({ buttons: buttonsOpt, isOnlyButtons: true });\n            return out;\n        } else {\n            return await askToTypeAddress(pageId, userId);\n        }\n    }\n    else {\n        return await askToTypeAddress(pageId, userId);\n    }\n}\n\nexport const confirmAddressOrAskLocation = async (pageId, userId, user) => {\n\n    await updateOrder({ pageId, userId, user });\n\n    // TODO: check if the location is in the neighborhood.\n    // TODO: check if the location is the same as stored in db.\n    const addrData = await getCustomerAddress(pageId, userId);\n\n    if (addrData) {\n        const out = new Elements();\n\n        let _replyText = 'A entrega será para esse endereço?\\n';\n        _replyText = _replyText + addrData.formattedAddress;\n\n        out.add({ text: _replyText });\n\n        const replies = new QuickReplies();\n        replies.add({ text: 'Sim', data: addrData, event: 'CORRECT_SAVED_ADDRESS' });\n        replies.add({ text: 'Não', data: addrData, event: 'WRONG_SAVED_ADDRESS' });\n        out.setQuickReplies(replies);\n\n        return out;\n    } else {\n        return await askForLocation();\n    }\n}\n\nexport const askToTypeAddress = async (pageID, userID) => {\n    await updateOrder({ pageId: pageID, userId: userID, waitingForAddress: true });\n\n    const out = new Elements();\n    out.add({ text: 'Não foi possível localizar um endereço válido. Digite o seu endereço completo por favor.' });\n    return out;\n}\n\nexport const confirmTypedAddress = async (pageID, userID, message) => {\n    const pendingOrder = await getOrderPending({ pageId: pageID, userId: userID });\n\n    console.info({ pendingOrder });\n\n    if (pendingOrder) {\n        if (typeof pendingOrder.order.waitingForAddress === 'boolean' &&\n            pendingOrder.order.waitingForAddress === true) {\n\n            await updateOrder({ pageId: pageID, userId: userID, waitingForAddress: false });\n\n            const out = new Elements();\n\n            let _replyText = 'A entrega será para esse endereço?\\n';\n            _replyText = _replyText + message.text;\n            out.add({ text: _replyText });\n\n            const addrData = {\n                manual_addres: true,\n                formattedAddress: message.text,\n            }\n\n            const replies = new QuickReplies();\n            replies.add({ text: 'Sim', data: addrData, event: 'CORRECT_SAVED_ADDRESS' });\n            replies.add({ text: 'Não', data: addrData, event: 'WRONG_SAVED_ADDRESS' });\n            out.setQuickReplies(replies);\n\n            return out;\n        }\n        else {\n            const out = new Elements();\n            out.add({ text: 'Não entendi o que você quis dizer. Aqui, vou analisar o status atual.' });\n        }\n    }\n}\n\nexport const showAddress = async (pageId, userId, addrData) => {\n    if (addrData && addrData.address_components) {\n        const formattedAddrData = await formatAddrData(addrData);\n        await updateOrder({ pageId, userId, addrData: formattedAddrData });\n    }\n    else {\n        await updateOrder({ pageId, userId, addrData });\n    }\n\n    const out = new Elements();\n    out.add({ text: 'Ok, entregaremos nesse endereço.' });\n    return out;\n}\n\n\nexport const askForPhone = async () => {\n    const out = new Elements();\n    out.add({ text: 'Pode nos enviar o seu telefone? Para que possamos fazer a confirmação do pedido.' });\n\n    const replies = new QuickReplies();\n    replies.add({ text: 'Telefone', isPhoneNumber: true, data: 'phone_number', event: 'PHONE_NUMBER' });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const showPhone = async (pageId, userId, phone) => {\n\n    // TODO: check if the location is in the neighborhood.\n\n    await updateOrder({ pageId, userId, phone });\n\n    const out = new Elements();\n    out.add({ text: 'Ok, telefone recebido. Agora vamos ao que interessa, informações do pedido.' });\n    return out;\n}\n\n\n// export const askForEmail = async () => {\n//     const out = new Elements();\n//     out.add({ text: 'Pode também nos enviar o seu e-mail?' });\n\n//     const replies = new QuickReplies();\n//     replies.add({ text: 'E-mail', isPhoneNumber: true, data: 'phone_number', event: 'PHONE_NUMBER' });\n//     out.setQuickReplies(replies);\n//     return out;\n// }\n\nexport const askForQuantity = async () => {\n    const out = new Elements();\n    out.add({ text: 'Quantas pizzas você quer?' });\n\n    const replies = new QuickReplies();\n    replies.add({ text: '1', data: 'qty_1', event: 'ORDER_QTY' });\n    replies.add({ text: '2', data: 'qty_2', event: 'ORDER_QTY' });\n    replies.add({ text: '3', data: 'qty_3', event: 'ORDER_QTY' });\n    replies.add({ text: '+ de 3', data: 'qty_more', event: 'ORDER_QTY_MORE' });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const askForQuantityMore = async () => {\n    const out = new Elements();\n    out.add({ text: 'Por favor informe a quantidade de pizzas:' });\n\n    const replies = new QuickReplies();\n    replies.add({ text: '4', data: 'qty_4', event: 'ORDER_QTY' });\n    replies.add({ text: '5', data: 'qty_5', event: 'ORDER_QTY' });\n    replies.add({ text: '6', data: 'qty_6', event: 'ORDER_QTY' });\n    replies.add({ text: '+ de 6', data: 'qty_more_more', event: 'ORDER_QTY_MORE' });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const showQuantity = async (pageId, userId, data) => {\n    const qty = new String(data).substr(data.length - 1, 1);\n\n    await updateOrder({ pageId, userId, qty });\n\n    const out = new Elements();\n    if (qty == 1) {\n        out.add({ text: '✅ ' + ' 1 pizza.' });\n    } else {\n        out.add({ text: '✅ ' + qty + ' pizzas.' });\n    }\n    return out;\n}\n\nexport const askForSize = async (pageID, userID) => {\n\n    const out = new Elements();\n    const pendingOrder = await getOrderPending({ pageId: pageID, userId: userID, isComplete: false });\n\n    console.info({ pendingOrder });\n\n    if (pendingOrder.order) {\n        let _text = '';\n\n        if (pendingOrder.order.qty_total === 1) {\n            _text = 'Qual o tamanho da pizza?';\n        } else {\n            let _itemNumber = pendingOrder.order.item_complete ? pendingOrder.order.item_complete + 1 : 1;\n\n            _text = 'Agora vou pegar os detalhes da ' + _itemNumber + 'a. pizza.\\n';\n            _text = _text + 'Qual o tamanho dela?';\n        }\n        out.add({ text: _text });\n\n        const replies = new QuickReplies();\n        const sizesWithPricing = await getPricingSizing(pageID); // only sizes with pricing\n        const sizes = await getSizes(pageID, sizesWithPricing);\n        for (var i = 0; i < sizes.length; i++) {\n            const _data = { id: sizes[i].id, size: sizes[i].size };\n            replies.add({ text: sizes[i].size, data: _data, event: 'ORDER_SIZE' });\n        }\n        out.setQuickReplies(replies);\n    }\n    else {\n        out.add({ text: MSG_GENERAL_ERROR });\n    }\n\n    return out;\n}\n\nexport const showSize = async (pageId, userId, data) => {\n    await updateOrder({ pageId, userId, sizeId: data.id });\n\n    const out = new Elements();\n    out.add({ text: '✅ ' + ' Tamanho: ' + data.size });\n    return out;\n}\n\nexport const askForFlavor = async (pageID) => {\n    const out = new Elements();\n    out.setListStyle('compact'); // or 'large'\n\n    const flavorsArray = await getFlavorsAndToppings(pageID);\n    for (let i = 0; i < 4; i++) {\n        if (flavorsArray[i]) {\n            const _fl = flavorsArray[i];\n            const _data = { id: _fl.id, flavor: _fl.flavor }\n            const buttons = new Buttons();\n            buttons.add({ text: 'Quero', data: _data, event: 'ORDER_FLAVOR' });\n\n            let _tn = _fl.toppingsNames;\n            let _subtext = new String();\n            for (let j = 0; j < _tn.length; j++) {\n                _subtext = _subtext.concat(_tn[j].topping, \", \");\n            }\n            out.add({ text: _fl.flavor, subtext: _subtext, buttons });\n        }\n    }\n    const buttonsOpt = new Buttons();\n    buttonsOpt.add({ text: '+ Opções', data: \"flavors_more\", event: 'ORDER_FLAVOR' });\n    out.add({ buttons: buttonsOpt, isOnlyButtons: true });\n\n    return out;\n}\n\nexport const showFlavor = async (pageId, userId, data) => {\n    await updateOrder({ pageId: pageId, userId: userId, flavorId: data.id, completeItem: true });\n\n    const out = new Elements();\n    out.add({ text: '✅ ' + ' Sabor: ' + data.flavor });\n    return out;\n}\n\nexport const showOrderOrNextItem = async (pageId, userId) => {\n    const pendingOrder = await getOrderPending({ pageId: pageId, userId: userId, isComplete: true });\n\n    console.info({ pendingOrder });\n\n    if (pendingOrder.order.qty_total > 1 && pendingOrder.order.item_complete < pendingOrder.order.qty_total)\n        return await askForSize(pageId, userId);\n    else {\n        const out = new Elements();\n\n        let _txt = 'Seguem os detalhes do seu pedido:\\n';\n        for (let i = 0; i < pendingOrder.items.length; i++) {\n            _txt = _txt + `${pendingOrder.items[i].qty} pizza ${pendingOrder.items[i].size} de ${pendingOrder.items[i].flavor}\\n`;\n        }\n        _txt = _txt + 'Podemos confirmar o pedido?';\n\n        out.add({ text: _txt });\n\n        const replies = new QuickReplies();\n        replies.add({ text: \"Sim\", data: \"confirmation_yes\", event: 'ORDER_CONFIRMATION' });\n        replies.add({ text: \"Não\", data: \"confirmation_no\", event: 'ORDER_CONFIRMATION' });\n        out.setQuickReplies(replies);\n\n        return out;\n    }\n}\n\nexport const confirmOrder = async (pageID, userID) => {\n    await updateOrder({ pageId: pageID, userId: userID, confirmOrder: true });\n\n    const out = new Elements();\n    out.add({ text: \"Pedido Confirmado!\" });\n    return out;\n}\n\n// const updateFlavor = async (pageId, userId, flavorId) => {\n//     const orderData = {\n//         userId: userId,\n//         pageId: pageId,\n//         orderId: null,\n//         qty: null,\n//         sizeId: null,\n//         flavorId: flavorId,\n//     }\n//     await updateOrder(orderData);\n// }\n\n\n\n// export const askForFlavor = async (pageID) => {\n//     const flavorsArray = await getFlavorsAndToppings(pageID);\n//     const buttons = new Buttons();\n//     for (let i = 0; i < 2; i++) {\n//         if (flavorsArray[i]) {\n//             const _data = { id: flavorsArray[i].id, flavor: flavorsArray[i].flavor }\n//             buttons.add({ text: flavorsArray[i].flavor, data: _data, event: 'ORDER_FLAVOR' });\n//         }\n//     }\n//     buttons.add({ text: '+ Opções', data: 'flavors_more', event: 'ORDER_FLAVOR' });\n\n//     const out = new Elements();\n//     out.setListStyle('compact'); // or 'large'\n//     out.add({ text: 'Por favor escolha uma das opções', buttons });\n\n//     return out;\n// }"],"file":"botController.js"}