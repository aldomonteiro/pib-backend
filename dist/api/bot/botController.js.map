{"version":3,"sources":["../../../src/api/bot/botController.js"],"names":["log_file","fs","createWriteStream","__dirname","flags","log_stdout","process","stdout","console","log","d","write","util","format","MSG_GENERAL_ERROR","SimpleNodeLogger","require","opts","logFilePath","timestampFormat","createSimpleLogger","sendErrorMsg","_errorMsg","out","Elements","_showErrorMsg","add","text","basicReply","sendWelcomeMessage","sender","pageID","fetch","page","replyMsg","String","firstResponseText","replace","first_name","sendMainMenu","buttons","Buttons","data","event","sendHorario","todayIsOpen","todayOpenAt","todayCloseAt","sendCardapio","askForLocation","replies","QuickReplies","isLocation","setQuickReplies","confirmLocationAddress","pageId","userId","location","addresses","length","setListStyle","foundAnyCompleteAddress","i","element","address_components","_data","formatted_address","addressNumber","subtext","buttonsOpt","isOnlyButtons","askToTypeAddress","confirmAddressOrAskLocation","user","addrData","_replyText","formattedAddress","userID","waitingForAddress","waitingFor","confirmTypedText","message","pendingOrder","info","order","manual_addres","confirmTypedPhone","askForSize","askForQuantity","askForFlavor","showOrderOrNextItem","showAddress","formattedAddrData","showOrderOrAskForPhone","isComplete","po","askForPhone","isPhoneNumber","phone","_txt","showPhone","askForQuantityMore","showQuantity","qty","substr","_text","_itemNumber","qty_total","items","status","item_complete","sizesWithPricing","sizes","id","size","showSize","sizeId","askForFlavorOrConfirm","multiple","flavorId","_id","flavorsArray","_rangeIni","_rangeEnd","_fl","flavor","_tn","toppingsNames","_subtext","j","concat","topping","option","showFlavor","completeItem","address","confirmOrder","askForChangeOrder","askForOptionsToChange","askForSpecificItem","forEach","item","updateItemAskOptions","objectId"],"mappings":"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","sourcesContent":["import util from 'util';\nimport fs from 'fs';\nimport { Elements, Buttons, QuickReplies } from 'facebook-messenger-bot';\nimport { getOnePageToken, getAllPages, getOnePageData } from '../controllers/pagesController';\nimport { getPricingSizing } from '../controllers/pricingsController';\nimport getCardapio from './show_cardapio';\nimport {\n    getFlavorsAndToppings,\n    inputCardapioReplyMsg,\n    getOpenAndClose,\n    inputHorarioReplyMsg,\n    validateBotOrder,\n} from \"./actionsController\";\nimport { getSizes } from '../controllers/sizesController';\nimport { getTodayOpeningTime } from '../controllers/storesController';\nimport { updateOrder, getOrderPending } from '../controllers/ordersController';\nimport { getAddressLocation, getCustomerAddress, formatAddrData } from '../controllers/customersController';\nimport { updateStatusSpecificItem } from '../controllers/itemsController';\n\n// TODO: create a debugger with json format\nvar log_file = fs.createWriteStream(__dirname + '/debug.log', { flags: 'w' });\nvar log_stdout = process.stdout;\n\nconsole.log = function (d) { //\n    log_file.write(util.format(d) + '\\n');\n    log_stdout.write(util.format(d) + '\\n');\n};\n\nconst MSG_GENERAL_ERROR = 'Ops, estamos com um probleminha técnico';\n\n// create a custom timestamp format for log statements\nconst SimpleNodeLogger = require('simple-node-logger'),\n    opts = {\n        logFilePath: 'logs/bot.log',\n        timestampFormat: 'YYYY-MM-DD HH:mm:ss.SSS'\n    },\n    log = SimpleNodeLogger.createSimpleLogger(opts);\n\nexport const sendErrorMsg = async (_errorMsg) => {\n    const out = new Elements();\n    let _showErrorMsg = _errorMsg ? _errorMsg : 'ERRO DESCONHECIDO';\n    out.add({ text: 'Ops, tivemos um probleminha técnico: ' + _showErrorMsg });\n    return out;\n}\n\nexport const basicReply = async () => {\n    const out = new Elements();\n    out.add({ text: 'Hi, how are you doing?' });\n    return out;\n}\n\n/**\n * \n * @param {*} sender \n * @param {*} pageID \n */\nexport const sendWelcomeMessage = async (sender, pageID) => {\n    await sender.fetch('first_name');\n    const page = await getOnePageData(pageID);\n    const replyMsg = new String(page.firstResponseText).replace('$NAME', sender.first_name);\n    const out = new Elements();\n    out.add({ text: replyMsg });\n    return out;\n}\n\nexport const sendMainMenu = async () => {\n    const buttons = new Buttons();\n    buttons.add({ text: 'Cardápio', data: 'CARDAPIO_PAYLOAD', event: 'MAIN-MENU' });\n    buttons.add({ text: 'Horários', data: 'HORARIO_PAYLOAD', event: 'MAIN-MENU' });\n    buttons.add({ text: 'Fazer Pedido', data: 'PEDIDO_PAYLOAD', event: 'MAIN-MENU' });\n\n    const out = new Elements();\n    out.add({ text: 'Por favor escolha uma das opções', buttons });\n\n    return out;\n}\n\nexport const sendHorario = async (pageID) => {\n    const { todayIsOpen, todayOpenAt, todayCloseAt } = await getTodayOpeningTime(pageID);\n\n    let replyMsg = '';\n    if (todayIsOpen === true) {\n        replyMsg = 'Estamos abertos hoje, a partir das ' + todayOpenAt + ' horas, até às ' + todayCloseAt + ' horas.';\n    } else {\n        replyMsg = 'Infelizmente hoje não estamos abertos, mas você pode consultar nosso cardápio no menu principal.';\n    }\n    const out = new Elements();\n    out.add({ text: replyMsg });\n    return out;\n}\n\n\nexport const sendCardapio = async (pageID) => {\n    const replyMsg = await getCardapio(pageID);\n    const out = new Elements();\n    out.add({ text: replyMsg });\n\n    return out;\n}\n\nexport const askForLocation = async () => {\n    const out = new Elements();\n    out.add({ text: 'Para começar, preciso saber aonde você está. Clique no botão abaixo que receberei a sua localização.' });\n\n    const replies = new QuickReplies();\n    replies.add({ text: 'Localização', isLocation: true, data: 'location_location', event: 'LOCATION' });\n    // replies.add({ text: 'Informar o CEP', data: 'location_cep', event: 'LOCATION' });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const confirmLocationAddress = async (pageId, userId, location) => {\n\n    await updateOrder({ pageId, userId, location });\n\n    const addresses = await getAddressLocation(location);\n\n    if (addresses && addresses.length && addresses.length > 0) {\n\n        const out = new Elements();\n        out.setListStyle('compact');\n\n        let foundAnyCompleteAddress = false;\n        for (let i = 0; i < 4; i++) {\n            const element = addresses[i];\n            if (element.address_components && element.address_components.length >= 6) {\n                foundAnyCompleteAddress = true;\n                const _data = { formatted_address: element.formatted_address, address_components: element.address_components };\n                const buttons = new Buttons();\n                buttons.add({ text: 'Esse!', data: _data, event: 'LOCATION_ADDRESS' });\n                let addressNumber = i + 1;\n                out.add({ text: 'Endereço ' + addressNumber, subtext: element.formatted_address, buttons });\n            }\n        }\n\n        if (foundAnyCompleteAddress) {\n            const buttonsOpt = new Buttons();\n            buttonsOpt.add({ text: 'Não é meu endereço..', data: \"incorrect_address\", event: 'LOCATION_ADDRESS' });\n            out.add({ buttons: buttonsOpt, isOnlyButtons: true });\n            return out;\n        } else {\n            return await askToTypeAddress(pageId, userId);\n        }\n    }\n    else {\n        return await askToTypeAddress(pageId, userId);\n    }\n}\n\nexport const confirmAddressOrAskLocation = async (pageId, userId, user) => {\n\n    await updateOrder({ pageId, userId, user });\n\n    // TODO: check if the location is in the neighborhood.\n    // TODO: check if the location is the same as stored in db.\n    const addrData = await getCustomerAddress(pageId, userId);\n\n    if (addrData) {\n        const out = new Elements();\n\n        let _replyText = 'A entrega será para esse endereço?\\n';\n        _replyText = _replyText + addrData.formattedAddress;\n\n        out.add({ text: _replyText });\n\n        const replies = new QuickReplies();\n        replies.add({ text: 'Sim', data: addrData, event: 'CORRECT_SAVED_ADDRESS' });\n        replies.add({ text: 'Não', data: addrData, event: 'WRONG_SAVED_ADDRESS' });\n        out.setQuickReplies(replies);\n\n        return out;\n    } else {\n        return await askForLocation();\n    }\n}\n\nexport const askToTypeAddress = async (pageID, userID) => {\n    await updateOrder({ pageId: pageID, userId: userID, waitingForAddress: true, waitingFor: 'typed_address' });\n\n    const out = new Elements();\n    out.add({ text: 'Não foi possível localizar um endereço válido. Digite o seu endereço completo por favor.' });\n    return out;\n}\n\nexport const confirmTypedText = async (pageId, userId, message) => {\n    const pendingOrder = await getOrderPending({ pageId, userId });\n\n    console.info({ pendingOrder });\n\n    let out = new Elements();\n\n    if (pendingOrder) {\n        if (typeof pendingOrder.order.waitingForAddress === 'boolean' &&\n            pendingOrder.order.waitingForAddress === true) {\n\n            await updateOrder({ pageId, userId, waitingForAddress: false, waitingFor: 'address' });\n\n            let _replyText = 'A entrega será para esse endereço?\\n';\n            _replyText = _replyText + message.text;\n            out.add({ text: _replyText });\n\n            const addrData = {\n                manual_addres: true,\n                formattedAddress: message.text,\n            }\n\n            const replies = new QuickReplies();\n            replies.add({ text: 'Sim', data: addrData, event: 'CORRECT_SAVED_ADDRESS' });\n            replies.add({ text: 'Não', data: addrData, event: 'WRONG_SAVED_ADDRESS' });\n            out.setQuickReplies(replies);\n\n            return out;\n        }\n        else {\n            if (pendingOrder.order && pendingOrder.order.waitingFor === 'phone')\n                return await confirmTypedPhone(pageId, userId, message.text);\n            else if (pendingOrder.order && pendingOrder.order.waitingFor === 'size')\n                return await askForSize(pageId)\n            else if (pendingOrder.order && pendingOrder.order.waitingFor === 'quantity')\n                return await askForQuantity(pageId, userId);\n            else if (pendingOrder.order && pendingOrder.order.waitingFor === 'flavor')\n                return await askForFlavor(pageId, userId, 1);\n            else if (pendingOrder.order && pendingOrder.order.waitingFor === 'nothing')\n                return await showOrderOrNextItem(pageId, userId);\n        }\n    }\n    else {\n        out = await sendMainMenu();\n    }\n\n    return out;\n}\n\nexport const showAddress = async (pageId, userId, addrData) => {\n    if (addrData && addrData.address_components) {\n        const formattedAddrData = await formatAddrData(addrData);\n        await updateOrder({ pageId, userId, addrData: formattedAddrData });\n    }\n    else {\n        await updateOrder({ pageId, userId, addrData });\n    }\n\n    const out = new Elements();\n    out.add({ text: 'Ok, entregaremos nesse endereço.' });\n    return out;\n}\n\nexport const showOrderOrAskForPhone = async (pageId, userId) => {\n    const po = await getOrderPending({ pageId, userId, isComplete: false });\n\n    if (po.order && po.order.waitingFor === 'confirmation')\n        return await showOrderOrNextItem(pageId, userId);\n    else\n        return await askForPhone();\n}\n\nexport const askForPhone = async (pageId, userId) => {\n\n    await updateOrder({ pageId, userId, waitingFor: 'phone' });\n\n    const out = new Elements();\n    out.add({ text: 'Pode nos enviar o seu telefone para confirmar o seu pedido? Se não aparecer o seu telefone abaixo, pode digitá-lo por favor.' });\n\n    const replies = new QuickReplies();\n    replies.add({ text: 'Telefone', isPhoneNumber: true, data: 'phone_number', event: 'PHONE_NUMBER' });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const confirmTypedPhone = async (pageId, userId, phone) => {\n    const out = new Elements();\n\n    await updateOrder({ pageId, userId, waitingFor: 'phone' });\n\n    let _txt = 'O telefone ' + phone + 'está coreto?';\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Sim\", data: phone, event: 'PHONE_CONFIRMED' });\n    replies.add({ text: \"Não, usar outro\", data: \"change_phone\", event: 'PHONE_CONFIRMED' });\n    out.setQuickReplies(replies);\n\n    return out;\n}\n\n\nexport const showPhone = async (pageId, userId, phone) => {\n    const out = new Elements();\n    out.add({ text: 'Usaremos o número ' + phone + ' para confirmar o pedido. Agora vamos ao que interessa, informações do pedido.' });\n    return out;\n}\n\n\n// export const askForEmail = async () => {\n//     const out = new Elements();\n//     out.add({ text: 'Pode também nos enviar o seu e-mail?' });\n\n//     const replies = new QuickReplies();\n//     replies.add({ text: 'E-mail', isPhoneNumber: true, data: 'phone_number', event: 'PHONE_NUMBER' });\n//     out.setQuickReplies(replies);\n//     return out;\n// }\n\nexport const askForQuantity = async (pageId, userId) => {\n    const out = new Elements();\n    out.add({ text: 'Quantas pizzas você quer?' });\n\n    const replies = new QuickReplies();\n    replies.add({ text: '1', data: 'qty_1', event: 'ORDER_QTY' });\n    replies.add({ text: '2', data: 'qty_2', event: 'ORDER_QTY' });\n    replies.add({ text: '3', data: 'qty_3', event: 'ORDER_QTY' });\n    replies.add({ text: '+ de 3', data: 'qty_more', event: 'ORDER_QTY_MORE' });\n    out.setQuickReplies(replies);\n\n    await updateOrder({ pageId, userId, waitingFor: 'quantity' });\n\n    return out;\n}\n\nexport const askForQuantityMore = async () => {\n    const out = new Elements();\n    out.add({ text: 'Por favor informe a quantidade de pizzas:' });\n\n    const replies = new QuickReplies();\n    replies.add({ text: '4', data: 'qty_4', event: 'ORDER_QTY' });\n    replies.add({ text: '5', data: 'qty_5', event: 'ORDER_QTY' });\n    replies.add({ text: '6', data: 'qty_6', event: 'ORDER_QTY' });\n    replies.add({ text: '+ de 6', data: 'qty_more_more', event: 'ORDER_QTY_MORE' });\n    out.setQuickReplies(replies);\n\n    await updateOrder({ pageId, userId, waitingFor: 'quantity' });\n\n    return out;\n}\n\nexport const showQuantity = async (pageId, userId, data) => {\n    // data is 'qty_1', 'qty_2', 'qty_3'...\n    const qty = new String(data).substr(data.length - 1, 1);\n\n    await updateOrder({ pageId, userId, qty, waitingFor: 'size' });\n\n    const out = new Elements();\n    if (qty == 1) {\n        out.add({ text: '✅ ' + ' 1 pizza.' });\n    } else {\n        out.add({ text: '✅ ' + qty + ' pizzas.' });\n    }\n    return out;\n}\n\nexport const askForSize = async (pageId, userId) => {\n\n    const out = new Elements();\n    const po = await getOrderPending({ pageId, userId, isComplete: true });\n\n    if (po.order) {\n        let _text = '';\n        let _itemNumber = 0;\n        if (po.order.qty_total === 1) {\n            _text = 'Qual o tamanho da pizza?';\n        } else {\n            if (po.items.length > 1) {\n                for (let i = 0; i < po.items.length; i++) {\n                    if (po.items[i].status === 0) {\n                        _itemNumber = i + 1;\n                        break;\n                    }\n                }\n            } else {\n                _itemNumber = po.order.item_complete ? po.order.item_complete + 1 : 1;\n            }\n            _text = 'Agora vou pegar os detalhes da ' + _itemNumber + 'a. pizza.\\n';\n            _text = _text + 'Qual o tamanho dela?';\n        }\n        out.add({ text: _text });\n\n        const replies = new QuickReplies();\n        const sizesWithPricing = await getPricingSizing(pageId); // only sizes with pricing\n        const sizes = await getSizes(pageId, sizesWithPricing);\n        for (var i = 0; i < sizes.length; i++) {\n            const _data = { id: sizes[i].id, size: sizes[i].size };\n            replies.add({ text: sizes[i].size, data: _data, event: 'ORDER_SIZE' });\n        }\n        out.setQuickReplies(replies);\n\n        if (po.order.qty_total === 1)\n            await updateOrder({ pageId, userId, waitingFor: 'size' });\n        else\n            await updateOrder({ pageId, userId, waitingFor: 'size', qty: po.order.qty_total });\n    }\n    else {\n        out.add({ text: MSG_GENERAL_ERROR });\n    }\n\n    return out;\n}\n\nexport const showSize = async (pageId, userId, data) => {\n    await updateOrder({ pageId, userId, sizeId: data.id, waitingFor: 'flavor' });\n\n    const out = new Elements();\n    out.add({ text: '✅ ' + ' Tamanho: ' + data.size });\n    return out;\n}\n\nexport const askForFlavorOrConfirm = async (pageId, userId, multiple) => {\n    const pendingOrder = await getOrderPending({ pageId: pageId, userId: userId, isComplete: true });\n\n    if (pendingOrder.order) {\n        if (pendingOrder.items && pendingOrder.items.length) {\n            for (let i = 0; i < pendingOrder.items.length; i++) {\n                if (pendingOrder.items[i].status === 0 && pendingOrder.items[i].flavorId > 0) {\n                    await updateStatusSpecificItem(pendingOrder.items[i]._id, 1);\n                    return await showOrderOrNextItem(pageId, userId);\n                }\n            }\n            return await askForFlavor(pageId, userId, multiple);\n        }\n    }\n}\n\n/**\n * \n * @param {*} pageId \n * @param {*} userId \n * @param {*} multiple: if are the first 4 flavors, multiple=1, if are the next, multiple=2 and so on. \n */\nexport const askForFlavor = async (pageId, userId, multiple) => {\n    const out = new Elements();\n    out.setListStyle('compact'); // or 'large'\n\n    const flavorsArray = await getFlavorsAndToppings(pageId);\n\n    let _rangeIni = (multiple - 1) * 4;\n    let _rangeEnd = multiple * 4;\n\n    for (let i = _rangeIni; i < _rangeEnd; i++) {\n        if (flavorsArray[i]) {\n            const _fl = flavorsArray[i];\n            const _data = { id: _fl.id, flavor: _fl.flavor }\n            const buttons = new Buttons();\n            buttons.add({ text: 'Quero', data: _data, event: 'ORDER_FLAVOR' });\n\n            let _tn = _fl.toppingsNames;\n            let _subtext = new String();\n            for (let j = 0; j < _tn.length; j++) {\n                _subtext = _subtext.concat(_tn[j].topping, \", \");\n            }\n            out.add({ text: _fl.flavor, subtext: _subtext, buttons });\n        }\n    }\n    if (flavorsArray.length >= _rangeEnd) {\n        multiple++;\n        const buttonsOpt = new Buttons();\n        buttonsOpt.add({ text: '+ Opções', data: { option: \"flavors_more\", multiple: multiple }, event: 'ORDER_FLAVOR' });\n        out.add({ buttons: buttonsOpt, isOnlyButtons: true });\n    }\n\n    await updateOrder({ pageId, userId, waitingFor: 'flavor' });\n\n    return out;\n}\n\nexport const showFlavor = async (pageId, userId, data) => {\n    await updateOrder({ pageId, userId, flavorId: data.id, completeItem: true, waitingFor: 'nothing' });\n\n    const out = new Elements();\n    out.add({ text: '✅ ' + ' Sabor: ' + data.flavor });\n    return out;\n}\n\nexport const showOrderOrNextItem = async (pageId, userId) => {\n    const po = await getOrderPending({ pageId, userId, isComplete: true });\n\n    if (po.order.qty_total > 1 && po.order.item_complete < po.order.qty_total)\n        return await askForSize(pageId, userId);\n    else {\n        const out = new Elements();\n\n        let _txt = 'Seguem os detalhes do seu pedido:\\n';\n        for (let i = 0; i < po.items.length; i++) {\n            _txt = _txt + `${po.items[i].qty} pizza ${po.items[i].size} de ${po.items[i].flavor}\\n`;\n        }\n        _txt = _txt + 'Endereço de entrega: ' + po.order.address + '\\n';\n        _txt = _txt + 'Podemos confirmar o pedido?';\n\n        out.add({ text: _txt });\n\n        const replies = new QuickReplies();\n        replies.add({ text: \"Sim\", data: \"confirmation_yes\", event: 'ORDER_CONFIRMATION' });\n        replies.add({ text: \"Não\", data: \"confirmation_no\", event: 'ORDER_CONFIRMATION' });\n        out.setQuickReplies(replies);\n\n        return out;\n    }\n}\n\nexport const confirmOrder = async (pageId, userId) => {\n    await updateOrder({ pageId, userId, confirmOrder: true });\n\n    const out = new Elements();\n    out.add({ text: \"Pedido Confirmado!\" });\n    return out;\n}\n\nexport const askForChangeOrder = async (pageId, userId) => {\n    const out = new Elements();\n\n    await updateOrder({ pageId, userId, waitingFor: 'confirmation' });\n\n    let _txt = 'O que você gostaria de fazer com o seu pedido?';\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Mudar pedido\", data: \"changeOrder\", event: 'ORDER_WANT_CHANGE' });\n    replies.add({ text: \"Mudar endereço\", data: \"change_address\", event: 'ORDER_CHANGE' });\n    replies.add({ text: \"Confirmar.\", data: \"confirmation_yes\", event: 'ORDER_CONFIRMATION' });\n    out.setQuickReplies(replies);\n\n    return out;\n}\n\nexport const askForOptionsToChange = async (pageId, userId) => {\n    const out = new Elements();\n    let _txt = 'Ok, qual das informações que você gostaria de alterar?';\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    // replies.add({ text: \"Quantidade\", data: \"change_quantity\", event: 'ORDER_CHANGE' });\n    replies.add({ text: \"Tamanho\", data: \"change_size\", event: 'ORDER_CHANGE' });\n    replies.add({ text: \"Sabor\", data: \"change_flavor\", event: 'ORDER_CHANGE' });\n    out.setQuickReplies(replies);\n\n    return out;\n}\n\nexport const askForSpecificItem = async (pageId, userId) => {\n    const pendingOrder = await getOrderPending({ pageId, userId, isComplete: true });\n    if (pendingOrder.order.qty_total > 1) {\n        const out = new Elements();\n        out.add({ text: 'Primeiro, escolha qual das pizzas deseja mudar:' });\n\n        const replies = new QuickReplies();\n        let i = 1;\n        pendingOrder.items.forEach(item => {\n            replies.add({ text: i + \"a. \" + item.flavor, data: item._id, event: 'ORDER_CHANGE_SELECT_ITEM' });\n            i++;\n        });\n        out.setQuickReplies(replies);\n        return out;\n    } else {\n        await updateOrder({ pageId, userId, completeItem: false });\n        return await askForOptionsToChange(pageId, userId);\n    }\n}\n\nexport const updateItemAskOptions = async (pageId, userId, objectId) => {\n    await updateStatusSpecificItem(objectId, 0);\n    return await askForOptionsToChange(pageId, userId);\n}\n\n\n"],"file":"botController.js"}