{"version":3,"sources":["../../../src/api/bot/botMarkController.js"],"names":["_event","m_checkLastQuestion","pageID","userID","mktContact","last_answer","m_askHowGetHere","data","out","Elements","_txt","add","text","replies","QuickReplies","event","setQuickReplies","m_askForRestaurant","how_know_company","m_askForOwnership","restaurant_related","m_askForOptions","relation","restaurant_owner","restaurant_employee","m_howItWorks","saw_how_it_works","m_howItWorks2","m_howItWorks3","m_howItWorks4","m_howItWorks5","m_showPrices","m_askForTestType","m_askForBeginTest","started_test","m_askTestTypePizzaria","m_afterOrderConfirmation","m_startTrial","final","buttons","Buttons","url","m_openQuestion","m_confirmOpenQuestion","m_returnContact","type","contact_form","isPhoneNumber","m_typePhone","validation","m_isValidPhone","phone","replace","match","console","info","input","length","m_contactPhone","contact_phone","m_contactMail","contact_mail","m_returnedCustomer"],"mappings":"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","sourcesContent":["/**\n * Bot Marketing Controller\n */\n\nimport { Buttons, Elements, QuickReplies } from 'facebook-messenger-bot';\nimport { updateMktContact, getMktContact } from '../controllers/mkt_contact_controller';\n\nconst _event = 'PIZZAIBOT_MARKETING';\n\nexport const m_checkLastQuestion = async (pageID, userID) => {\n\n    const mktContact = await getMktContact({ pageID, userID });\n\n    if (mktContact) {\n        return mktContact.last_answer;\n    } else return null;\n}\n\nexport const m_askHowGetHere = async (data, pageID, userID) => {\n    await updateMktContact({ pageID, userID, last_answer: data });\n\n    const out = new Elements();\n    let _txt = 'Vou te ajudar com as suas dúvidas, tá bom? \\\n    Mas, antes de mais nada, preciso saber de uma coisa: \\\n    Como você ficou conhecendo o Pizzaibot?';\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Vi pizzaria usar\", data: \"howget_pizzaria\", event: _event });\n    replies.add({ text: \"Anúncio Facebook\", data: \"howget_facebookad\", event: _event });\n    replies.add({ text: \"Vocês me procuraram!\", data: \"howget_activemarketing\", event: _event });\n    replies.add({ text: \"Não lembro\", data: \"howget_dontremember\", event: _event });\n    out.setQuickReplies(replies);\n    return out;\n}\n\n\nexport const m_askForRestaurant = async (data, pageID, userID) => {\n    await updateMktContact({ pageID, userID, last_answer: data, how_know_company: data });\n\n    const out = new Elements();\n    let _txt = 'Você possui ou trabalha em um restaurante ou pizzaria?';\n\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Sim\", data: \"restaurant_yes\", event: _event });\n    replies.add({ text: \"Não\", data: \"restaurant_no\", event: _event });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const m_askForOwnership = async (data, pageID, userID) => {\n    await updateMktContact({ pageID, userID, restaurant_related: true, last_answer: data });\n\n    const out = new Elements();\n    let _txt = 'Muito bom, então, com toda certeza eu posso ser útil para você!\\n';\n    _txt = _txt + 'Você é o dono(a) do restaurante/pizzaria ou trabalha para ele direta ou indiretamente?\\n';\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Sou dono(a)\", data: \"owner_yes\", event: _event });\n    replies.add({ text: \"Trabalho para\", data: \"employee_yes\", event: _event });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const m_askForOptions = async (data, pageID, userID, relation) => {\n    if (relation === 'owner')\n        await updateMktContact({ pageID, userID, last_answer: data, restaurant_owner: true });\n    else if (relation === 'employee')\n        await updateMktContact({ pageID, userID, last_answer: data, restaurant_employee: true });\n    else\n        await updateMktContact({ pageID, userID, last_answer: data });\n\n\n    const out = new Elements();\n    let _txt = 'Então vou te mostrar algumas coisas que posso te ajudar agora\\n';\n    _txt = _txt + 'Clique em uma das opções disponíveis que eu acompanho contigo\\n';\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Como funciona?\", data: \"options_howitworks\", event: _event });\n    replies.add({ text: \"Quanto custa?\", data: \"options_howmuch\", event: _event });\n    replies.add({ text: \"Quero testar!\", data: \"options_wanttest\", event: _event });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const m_howItWorks = async (data, pageID, userID) => {\n    await updateMktContact({ pageID, userID, last_answer: data, saw_how_it_works: true });\n\n    const out = new Elements();\n    let _txt = 'O primeiro passo é acessar o site do sistema: https://admin.pizzaibot.com. \\\n    Lá, você vai clicar em \"Conectar com o Facebook\", permitir acesso do sistema ao Facebook e \\\n    acessar a administração do nosso sistema.';\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Entendi, e depois?\", data: \"howitworks_2\", event: _event });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const m_howItWorks2 = async (data, pageID, userID) => {\n    await updateMktContact({ pageID, userID, last_answer: data });\n\n    const out = new Elements();\n    let _txt = 'A primeira tela da administração mostra todas as páginas do Facebook que você é administrador. \\\n    Você escolhe a página do Restaurante/Pizzaria que será conectado ao Bot e clica no botão \"Confirmar\"';\n\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Ok, e aí?\", data: \"howitworks_3\", event: _event });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const m_howItWorks3 = async (data, pageID, userID) => {\n    await updateMktContact({ pageID, userID, last_answer: data });\n\n    const out = new Elements();\n    let _txt = 'Depois disso você precisará revisar os sabores do seu Cardápio, Bebidas, Preços e Horários de Funcionamento. \\\n    Você verá que já temos algumas informações de exemplo cadastradas, você pode removê-las ou usá-las.';\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Certo, e o que mais?\", data: \"howitworks_4\", event: _event });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const m_howItWorks4 = async (data, pageID, userID) => {\n    await updateMktContact({ pageID, userID, last_answer: data });\n\n    const out = new Elements();\n    let _txt = 'Quando as informações do seu cardápio estiverem concluídas, basta você acessar o menu \"Páginas\" no lado esquerdo da tela, \\\n    editar a página que você selecionou para revisar os cadastros e clicar no botão \"Ativar Bot\".';\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Olha só, e então?\", data: \"howitworks_5\", event: _event });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const m_howItWorks5 = async (data, pageID, userID) => {\n    await updateMktContact({ pageID, userID, last_answer: data });\n\n    const out = new Elements();\n    let _txt = 'A partir desse momento, o Messenger ligado a sua página do Facebook já vai estar automatizado, \\\n    quando algum cliente enviar alguma mensagem para a sua página, quem vai responder será o Pizzaibot.';\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Quero testar!\", data: \"options_wanttest\", event: _event });\n    replies.add({ text: \"Ainda tenho dúvidas!\", data: \"orderConfirmation_question\", event: _event });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const m_showPrices = async (data, pageID, userID) => {\n    await updateMktContact({ pageID, userID, last_answer: data });\n\n    const out = new Elements();\n    let _txt = 'No nosso site temos alguns detalhes dos valores: \\\n    https://www.pizzaibot.com/planos, acessa lá e veja nossos valores atualizados.';\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Quero testar!\", data: \"options_wanttest\", event: _event });\n\n    const mktContact = await getMktContact({ pageID, userID });\n    if (mktContact && !mktContact.saw_how_it_works) {\n        replies.add({ text: \"Como funciona?\", data: \"options_howitworks\", event: _event });\n    }\n    replies.add({ text: \"Ainda tenho dúvidas!\", data: \"orderConfirmation_question\", event: _event });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const m_askForTestType = async (data, pageID, userID) => {\n    await updateMktContact({ pageID, userID, last_answer: data });\n\n    const out = new Elements();\n    let _txt = 'Muito bem, temos 2 opções: testar como cliente e testar como pizzaria.\\n';\n    _txt = _txt + 'Escolhe uma delas por favor!\\n';\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Testar como cliente\", data: \"testtype_customer\", event: _event });\n    replies.add({ text: \"Testar como pizzaria\", data: \"testtype_pizzaria\", event: _event });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const m_askForBeginTest = async (data, pageID, userID) => {\n    await updateMktContact({ pageID, userID, started_test: true, last_answer: data });\n\n    const out = new Elements();\n\n    let _txt = 'Ok, agora vou te mostrar as opções que o bot mostra para um cliente,';\n    _txt = _txt + 'assim você poderá ver como os seus clientes vão usar a ferramenta. É só clicar em Começar!\\n';\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Começar\", data: \"testtypecustomer_begin\", event: _event });\n    out.setQuickReplies(replies);\n    return out;\n}\n\n/**\n * Show after anser testtype_pizzaria\n * @param {*} data \n * @param {*} pageID \n * @param {*} userID \n */\nexport const m_askTestTypePizzaria = async (data, pageID, userID) => {\n    await updateMktContact({ pageID, userID, last_answer: data });\n\n    const out = new Elements();\n    let _txt = 'Para utilizar essa opção você precisa se cadastrar na administração do sistema \\\n    e habilitar o Bot para alguma página (Se você preferir, pode criar uma página teste no Facebook \\\n    e usá-la para os seus testes - você poderá simular ser cliente dessa página.';\n\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Quero usar!\", data: \"orderConfirmation_start\", event: _event });\n\n    const mktContact = await getMktContact({ pageID, userID });\n    if (mktContact && !mktContact.saw_how_it_works) {\n        replies.add({ text: \"Como funciona?\", data: \"options_howitworks\", event: _event });\n    }\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const m_afterOrderConfirmation = async (data, pageID, userID) => {\n    await updateMktContact({ pageID, userID, last_answer: data });\n\n    const out = new Elements();\n\n    let _txt = 'Olha que legal, você chegou até o final de um pedido teste.. Eu não vou te mandar uma pizza não tá? 😃 \\n';\n    _txt = _txt + 'Nós temos um site disponível aonde você pode acompanhar os pedidos realizados, tal como esse que você fez.\\n';\n    _txt = _txt + 'E agora?';\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Quero usar!\", data: \"orderConfirmation_start\", event: _event });\n    replies.add({ text: \"Ainda tenho dúvidas!\", data: \"orderConfirmation_question\", event: _event });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const m_startTrial = async (data, pageID, userID) => {\n    await updateMktContact({ pageID, userID, last_answer: data, final: true });\n\n    const out = new Elements();\n\n    const buttons = new Buttons();\n    buttons.add({ text: 'admin.pizzaibot.com', url: 'https://admin.pizzaibot.com' });\n\n    let _txt = 'Fico feliz pela sua decisão. Basta acessar o site abaixo, clicar na opção \"Continuar com o Facebook\"  e configurar as informações da sua loja.';\n    out.add({ text: _txt, buttons });\n\n    return out;\n}\n\nexport const m_openQuestion = async (data, pageID, userID) => {\n    await updateMktContact({ pageID, userID, last_answer: data });\n\n    const out = new Elements();\n\n    let _txt = 'É uma pena que não consegui responder todas as suas dúvidas. Menos um ponto para mim. 😞\\n';\n    _txt = _txt + ' Pode escrever aqui então o que não ficou claro que vou mandar para um humano responder.';\n    out.add({ text: _txt });\n\n    return out;\n}\n\nexport const m_confirmOpenQuestion = async (data, pageID, userID, text) => {\n\n    await updateMktContact({ pageID, userID, text, last_answer: data });\n\n    const out = new Elements();\n\n    let _txt = 'Ok, recebi a sua dúvida. \\\n    Saiba que os humanos nem sempre estão disponíveis, mas a gente vai te responder o mais rápido possível. \\\n    Qual a melhor forma de te responder?';\n\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Ligar Fone\", data: \"finalquestion_phone\", event: _event });\n    replies.add({ text: \"Whatsapp\", data: \"finalquestion_whatsapp\", event: _event });\n    replies.add({ text: \"E-mail\", data: \"finalquestion_mail\", event: _event });\n    replies.add({ text: \"Messenger\", data: \"finalquestion_messenger\", event: _event });\n    out.setQuickReplies(replies);\n    return out;\n}\n\nexport const m_returnContact = async (data, pageID, userID, type) => {\n\n    const out = new Elements();\n\n    if (type === 'messenger') {\n        await updateMktContact({ pageID, userID, contact_form: type, last_answer: data, final: true });\n\n        let _txt = 'Muito bem, logo logo nosso melhor humano vai te chamar aqui no Messenger para tirar a sua dúvida tá bom? Um grande abraço.';\n        out.add({ text: _txt });\n    } else if (type === 'phone' || type === 'whatsapp') {\n        await updateMktContact({ pageID, userID, contact_form: type, last_answer: data });\n\n        let _txt = 'Então, por favor, pode me enviar o seu telefone para que nosso humano entre em contato?';\n        out.add({ text: _txt });\n\n        const replies = new QuickReplies();\n        replies.add({ text: 'Telefone', isPhoneNumber: true, data: 'phone_number', event: _event });\n        replies.add({ text: 'Digitar o telefone', data: 'type_phone', event: _event });\n        out.setQuickReplies(replies);\n    } else if (type === 'email') {\n        await updateMktContact({ pageID, userID, contact_form: type, last_answer: data });\n\n        let _txt = 'Então, por favor, pode digitar o seu e-mail para que nosso humano entre em contato?';\n        out.add({ text: _txt });\n    }\n    return out;\n}\n\nexport const m_typePhone = async (data, pageID, userID, validation) => {\n    await updateMktContact({ pageID, userID, last_answer: data });\n\n    const out = new Elements();\n\n    if (data === 'retype_phone') {\n        let _txt = 'Parece que há algum problema com o número que você digitou.';\n        if (validation === 'INCOMPLETE_PHONE')\n            _txt = _txt + 'Parece que faltou o DDD. Digite novamente por favor. Informe somente o DDD e o número.';\n        else\n            _txt = _txt + 'Digite novamente por favor. Informe somente o DDD e o número.';\n        out.add({ text: _txt });\n    } else {\n        let _txt = 'Por favor, pode digitar o seu telefone:';\n        out.add({ text: _txt });\n    }\n\n\n    return out;\n}\n\nexport const m_isValidPhone = async (phone) => {\n\n    const validation = phone.replace(/\\s|-/g, \"\").match(/^[0-9\\+]{8,13}$/);\n    console.info(validation);\n    if (!validation) {\n        return 'INVALID_PHONE';\n    } else {\n        if (validation.input.length <= 9)\n            return 'INCOMPLETE_PHONE';\n        else\n            return 'OK_PHONE';\n    }\n}\n\nexport const m_contactPhone = async (data, pageID, userID, phone) => {\n    await updateMktContact({ pageID, userID, contact_phone: phone, last_answer: data, final: true });\n\n    const out = new Elements();\n\n    let _txt = 'Ok, muito obrigado. O nosso melhor humano vai entrar em contato contigo o mais breve possível. Um grande abraço da equipe Pizzaibot!';\n    out.add({ text: _txt });\n    return out;\n}\n\nexport const m_contactMail = async (data, pageID, userID, text) => {\n    await updateMktContact({ pageID, userID, contact_mail: text, last_answer: data, final: true });\n\n    const out = new Elements();\n\n    let _txt = 'Ok, muito obrigado. O nosso melhor humano vai entrar em contato contigo o mais breve possível. Um grande abraço da equipe Pizzaibot!';\n    out.add({ text: _txt });\n    return out;\n}\n\nexport const m_returnedCustomer = async (data, pageID, userID) => {\n    await updateMktContact({ pageID, userID, last_answer: data, final: false });\n\n    const out = new Elements();\n\n    let _txt = 'Olá de novo! Vi que você já passou por aqui, mas talvez queira rever algo certo? Então seguem as principais opções:';\n    out.add({ text: _txt });\n\n    const replies = new QuickReplies();\n    replies.add({ text: \"Como funciona?\", data: \"options_howitworks\", event: _event });\n    replies.add({ text: \"Quanto custa?\", data: \"options_howmuch\", event: _event });\n    replies.add({ text: \"Quero testar!\", data: \"options_wanttest\", event: _event });\n    out.setQuickReplies(replies);\n    return out;\n}\n"],"file":"botMarkController.js"}