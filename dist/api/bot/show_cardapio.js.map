{"version":3,"sources":["../../../src/api/bot/show_cardapio.js"],"names":["getCardapio","pageID","categoryID","replyText","askForCategoryCardapio","pageId","storeData","catalog_url1","catalog_url2","_images","img","imageUrl","imageCaption","push","reply","extraType","images","categories","_txt","_options","item","_data","id","name","buttons","text","data","event","subtext","type","options","getFlavorsAndToppingsCardapio","flavorArray","allToppings","flavorsWithToppings","flavor","categoryId","toppingsNames","toppings","length","tId","topping","console","error","flavorsAndToppingsCardapioErr","inputCardapioReplyMsg","priceBySize","info","replyMsg","price","join"],"mappings":"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","sourcesContent":["import { getPricingsWithSize } from '../controllers/pricingsController';\nimport { getCategories, getCategory } from '../controllers/categoriesController';\nimport { getFlavors } from '../controllers/flavorsController';\nimport { getToppingsFull } from '../controllers/toppingsController';\nimport { getStoreData } from '../controllers/storesController';\nimport { sendMainMenu } from './botController';\n\nexport const getCardapio = async (pageID, categoryID) => {\n    // const category = await getCategory(pageID, categoryID);\n    // const flavorArray = await getFlavorsAndToppingsCardapio(pageID, categoryID);\n\n    // let pricingArray = []\n    // if (category && category.price_by_size)\n    //     pricingArray = await getPricingsWithSize(pageID);\n\n    let replyText = '/cardapio';\n\n    // if (flavorArray && category) {\n    //     replyText = `Seguem nossas opções de ${category.name}:\\n`;\n    //     if (category && category.price_by_size) {\n    //         for (const pricing of pricingArray) {\n    //             if (pricing.categoryId == category.id)\n    //                 replyText = replyText + `${pricing.size} - R$ ${pricing.price}\\n`;\n    //         }\n    //     }\n    //     replyText = replyText + '\\n' + await inputCardapioReplyMsg(flavorArray, category.price_by_size);\n    // }\n    return replyText;\n}\n\n/**\n * If there is an image in the Store Customizing, send it.\n * @param {*} pageId\n */\nexport const askForCategoryCardapio = async (pageId) => {\n    const storeData = await getStoreData(pageId);\n\n    if (storeData.catalog_url1 || storeData.catalog_url2) {\n        const _images = [];\n        if (storeData.catalog_url1) {\n            const img = { imageUrl: storeData.catalog_url1, imageCaption: 'Cardápio' };\n            _images.push(img);\n        }\n        if (storeData.catalog_url2) {\n            const img = { imageUrl: storeData.catalog_url2, imageCaption: 'Cardápio' };\n            _images.push(img);\n        }\n\n        const reply = await sendMainMenu();\n        reply.extraType = 'image';\n        reply.images = _images;\n\n        return reply;\n\n    } else {\n        const categories = await getCategories(pageId);\n\n        let _txt = 'Selecione uma categoria:';\n\n        const _options = [];\n        for (let item of categories) {\n            const _data = { id: item.id, name: item.name }\n            const buttons = { text: 'Detalhes', data: _data, event: 'ORDER_CATEGORY_CARDAPIO' };\n            _options.push({ text: item.name, subtext: item.name, buttons });\n        }\n\n        const buttons = { text: 'Voltar', data: 'main_menu', event: 'MAIN_MENU' };\n        _options.push({ text: 'Voltar p/ Inicio', subtext: 'Voltar p/ Inicio', buttons });\n\n        return {\n            type: 'list',\n            text: _txt,\n            options: _options,\n        }\n    }\n}\n\nexport const getFlavorsAndToppingsCardapio = async (pageID, categoryID) => {\n    try {\n        const flavorArray = await getFlavors(pageID);\n        const allToppings = await getToppingsFull(pageID);\n        const flavorsWithToppings = [];\n        for (let flavor of flavorArray) {\n            if (categoryID && flavor.categoryId === categoryID) {\n                flavor.toppingsNames = [];\n                if (flavor.toppings && flavor.toppings.length > 0) {\n                    for (let tId of flavor.toppings) {\n                        for (let topping of allToppings) {\n                            if (topping.id === tId) {\n                                flavor.toppingsNames.push(topping.topping);\n                            }\n                        }\n                    }\n                }\n                flavorsWithToppings.push(flavor);\n            }\n        }\n        return flavorsWithToppings;\n    } catch (err) {\n        console.error({ flavorsAndToppingsCardapioErr: err });\n    }\n}\n\nexport const inputCardapioReplyMsg = async (flavorArray, priceBySize) => {\n    console.info(flavorArray);\n    let replyMsg = '';\n    if (flavorArray) {\n        for (const flavor of flavorArray) {\n            replyMsg = replyMsg + flavor.flavor;\n            if (!priceBySize)\n                replyMsg = replyMsg + ' - RS ' + flavor.price;\n            replyMsg = replyMsg + '\\n';\n\n            if (flavor.toppingsNames && flavor.toppingsNames.length > 0)\n                replyMsg = replyMsg + '𝐈𝐧𝐠𝐫𝐞𝐝𝐢𝐞𝐧𝐭𝐞𝐬: ' + flavor.toppingsNames.join(', ') + '\\n';\n        }\n    }\n    return replyMsg;\n}\n"],"file":"show_cardapio.js"}