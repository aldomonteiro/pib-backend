{"version":3,"sources":["../../../src/api/bot/show_cardapio.js"],"names":["getCardapio","pageID","categoryID","category","getFlavorsAndToppingsCardapio","flavorArray","pricingArray","price_by_size","replyText","name","pricing","categoryId","id","size","price","inputCardapioReplyMsg","askForCategoryCardapio","pageId","categories","_txt","_options","item","_data","buttons","text","data","event","push","subtext","type","options","allToppings","flavorsWithToppings","flavor","toppingsNames","toppings","length","tId","topping","console","error","flavorsAndToppingsCardapioErr","priceBySize","info","replyMsg","join"],"mappings":"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","sourcesContent":["import { getPricingsWithSize } from '../controllers/pricingsController';\nimport { getCategories, getCategory } from '../controllers/categoriesController';\nimport { getFlavors } from '../controllers/flavorsController';\nimport { getToppingsFull } from '../controllers/toppingsController';\n\nexport const getCardapio = async (pageID, categoryID) => {\n    const category = await getCategory(pageID, categoryID);\n    const flavorArray = await getFlavorsAndToppingsCardapio(pageID, categoryID);\n\n    let pricingArray = []\n    if (category && category.price_by_size)\n        pricingArray = await getPricingsWithSize(pageID);\n\n    let replyText = '';\n    if (flavorArray && category) {\n        replyText = `Seguem nossas opções de ${category.name}:\\n`;\n        if (category && category.price_by_size) {\n            for (const pricing of pricingArray) {\n                if (pricing.categoryId == category.id)\n                    replyText = replyText + `${pricing.size} - R$ ${pricing.price}\\n`;\n            }\n        }\n        replyText = replyText + '\\n' + await inputCardapioReplyMsg(flavorArray, category.price_by_size);\n    }\n    return replyText;\n}\n\nexport const askForCategoryCardapio = async (pageId) => {\n    const categories = await getCategories(pageId);\n\n    let _txt = 'Selecione uma categoria:';\n\n    const _options = [];\n    for (let item of categories) {\n        const _data = { id: item.id, name: item.name }\n        const buttons = { text: 'Detalhes', data: _data, event: 'ORDER_CATEGORY_CARDAPIO' };\n        _options.push({ text: item.name, subtext: item.name, buttons });\n    }\n\n    const buttons = { text: 'Voltar', data: 'main_menu', event: 'MAIN_MENU' };\n    _options.push({ text: 'Voltar p/ Inicio', subtext: 'Voltar p/ Inicio', buttons });\n\n    return {\n        type: 'list',\n        text: _txt,\n        options: _options,\n    }\n}\n\nexport const getFlavorsAndToppingsCardapio = async (pageID, categoryID) => {\n    try {\n        const flavorArray = await getFlavors(pageID);\n        const allToppings = await getToppingsFull(pageID);\n        const flavorsWithToppings = [];\n        for (let flavor of flavorArray) {\n            if (categoryID && flavor.categoryId === categoryID) {\n                flavor.toppingsNames = [];\n                if (flavor.toppings && flavor.toppings.length > 0) {\n                    for (let tId of flavor.toppings) {\n                        for (let topping of allToppings) {\n                            if (topping.id === tId) {\n                                flavor.toppingsNames.push(topping.topping);\n                            }\n                        }\n                    }\n                }\n                flavorsWithToppings.push(flavor);\n            }\n        }\n        return flavorsWithToppings;\n    } catch (err) {\n        console.error({ flavorsAndToppingsCardapioErr: err });\n    }\n}\n\nexport const inputCardapioReplyMsg = async (flavorArray, priceBySize) => {\n    console.info(flavorArray);\n    let replyMsg = '';\n    if (flavorArray) {\n        for (const flavor of flavorArray) {\n            replyMsg = replyMsg + flavor.flavor;\n            if (!priceBySize)\n                replyMsg = replyMsg + ' - RS ' + flavor.price;\n            replyMsg = replyMsg + '\\n';\n\n            if (flavor.toppingsNames && flavor.toppingsNames.length > 0)\n                replyMsg = replyMsg + '𝐈𝐧𝐠𝐫𝐞𝐝𝐢𝐞𝐧𝐭𝐞𝐬: ' + flavor.toppingsNames.join(', ') + '\\n';\n        }\n    }\n    return replyMsg;\n}\n"],"file":"show_cardapio.js"}