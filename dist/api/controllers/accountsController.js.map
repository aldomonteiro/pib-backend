{"version":3,"sources":["../../../src/api/controllers/accountsController.js"],"names":["configureCielo","dotenv","config","env","process","NODE_ENV","merchant_id","merchant_key","CIELO_MERCHANT_ID","CIELO_MERCHANT_KEY","SANDBOX_CIELO_MERCHANT_ID","SANDBOX_CIELO_MERCHANT_KEY","paramsCielo","MerchantId","MerchantKey","sandbox","debug","cielo","require","accounts_get_one","req","res","params","id","User","findOne","userID","err","doc","status","json","message","errMsg","accounts_update","console","info","body","name","number","expiry","cvc","issuer","pageId","currentUser","activePage","Account","save","result","errmsg","accountsUpdateErr","error","createCieloRecurrency","recurrencyParams","MerchantOrderId","Customer","Name","Payment","Type","Amount","Installments","SoftDescriptor","RecurrentPayment","AuthorizeNow","EndDate","Interval","CreditCard","CardNumber","Holder","ExpirationDate","SecurityCode","SaveCard","Brand","recurrentPayments","firstScheduledRecurrence"],"mappings":"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","sourcesContent":["import Account from '../models/accounts';\nimport dotenv from 'dotenv';\n\nconst configureCielo = () => {\n    dotenv.config();\n\n    const env = process.env.NODE_ENV || 'production';\n    let merchant_id;\n    let merchant_key;\n\n    if (env === 'production') {\n        merchant_id = process.env.CIELO_MERCHANT_ID;\n        merchant_key = process.env.CIELO_MERCHANT_KEY;\n    } else {\n        merchant_id = process.env.SANDBOX_CIELO_MERCHANT_ID;\n        merchant_key = process.env.SANDBOX_CIELO_MERCHANT_KEY;\n    }\n\n    const paramsCielo = {\n        MerchantId: merchant_id,\n        MerchantKey: merchant_key,\n        sandbox: true, // Opcional - Ambiente de Testes\n        debug: true, // Opcional - Exibe os dados enviados na requisição para a Cielo\n    }\n\n    var cielo = require('cielo')(paramsCielo);\n    return cielo;\n}\n\n// List one record by filtering by ID\nexport const accounts_get_one = (req, res) => {\n    if (req.params && req.params.id) {\n\n        User.findOne({ userID: req.params.id }, (err, doc) => {\n            if (err) {\n                res.status(500).json({ message: err.errMsg });\n            } else {\n                res.status(200).json(doc);\n            }\n        });\n    }\n}\n\n// UPDATE\nexport const accounts_update = async (req, res) => {\n    try {\n        console.info(req.body);\n        const {\n            id,\n            name,\n            number,\n            expiry,\n            cvc,\n            issuer,\n        } = req.body;\n\n        // const returnCielo = await createCieloRecurrency({ id, name, number, expiry, cvc, issuer });\n        // console.log(returnCielo);\n\n        const pageId = req.currentUser.activePage;\n\n        Account.findOne({ pageId: pageId, id: id }, (err, doc) => {\n            if (!err) {\n                doc.id = id;\n                doc.pageId = pageId;\n                doc.name = name;\n                doc.number = number;\n                doc.expiry = expiry;\n                doc.cvc = cvc;\n                doc.issuer = issuer;\n\n                doc.save((err, result) => {\n                    if (err) {\n                        res.status(500).json({ message: err.errmsg });\n                    } else {\n                        res.status(200).json(result);\n                    }\n                });\n            } else {\n                res.status(500).json({ message: err.errmsg });\n            }\n        });\n    } catch (accountsUpdateErr) {\n        console.error({ accountsUpdateErr });\n        res.status(500).json({ message: accountsUpdateErr.errmsg });\n    }\n}\n\nconst createCieloRecurrency = async (params) => {\n    const recurrencyParams = {\n        MerchantOrderId: '2014113245231706',\n        Customer: {\n            Name: params.name,\n        },\n        Payment: {\n            Type: 'CreditCard',\n            Amount: 19700,\n            Installments: 1,\n            SoftDescriptor: 'PizzaiBot',\n            RecurrentPayment: {\n                AuthorizeNow: 'true',\n                EndDate: '2020-12-01',\n                Interval: 'Monthly',\n            },\n            CreditCard: {\n                CardNumber: params.number,\n                Holder: params.name,\n                ExpirationDate: params.expiry,\n                SecurityCode: params.cvc,\n                SaveCard: 'false',\n                Brand: params.issuer,\n            },\n        },\n    }\n\n    const cielo = configureCielo();\n    return await cielo.recurrentPayments.firstScheduledRecurrence(recurrencyParams);\n}\n"],"file":"accountsController.js"}