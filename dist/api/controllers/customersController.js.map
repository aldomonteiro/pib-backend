{"version":3,"sources":["../../../src/api/controllers/customersController.js"],"names":["customer_get_all","req","res","sortObj","query","sort","first_name","rangeObj","range","filter","filterField","filterValues","queryParam","currentUser","activePage","$in","Customer","find","skip","offset","limit","estimatedDocumentCount","pageId","count","exec","err","result","status","json","message","errmsg","setHeader","util","format","length","console","error","customerGetAllErr","customer_get_one","params","id","customerId","queryParams","findOne","customer","total_spent","nb_orders","first_order","last_order","jsonCustomer","last_name","profile_pic","phone","addr_formatted","addr_city","addr_postalcode","createdAt","updatedAt","checkCustomerAddress","pageID","userID","location","getCustomerAddress","addressData","getAddressLocation","userId","addr_street","formattedAddress","street","street_number","addr_streetnumber","sublocality","addr_sublocality","state","addr_state","city","postal_code","arr","googleMapsAPI","process","env","response","info","data","error_message","response2","response3","response4","MY_GOOGLE_MAPS_APIKEY","response5","statusText","results","API_KEY","axios","get","lat","long","customer_update","custData","customerID","addrData","updateDb","location_lat","location_long","location_url","url","manual_address","addr_manual","save","select","resultLastId","lastId","newRecord","email","addr","formatAddrData","formattedAddressData","formatted_address","addComps","address_components","forEach","element","types","type","long_name"],"mappings":"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","sourcesContent":["import Customer from '../models/customers';\nimport axios from 'axios';\nimport util from \"util\";\nimport { shuffle } from '../util/util';\nimport { configSortQuery, configRangeQueryNew, configFilterQuery } from '../util/util';\nimport { getOrdersCustomerStat } from './ordersController';\n\n// List all customers\nexport const customer_get_all = async (req, res) => {\n    try {\n        let sortObj = req.query.sort ? configSortQuery(req.query.sort) : { first_name: 'ASC' };\n        const rangeObj = configRangeQueryNew(req.query.range);\n        const { filterField, filterValues } = configFilterQuery(req.query.filter);\n\n        let queryParam = {};\n        if (req.currentUser.activePage) {\n            queryParam['pageId'] = req.currentUser.activePage;\n        }\n\n        if (filterField && filterValues) {\n            if (typeof filterValues === 'Array') {\n                queryParam[filterField] = { $in: filterValues };\n            } else {\n                queryParam[filterField] = filterValues;\n            }\n        }\n\n        let query;\n        if (rangeObj) {\n            query = Customer.find(queryParam).sort(sortObj).skip(rangeObj.offset).limit(rangeObj.limit);\n        } else {\n            query = Customer.find(queryParam).sort(sortObj);\n        }\n\n        const count = await Customer.estimatedDocumentCount({ pageId: req.currentUser.activePage });\n\n        query.exec((err, result) => {\n            if (err) {\n                res.status(500).json({ message: err.errmsg });\n            } else {\n                res.setHeader('Content-Range', util.format(\"customers %d-%d/%d\", 1, result.length - 1, count));\n                res.status(200).json(result);\n            }\n        });\n    } catch (customerGetAllErr) {\n        console.error({ customerGetAllErr });\n        res.status(500).json({ message: err.message });\n    }\n};\n\n// List one record by filtering by ID\nexport const customer_get_one = async (req, res) => {\n    if (req.params && req.params.id) {\n        try {\n            const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n            const customerId = req.params.id;\n\n            let queryParams = {};\n            queryParams['id'] = customerId;\n            if (pageId) {\n                queryParams['pageId'] = pageId;\n            }\n\n            const customer = await Customer.findOne(queryParams).exec();\n            if (customer) {\n                const { total_spent, nb_orders, first_order, last_order } = await getOrdersCustomerStat({ pageId, customerId });\n\n                const jsonCustomer = {\n                    id: customer.id,\n                    pageId: customer.pageId,\n                    first_name: customer.first_name,\n                    last_name: customer.last_name,\n                    profile_pic: customer.profile_pic,\n                    phone: customer.phone,\n                    addr_formatted: customer.addr_formatted,\n                    addr_city: customer.addr_city,\n                    addr_postalcode: customer.addr_postalcode,\n                    createdAt: customer.createdAt,\n                    updatedAt: customer.updatedAt,\n                    total_spent: total_spent,\n                    nb_orders: nb_orders,\n                    first_order: first_order,\n                    last_order: last_order,\n                };\n\n                res.status(200).json(jsonCustomer);\n            } else {\n                res.status(500).json({ message: 'pos.customer.messages.no_customer_found' });\n            }\n        } catch (customerGetOneError) {\n            res.status(500).json({ message: customerGetOneError.message });\n        }\n    }\n}\n\nexport const checkCustomerAddress = async (pageID, userID, location) => {\n    let addressData = await getCustomerAddress(pageID, userID);\n    if (addressData) {\n        return addressData;\n    } else {\n        addressData = await getAddressLocation(location);\n        if (addressData.status === 200) {\n            return addressData;\n        }\n        else return null;\n    }\n}\n\nexport const getCustomerAddress = async (pageID, userID) => {\n\n    const customer = await Customer.findOne({ pageId: pageID, userId: userID }).exec();\n\n    if (customer) {\n        if (customer.addr_formatted || customer.addr_street) {\n            let addressData = {};\n            addressData.formattedAddress = customer.addr_formatted;\n            addressData.street = customer.addr_street;\n            addressData.street_number = customer.addr_streetnumber;\n            addressData.sublocality = customer.addr_sublocality;\n            addressData.state = customer.addr_state;\n            addressData.city = customer.addr_city;\n            addressData.postal_code = customer.addr_postalcode;\n            return addressData;\n        } else return null;\n    } else return null;\n}\n\nexport const getAddressLocation = async (location) => {\n    let arr = [1, 2, 3, 4];\n    arr = shuffle(arr); // select the apis randomically\n\n    const response = await googleMapsAPI(location, process.env['GOOGLE_MAPS_APIKEY' + arr[0]]);\n    console.info({ response });\n    if (response.status === 200) {\n        if (response.data.error_message && response.data.status === 'OVER_QUERY_LIMIT') {\n            const response2 = await googleMapsAPI(location, process.env['GOOGLE_MAPS_APIKEY' + arr[1]]);\n            if (response2.status === 200) {\n                if (response2.data.error_message && response2.data.status === 'OVER_QUERY_LIMIT') {\n                    const response3 = await googleMapsAPI(location, process.env['GOOGLE_MAPS_APIKEY' + arr[2]]);\n                    if (response3.status === 200) {\n                        if (response3.data.error_message && response3.data.status === 'OVER_QUERY_LIMIT') {\n                            const response4 = await googleMapsAPI(location, process.env['GOOGLE_MAPS_APIKEY' + arr[3]]);\n                            if (response4.status === 200) {\n                                if (response4.data.error_message && response4.data.status === 'OVER_QUERY_LIMIT') {\n                                    const response5 = await googleMapsAPI(location, process.env.MY_GOOGLE_MAPS_APIKEY);\n                                    if (response5.status === 200) {\n                                        if (response5.data.error_message && response5.data.status === 'OVER_QUERY_LIMIT') {\n                                            console.error(response5.status, response5.statusText);\n                                            return null;\n                                        } else return response5.data.results;\n                                    } else return null;\n                                } else return response4.data.results;\n                            } else return null;\n                        } else return response3.data.results;\n                    } else return null;\n                } else return response2.data.results;\n            } else return null;\n        } else return response.data.results;\n    } else return null;\n}\n\nconst googleMapsAPI = async (location, API_KEY) => {\n    console.info('using:' + API_KEY);\n    return await axios.get('https://maps.googleapis.com/maps/api/geocode/json', {\n        params: {\n            'latlng': location.lat + ',' + location.long,\n            'key': API_KEY,\n        }\n    });\n}\n\nexport const customer_update = async (custData) => {\n    let customerID = 0;\n    const customer = await Customer.findOne({ pageId: custData.pageId, userId: custData.userId }).exec();\n\n    if (customer && customer.id) {\n        customerID = customer.id;\n        const { first_name, last_name, phone, profile_pic, location, addrData } = custData;\n\n        let updateDb = false;\n        if (first_name || last_name || profile_pic) {\n            customer.first_name = first_name;\n            customer.last_name = last_name;\n            customer.profile_pic = profile_pic;\n            updateDb = true;\n        }\n        if (phone) {\n            customer.phone = phone;\n            updateDb = true;\n        }\n        if (location) {\n            customer.location_lat = location.lat;\n            customer.location_long = location.long;\n            customer.location_url = location.url;\n            updateDb = true;\n        }\n        if (addrData) {\n            if (addrData.manual_address)\n                customer.addr_manual = true;\n            else\n                customer.addr_manual = false;\n\n            customer.addr_formatted = addrData.formattedAddress;\n            customer.addr_street = addrData.street;\n            customer.addr_sublocality = addrData.sublocality;\n            customer.addr_streetnumber = addrData.street_number;\n            customer.addr_state = addrData.state;\n            customer.addr_city = addrData.city;\n            customer.addr_postalcode = addrData.postal_code;\n            updateDb = true;\n        }\n\n        if (updateDb) {\n            await customer.save();\n        }\n    } else {\n        const resultLastId = await Customer.find({ pageId: custData.pageId })\n            .select('id')\n            .sort('-id')\n            .limit(1)\n            .exec();\n        let lastId = 1;\n        if (resultLastId && resultLastId.length) lastId = resultLastId[0].id + 1;\n\n        const newRecord = new Customer({\n            id: lastId,\n            userId: custData.userId,\n            pageId: custData.pageId,\n            first_name: custData.first_name,\n            last_name: custData.last_name,\n            profile_pic: custData.profile_pic,\n            email: custData.email,\n            phone: custData.phone,\n            addr_formatted: custData.addr ? custData.addr.formattedAddress : null,\n            addr_street: custData.addr ? custData.addr.street : null,\n            addr_sublocality: custData.addr ? custData.addr.sublocality : null,\n            addr_streetnumber: custData.addr ? custData.addr.street_number : null,\n            addr_state: custData.addr ? custData.addr.state : null,\n            addr_city: custData.addr ? custData.addr.city : null,\n            addr_postalcode: custData.addr ? custData.addr.postal_code : null,\n            location_lat: custData.location ? custData.location.lat : null,\n            location_long: custData.location ? custData.location.long : null,\n            location_url: custData.location ? custData.location.url : null,\n        });\n\n        await newRecord.save();\n        customerID = newRecord.id;\n    }\n    return customerID;\n}\n\nexport const formatAddrData = async addrData => {\n    let formattedAddressData = {}\n    formattedAddressData.formattedAddress = addrData.formatted_address;\n    const addComps = addrData.address_components;\n\n    addComps.forEach(element => {\n        element.types.forEach(type => {\n            if (type === 'street_number') {\n                formattedAddressData.street_number = element.long_name;\n            } else if (type === 'route') {\n                formattedAddressData.street = element.long_name;\n            } else if (type === 'sublocality' || type === 'sublocality_level_1') {\n                formattedAddressData.sublocality = element.long_name;\n            } else if (type === 'administrative_area_level_2') {\n                formattedAddressData.city = element.long_name;\n            } else if (type === 'administrative_area_level_1') {\n                formattedAddressData.state = element.long_name;\n            } else if (type === 'postal_code') {\n                formattedAddressData.postal_code = element.long_name;\n            }\n        });\n    });\n    return formattedAddressData;\n}\n\n\n"],"file":"customersController.js"}