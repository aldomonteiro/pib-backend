{"version":3,"sources":["../../../src/api/controllers/customersController.js"],"names":["checkCustomerAddress","pageID","userID","location","getCustomerAddress","addressData","getAddressLocation","status","Customer","findOne","pageId","userId","exec","customer","addr_formatted","addr_street","formattedAddress","street","street_number","addr_streetnumber","sublocality","addr_sublocality","state","addr_state","city","addr_city","postal_code","addr_postalcode","axios","get","params","lat","long","process","env","GOOGLE_MAPS_APIKEY","response","console","info","data","error_message","error","results","statusText","customer_update","custData","id","first_name","last_name","phone","profile_pic","addrData","updateDb","profilePic","location_lat","location_long","location_url","url","manual_address","addr_manual","save","err","result","resultLastId","find","select","sort","limit","lastId","length","newRecord","email","addr","formatAddrData","formattedAddressData","formatted_address","addComps","address_components","forEach","element","types","type","long_name"],"mappings":"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","sourcesContent":["import Customer from '../models/customers';\nimport axios from 'axios';\n\nexport const checkCustomerAddress = async (pageID, userID, location) => {\n    let addressData = await getCustomerAddress(pageID, userID);\n    if (addressData) {\n        return addressData;\n    } else {\n        addressData = await getAddressLocation(location);\n        if (addressData.status === 200) {\n            return addressData;\n        }\n        else return null;\n    }\n}\n\nexport const getCustomerAddress = async (pageID, userID) => {\n\n    const customer = await Customer.findOne({ pageId: pageID, userId: userID }).exec();\n\n    if (customer) {\n        if (customer.addr_formatted || customer.addr_street) {\n            let addressData = {};\n            addressData.formattedAddress = customer.addr_formatted;\n            addressData.street = customer.addr_street;\n            addressData.street_number = customer.addr_streetnumber;\n            addressData.sublocality = customer.addr_sublocality;\n            addressData.state = customer.addr_state;\n            addressData.city = customer.addr_city;\n            addressData.postal_code = customer.addr_postalcode;\n            return addressData;\n        } else return null;\n    } else return null;\n}\n\nexport const getAddressLocation = async (location) => {\n\n    const response = await axios.get('https://maps.googleapis.com/maps/api/geocode/json', {\n        params: {\n            'latlng': location.lat + ',' + location.long,\n            'key': process.env.GOOGLE_MAPS_APIKEY,\n        }\n    });\n\n    console.info({ response });\n\n    if (response.status === 200) {\n        if (response.data.error_message) {\n            console.error(response.data.status, response.data.error_message)\n            return null;\n        } else return response.data.results;\n\n        // addressData.formattedAddress = response.data.results[0].formatted_address;\n        // const addComps = response.data.results[0].address_components;\n\n        // addComps.forEach(element => {\n        //     element.types.forEach(type => {\n        //         if (type === 'street_number') {\n        //             addressData.street_number = element.long_name;\n        //         } else if (type === 'route') {\n        //             addressData.street = element.long_name;\n        //         } else if (type === 'sublocality' || type === 'sublocality_level_1') {\n        //             addressData.sublocality = element.long_name;\n        //         } else if (type === 'administrative_area_level_2') {\n        //             addressData.city = element.long_name;\n        //         } else if (type === 'administrative_area_level_1') {\n        //             addressData.state = element.long_name;\n        //         } else if (type === 'postal_code') {\n        //             addressData.postal_code = element.long_name;\n        //         }\n        //     });\n        // });\n    } else {\n        console.error(response.status, response.statusText);\n        return null;\n    }\n}\n\nexport const customer_update = async (custData) => {\n\n    const customer = await Customer.findOne({ pageId: custData.pageId, userId: custData.userId }).exec();\n\n    if (customer && customer.id) {\n        const { first_name, last_name, phone, profile_pic, location, addrData } = custData;\n\n        let updateDb = false;\n        if (first_name || last_name) {\n            customer.first_name = first_name;\n            customer.last_name = last_name;\n            updateDb = true;\n        }\n        if (profile_pic) {\n            customer.profilePic = profile_pic;\n            updateDb = true;\n        }\n        if (phone) {\n            customer.phone = phone;\n            updateDb = true;\n        }\n        if (location) {\n            customer.location_lat = location.lat;\n            customer.location_long = location.long;\n            customer.location_url = location.url;\n            updateDb = true;\n        }\n        if (addrData) {\n            if (addrData.manual_address)\n                customer.addr_manual = true;\n            else\n                customer.addr_manual = false;\n\n            customer.addr_formatted = addrData.formattedAddress;\n            customer.addr_street = addrData.street;\n            customer.addr_sublocality = addrData.sublocality;\n            customer.addr_streetnumber = addrData.street_number;\n            customer.addr_state = addrData.state;\n            customer.addr_city = addrData.city;\n            customer.addr_postalcode = addrData.postal_code;\n            updateDb = true;\n        }\n\n        if (updateDb) {\n            await customer.save((err, result) => {\n                if (err) throw err;\n            });\n        }\n    } else {\n        const resultLastId = Customer.find({ pageId: custData.pageId })\n            .select('id')\n            .sort('-id')\n            .limit(1)\n            .exec();\n        let lastId = 0;\n        if (resultLastId && resultLastId.length) lastId = resultLastId[0];\n\n        const newRecord = new Customer({\n            id: lastId + 1,\n            userId: custData.userId,\n            pageId: custData.pageId,\n            first_name: custData.first_name,\n            last_name: custData.last_name,\n            profilePic: custData.profile_pic,\n            email: custData.email,\n            phone: custData.phone,\n            addr_formatted: custData.addr ? custData.addr.formattedAddress : null,\n            addr_street: custData.addr ? custData.addr.street : null,\n            addr_sublocality: custData.addr ? custData.addr.sublocality : null,\n            addr_streetnumber: custData.addr ? custData.addr.street_number : null,\n            addr_state: custData.addr ? custData.addr.state : null,\n            addr_city: custData.addr ? custData.addr.city : null,\n            addr_postalcode: custData.addr ? custData.addr.postal_code : null,\n            location_lat: custData.location ? custData.location.lat : null,\n            location_long: custData.location ? custData.location.long : null,\n            location_url: custData.location ? custData.location.url : null,\n        });\n\n        newRecord.save((err, result) => {\n            if (err) throw err;\n        });\n    }\n}\n\nexport const formatAddrData = async addrData => {\n    let formattedAddressData = {}\n    formattedAddressData.formattedAddress = addrData.formatted_address;\n    const addComps = addrData.address_components;\n\n    addComps.forEach(element => {\n        element.types.forEach(type => {\n            if (type === 'street_number') {\n                formattedAddressData.street_number = element.long_name;\n            } else if (type === 'route') {\n                formattedAddressData.street = element.long_name;\n            } else if (type === 'sublocality' || type === 'sublocality_level_1') {\n                formattedAddressData.sublocality = element.long_name;\n            } else if (type === 'administrative_area_level_2') {\n                formattedAddressData.city = element.long_name;\n            } else if (type === 'administrative_area_level_1') {\n                formattedAddressData.state = element.long_name;\n            } else if (type === 'postal_code') {\n                formattedAddressData.postal_code = element.long_name;\n            }\n        });\n    });\n    return formattedAddressData;\n}\n\n\n"],"file":"customersController.js"}