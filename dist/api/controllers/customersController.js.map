{"version":3,"sources":["../../../src/api/controllers/customersController.js"],"names":["customer_get_all","req","res","sortObj","query","sort","rangeObj","range","options","offset","limit","lean","leanWithId","currentUser","activePage","Customer","find","pageId","paginate","err","result","status","json","message","errmsg","setHeader","util","format","total","docs","customer_get_one","params","id","findOne","doc","errMsg","checkCustomerAddress","pageID","userID","location","getCustomerAddress","addressData","getAddressLocation","userId","exec","customer","addr_formatted","addr_street","formattedAddress","street","street_number","addr_streetnumber","sublocality","addr_sublocality","state","addr_state","city","addr_city","postal_code","addr_postalcode","arr","googleMapsAPI","process","env","response","console","info","data","error_message","response2","response3","response4","MY_GOOGLE_MAPS_APIKEY","response5","error","statusText","results","API_KEY","axios","get","lat","long","customer_update","custData","customerID","first_name","last_name","phone","profile_pic","addrData","updateDb","location_lat","location_long","location_url","url","manual_address","addr_manual","save","resultLastId","select","lastId","length","newRecord","email","addr","formatAddrData","formattedAddressData","formatted_address","addComps","address_components","forEach","element","types","type","long_name"],"mappings":"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","sourcesContent":["import Customer from '../models/customers';\nimport axios from 'axios';\nimport util from \"util\";\nimport { shuffle } from '../util/util';\nimport { configSortQuery, configRangeQuery } from '../util/util';\n\n// List all customers\n// TODO: use filters in the query req.query\nexport const customer_get_all = async (req, res) => {\n    // Getting the sort from the requisition\n    var sortObj = configSortQuery(req.query.sort);\n    // Getting the range from the requisition\n    var rangeObj = configRangeQuery(req.query.range);\n\n    let options = {\n        offset: rangeObj['offset'],\n        limit: rangeObj['limit'],\n        sort: sortObj,\n        lean: true,\n        leanWithId: false,\n    };\n\n    var query = {};\n\n    if (req.currentUser.activePage) {\n        query = Customer.find({ pageId: req.currentUser.activePage });\n    }\n\n    Customer.paginate(query, options, async (err, result) => {\n        if (err) {\n            res.status(500).json({ message: err.errmsg });\n        } else {\n            res.setHeader('Content-Range', util.format(\"customers %d-%d/%d\", rangeObj['offset'], rangeObj['limit'], result.total));\n            res.status(200).json(result.docs);\n        }\n    });\n};\n\n// List one record by filtering by ID\nexport const customer_get_one = (req, res) => {\n    if (req.params && req.params.id) {\n        const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n        Customer.findOne({ pageId: pageId, id: req.params.id }, (err, doc) => {\n            if (err) {\n                res.status(500).json({ message: err.errMsg });\n            }\n            else {\n                res.status(200).json(doc);\n            }\n        });\n    }\n}\n\nexport const checkCustomerAddress = async (pageID, userID, location) => {\n    let addressData = await getCustomerAddress(pageID, userID);\n    if (addressData) {\n        return addressData;\n    } else {\n        addressData = await getAddressLocation(location);\n        if (addressData.status === 200) {\n            return addressData;\n        }\n        else return null;\n    }\n}\n\nexport const getCustomerAddress = async (pageID, userID) => {\n\n    const customer = await Customer.findOne({ pageId: pageID, userId: userID }).exec();\n\n    if (customer) {\n        if (customer.addr_formatted || customer.addr_street) {\n            let addressData = {};\n            addressData.formattedAddress = customer.addr_formatted;\n            addressData.street = customer.addr_street;\n            addressData.street_number = customer.addr_streetnumber;\n            addressData.sublocality = customer.addr_sublocality;\n            addressData.state = customer.addr_state;\n            addressData.city = customer.addr_city;\n            addressData.postal_code = customer.addr_postalcode;\n            return addressData;\n        } else return null;\n    } else return null;\n}\n\nexport const getAddressLocation = async (location) => {\n    let arr = [1, 2, 3, 4];\n    arr = shuffle(arr); // select the apis randomically\n\n    const response = await googleMapsAPI(location, process.env['GOOGLE_MAPS_APIKEY' + arr[0]]);\n    console.info({ response });\n    if (response.status === 200) {\n        if (response.data.error_message && response.data.status === 'OVER_QUERY_LIMIT') {\n            const response2 = await googleMapsAPI(location, process.env['GOOGLE_MAPS_APIKEY' + arr[1]]);\n            if (response2.status === 200) {\n                if (response2.data.error_message && response2.data.status === 'OVER_QUERY_LIMIT') {\n                    const response3 = await googleMapsAPI(location, process.env['GOOGLE_MAPS_APIKEY' + arr[2]]);\n                    if (response3.status === 200) {\n                        if (response3.data.error_message && response3.data.status === 'OVER_QUERY_LIMIT') {\n                            const response4 = await googleMapsAPI(location, process.env['GOOGLE_MAPS_APIKEY' + arr[3]]);\n                            if (response4.status === 200) {\n                                if (response4.data.error_message && response4.data.status === 'OVER_QUERY_LIMIT') {\n                                    const response5 = await googleMapsAPI(location, process.env.MY_GOOGLE_MAPS_APIKEY);\n                                    if (response5.status === 200) {\n                                        if (response5.data.error_message && response5.data.status === 'OVER_QUERY_LIMIT') {\n                                            console.error(response5.status, response5.statusText);\n                                            return null;\n                                        } else return response5.data.results;\n                                    } else return null;\n                                } else return response4.data.results;\n                            } else return null;\n                        } else return response3.data.results;\n                    } else return null;\n                } else return response2.data.results;\n            } else return null;\n        } else return response.data.results;\n    } else return null;\n}\n\nconst googleMapsAPI = async (location, API_KEY) => {\n    console.info('using:' + API_KEY);\n    return await axios.get('https://maps.googleapis.com/maps/api/geocode/json', {\n        params: {\n            'latlng': location.lat + ',' + location.long,\n            'key': API_KEY,\n        }\n    });\n}\n\nexport const customer_update = async (custData) => {\n    let customerID = 0;\n    const customer = await Customer.findOne({ pageId: custData.pageId, userId: custData.userId }).exec();\n\n    if (customer && customer.id) {\n        customerID = customer.id;\n        const { first_name, last_name, phone, profile_pic, location, addrData } = custData;\n\n        let updateDb = false;\n        if (first_name || last_name || profile_pic) {\n            customer.first_name = first_name;\n            customer.last_name = last_name;\n            customer.profile_pic = profile_pic;\n            updateDb = true;\n        }\n        if (phone) {\n            customer.phone = phone;\n            updateDb = true;\n        }\n        if (location) {\n            customer.location_lat = location.lat;\n            customer.location_long = location.long;\n            customer.location_url = location.url;\n            updateDb = true;\n        }\n        if (addrData) {\n            if (addrData.manual_address)\n                customer.addr_manual = true;\n            else\n                customer.addr_manual = false;\n\n            customer.addr_formatted = addrData.formattedAddress;\n            customer.addr_street = addrData.street;\n            customer.addr_sublocality = addrData.sublocality;\n            customer.addr_streetnumber = addrData.street_number;\n            customer.addr_state = addrData.state;\n            customer.addr_city = addrData.city;\n            customer.addr_postalcode = addrData.postal_code;\n            updateDb = true;\n        }\n\n        if (updateDb) {\n            await customer.save();\n        }\n    } else {\n        const resultLastId = Customer.find({ pageId: custData.pageId })\n            .select('id')\n            .sort('-id')\n            .limit(1)\n            .exec();\n        let lastId = 0;\n        if (resultLastId && resultLastId.length) lastId = resultLastId[0];\n\n        const newRecord = new Customer({\n            id: lastId + 1,\n            userId: custData.userId,\n            pageId: custData.pageId,\n            first_name: custData.first_name,\n            last_name: custData.last_name,\n            profile_pic: custData.profile_pic,\n            email: custData.email,\n            phone: custData.phone,\n            addr_formatted: custData.addr ? custData.addr.formattedAddress : null,\n            addr_street: custData.addr ? custData.addr.street : null,\n            addr_sublocality: custData.addr ? custData.addr.sublocality : null,\n            addr_streetnumber: custData.addr ? custData.addr.street_number : null,\n            addr_state: custData.addr ? custData.addr.state : null,\n            addr_city: custData.addr ? custData.addr.city : null,\n            addr_postalcode: custData.addr ? custData.addr.postal_code : null,\n            location_lat: custData.location ? custData.location.lat : null,\n            location_long: custData.location ? custData.location.long : null,\n            location_url: custData.location ? custData.location.url : null,\n        });\n\n        await newRecord.save();\n        customerID = newRecord.id;\n    }\n    return customerID;\n}\n\nexport const formatAddrData = async addrData => {\n    let formattedAddressData = {}\n    formattedAddressData.formattedAddress = addrData.formatted_address;\n    const addComps = addrData.address_components;\n\n    addComps.forEach(element => {\n        element.types.forEach(type => {\n            if (type === 'street_number') {\n                formattedAddressData.street_number = element.long_name;\n            } else if (type === 'route') {\n                formattedAddressData.street = element.long_name;\n            } else if (type === 'sublocality' || type === 'sublocality_level_1') {\n                formattedAddressData.sublocality = element.long_name;\n            } else if (type === 'administrative_area_level_2') {\n                formattedAddressData.city = element.long_name;\n            } else if (type === 'administrative_area_level_1') {\n                formattedAddressData.state = element.long_name;\n            } else if (type === 'postal_code') {\n                formattedAddressData.postal_code = element.long_name;\n            }\n        });\n    });\n    return formattedAddressData;\n}\n\n\n"],"file":"customersController.js"}