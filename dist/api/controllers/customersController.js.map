{"version":3,"sources":["../../../src/api/controllers/customersController.js"],"names":["customer_get_all","req","res","sortObj","query","sort","rangeObj","range","queryObj","filter","filterObj","filterField","length","i","value","filterValues","Array","isArray","$in","currentUser","activePage","Customer","find","exec","err","result","status","json","message","errmsg","_rangeIni","_rangeEnd","offset","limit","_totalCount","resultArray","push","setHeader","util","format","customerGetAllErr","console","error","customer_get_one","params","id","pageId","customerId","queryParams","findOne","customer","total_spent","nb_orders","first_order","last_order","jsonCustomer","first_name","last_name","profile_pic","phone","addr_formatted","addr_city","addr_postalcode","createdAt","updatedAt","customer_update","body","doc","city","save","deleteManyCustomers","pageID","deleteMany","checkCustomerAddress","userID","location","getCustomerAddress","addressData","getAddressLocation","getCustomerById","userId","addr_street","formattedAddress","street","street_number","addr_streetnumber","sublocality","addr_sublocality","state","addr_state","postal_code","location_lat","location_long","arr","googleMapsAPI","process","env","response","info","data","error_message","response2","response3","response4","MY_GOOGLE_MAPS_APIKEY","response5","statusText","results","API_KEY","axios","get","lat","updateCustomer","custData","customerID","addrData","updateDb","location_url","url","manual_address","addr_manual","select","resultLastId","lastId","newRecord","email","addr","formatAddrData","formattedAddressData","formatted_address","addComps","address_components","forEach","element","types","type","long_name","notifyUserStopAuto","user","formattedUserId","indexOf","split"],"mappings":"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","sourcesContent":["import Customer from '../models/customers';\nimport axios from 'axios';\nimport util from 'util';\nimport stringCapitalizeName from 'string-capitalize-name';\nimport { shuffle } from '../util/util';\nimport { configSortQuery, configRangeQuery, configFilterQueryMultiple } from '../util/util';\nimport { getOrdersCustomerStat } from './ordersController';\nimport { emitEvent } from './redisController';\n\n// List all customers\nexport const customer_get_all = async (req, res) => {\n    try {\n        // Getting the sort from the requisition\n        let sortObj = configSortQuery(req.query.sort);\n        // Getting the range from the requisition\n        let rangeObj = configRangeQuery(req.query.range);\n\n        let queryObj = {};\n        if (req.query.filter) {\n            const filterObj = configFilterQueryMultiple(req.query.filter);\n\n            if (filterObj && filterObj.filterField && filterObj.filterField.length) {\n                for (let i = 0; i < filterObj.filterField.length; i++) {\n                    const filter = filterObj.filterField[i];\n                    const value = filterObj.filterValues[i];\n                    if (Array.isArray(value)) {\n                        queryObj[filter] = { $in: value };\n                    }\n                    else\n                        queryObj[filter] = value;\n                }\n            }\n        }\n        if (req.currentUser.activePage) {\n            queryObj[\"pageId\"] = req.currentUser.activePage;\n        }\n\n        Customer.find(queryObj).sort(sortObj).exec((err, result) => {\n            if (err) {\n                res.status(500).json({ message: err.errmsg });\n            } else {\n                let _rangeIni = 0;\n                let _rangeEnd = result.length;\n                if (rangeObj) {\n                    _rangeIni = rangeObj.offset <= result.length ? rangeObj.offset : result.length;\n                    _rangeEnd = (rangeObj.offset + rangeObj.limit) <= result.length ? rangeObj.offset + rangeObj.limit : result.length;\n                }\n                let _totalCount = result.length;\n                let resultArray = new Array();\n                for (let i = _rangeIni; i < _rangeEnd; i++) {\n                    resultArray.push(result[i])\n                }\n\n                res.setHeader('Content-Range', util.format(\"customers %d-%d/%d\", _rangeIni, _rangeEnd, _totalCount));\n                res.status(200).json(resultArray);\n            }\n        });\n    } catch (customerGetAllErr) {\n        console.error({ customerGetAllErr });\n        res.status(500).json({ message: err.message });\n    }\n};\n\n// List one record by filtering by ID\nexport const customer_get_one = async (req, res) => {\n    if (req.params && req.params.id) {\n        try {\n            const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n            const customerId = req.params.id;\n\n            let queryParams = {};\n            queryParams['id'] = customerId;\n            if (pageId) {\n                queryParams['pageId'] = pageId;\n            }\n\n            const customer = await Customer.findOne(queryParams).exec();\n            if (customer) {\n                const { total_spent, nb_orders, first_order, last_order } = await getOrdersCustomerStat({ pageId, customerId });\n\n                const jsonCustomer = {\n                    id: customer.id,\n                    pageId: customer.pageId,\n                    first_name: customer.first_name,\n                    last_name: customer.last_name,\n                    profile_pic: customer.profile_pic,\n                    phone: customer.phone,\n                    addr_formatted: customer.addr_formatted,\n                    addr_city: customer.addr_city,\n                    addr_postalcode: customer.addr_postalcode,\n                    createdAt: customer.createdAt,\n                    updatedAt: customer.updatedAt,\n                    total_spent: total_spent,\n                    nb_orders: nb_orders,\n                    first_order: first_order,\n                    last_order: last_order,\n                };\n\n                res.status(200).json(jsonCustomer);\n            } else {\n                res.status(500).json({ message: 'pos.customer.messages.no_customer_found' });\n            }\n        } catch (customerGetOneError) {\n            res.status(500).json({ message: customerGetOneError.message });\n        }\n    }\n}\n\nexport const customer_update = (req, res) => {\n    if (req.body && req.body.id) {\n        const pageId = req.currentUser.activePage;\n\n        Customer.findOne({ pageId: pageId, id: req.body.id }, (err, doc) => {\n            if (!err) {\n                doc.first_name = stringCapitalizeName(req.body.first_name);\n                doc.last_name = stringCapitalizeName(req.body.last_name);\n                doc.addr_city = stringCapitalizeName(req.body.city);\n                doc.addr_postalcode = req.body.addr_postalcode;\n                doc.save((err, result) => {\n                    if (err) {\n                        res.status(500).json({ message: err.errmsg });\n                    } else {\n                        res.status(200).json(result);\n                    }\n                });\n            } else {\n                res.status(500).json({ message: err.errmsg });\n            }\n        });\n    }\n}\n\n\n/**\n * Delete all records from a pageID\n * @param {*} pageID \n */\nexport const deleteManyCustomers = async (pageID) => {\n    return await Customer.deleteMany({ pageId: pageID }).exec();\n}\n\n\nexport const checkCustomerAddress = async (pageID, userID, location) => {\n    let addressData = await getCustomerAddress(pageID, userID);\n    if (addressData) {\n        return addressData;\n    } else {\n        addressData = await getAddressLocation(location);\n        if (addressData.status === 200) {\n            return addressData;\n        }\n        else return null;\n    }\n}\n\nexport const getCustomerById = async (pageID, id) => {\n    return await Customer.findOne({ pageId: pageID, id: id }).exec();\n}\n\nexport const getCustomerAddress = async (pageID, userID) => {\n\n    const customer = await Customer.findOne({ pageId: pageID, userId: userID }).exec();\n\n    if (customer) {\n        if (customer.addr_formatted || customer.addr_street) {\n            let addressData = {};\n            addressData.formattedAddress = customer.addr_formatted;\n            addressData.street = customer.addr_street;\n            addressData.street_number = customer.addr_streetnumber;\n            addressData.sublocality = customer.addr_sublocality;\n            addressData.state = customer.addr_state;\n            addressData.city = customer.addr_city;\n            addressData.postal_code = customer.addr_postalcode;\n            addressData.location_lat = customer.location_lat;\n            addressData.location_long = customer.location_long;\n            return addressData;\n        } else return null;\n    } else return null;\n}\n\nexport const getAddressLocation = async (location) => {\n    let arr = [1, 2, 3, 4];\n    arr = shuffle(arr); // select the apis randomically\n\n    const response = await googleMapsAPI(location, process.env['GOOGLE_MAPS_APIKEY' + arr[0]]);\n    console.info({ response });\n    if (response.status === 200) {\n        if (response.data.error_message && response.data.status === 'OVER_QUERY_LIMIT') {\n            const response2 = await googleMapsAPI(location, process.env['GOOGLE_MAPS_APIKEY' + arr[1]]);\n            if (response2.status === 200) {\n                if (response2.data.error_message && response2.data.status === 'OVER_QUERY_LIMIT') {\n                    const response3 = await googleMapsAPI(location, process.env['GOOGLE_MAPS_APIKEY' + arr[2]]);\n                    if (response3.status === 200) {\n                        if (response3.data.error_message && response3.data.status === 'OVER_QUERY_LIMIT') {\n                            const response4 = await googleMapsAPI(location, process.env['GOOGLE_MAPS_APIKEY' + arr[3]]);\n                            if (response4.status === 200) {\n                                if (response4.data.error_message && response4.data.status === 'OVER_QUERY_LIMIT') {\n                                    const response5 = await googleMapsAPI(location, process.env.MY_GOOGLE_MAPS_APIKEY);\n                                    if (response5.status === 200) {\n                                        if (response5.data.error_message && response5.data.status === 'OVER_QUERY_LIMIT') {\n                                            console.error(response5.status, response5.statusText);\n                                            return null;\n                                        } else return response5.data.results;\n                                    } else return null;\n                                } else return response4.data.results;\n                            } else return null;\n                        } else return response3.data.results;\n                    } else return null;\n                } else return response2.data.results;\n            } else return null;\n        } else return response.data.results;\n    } else return null;\n}\n\nconst googleMapsAPI = async (location, API_KEY) => {\n    console.info('using:' + API_KEY);\n    return await axios.get('https://maps.googleapis.com/maps/api/geocode/json', {\n        params: {\n            'latlng': location.lat + ',' + location.long,\n            'key': API_KEY,\n        }\n    });\n}\n\nexport const updateCustomer = async (custData) => {\n    let customerID = 0;\n    const customer = await Customer.findOne({ pageId: custData.pageId, userId: custData.userId }).exec();\n\n    if (customer && customer.id) {\n        customerID = customer.id;\n        const { first_name, last_name, phone, profile_pic, location, addrData } = custData;\n\n        let updateDb = false;\n        if (first_name || last_name || profile_pic) {\n            customer.first_name = first_name;\n            customer.last_name = last_name;\n            customer.profile_pic = profile_pic;\n            updateDb = true;\n        }\n        if (phone) {\n            customer.phone = phone;\n            updateDb = true;\n        }\n        if (location) {\n            customer.location_lat = location.lat;\n            customer.location_long = location.long;\n            customer.location_url = location.url;\n            updateDb = true;\n        }\n        if (addrData) {\n            if (addrData.manual_address)\n                customer.addr_manual = true;\n            else\n                customer.addr_manual = false;\n\n            customer.addr_formatted = addrData.formattedAddress;\n            customer.addr_street = addrData.street;\n            customer.addr_sublocality = addrData.sublocality;\n            customer.addr_streetnumber = addrData.street_number;\n            customer.addr_state = addrData.state;\n            customer.addr_city = addrData.city;\n            customer.addr_postalcode = addrData.postal_code;\n            updateDb = true;\n        }\n\n        if (updateDb) {\n            await customer.save();\n        }\n    } else {\n        const resultLastId = await Customer.find({ pageId: custData.pageId })\n            .select('id')\n            .sort('-id')\n            .limit(1)\n            .exec();\n        let lastId = 1;\n        if (resultLastId && resultLastId.length) lastId = resultLastId[0].id + 1;\n\n        const newRecord = new Customer({\n            id: lastId,\n            userId: custData.userId,\n            pageId: custData.pageId,\n            first_name: custData.first_name,\n            last_name: custData.last_name,\n            profile_pic: custData.profile_pic,\n            email: custData.email,\n            phone: custData.phone,\n            addr_formatted: custData.addr ? custData.addr.formattedAddress : null,\n            addr_street: custData.addr ? custData.addr.street : null,\n            addr_sublocality: custData.addr ? custData.addr.sublocality : null,\n            addr_streetnumber: custData.addr ? custData.addr.street_number : null,\n            addr_state: custData.addr ? custData.addr.state : null,\n            addr_city: custData.addr ? custData.addr.city : null,\n            addr_postalcode: custData.addr ? custData.addr.postal_code : null,\n            location_lat: custData.location ? custData.location.lat : null,\n            location_long: custData.location ? custData.location.long : null,\n            location_url: custData.location ? custData.location.url : null,\n        });\n\n        await newRecord.save();\n        customerID = newRecord.id;\n    }\n    return customerID;\n}\n\nexport const formatAddrData = async addrData => {\n    let formattedAddressData = {}\n    formattedAddressData.formattedAddress = addrData.formatted_address;\n    const addComps = addrData.address_components;\n\n    addComps.forEach(element => {\n        element.types.forEach(type => {\n            if (type === 'street_number') {\n                formattedAddressData.street_number = element.long_name;\n            } else if (type === 'route') {\n                formattedAddressData.street = element.long_name;\n            } else if (type === 'sublocality' || type === 'sublocality_level_1') {\n                formattedAddressData.sublocality = element.long_name;\n            } else if (type === 'administrative_area_level_2') {\n                formattedAddressData.city = element.long_name;\n            } else if (type === 'administrative_area_level_1') {\n                formattedAddressData.state = element.long_name;\n            } else if (type === 'postal_code') {\n                formattedAddressData.postal_code = element.long_name;\n            }\n        });\n    });\n    return formattedAddressData;\n}\n\n/**\n * Using Redis, communicate with server-webapp\n * @param {*} pageId\n * @param {*} userId\n * @param {*} user\n */\nexport const notifyUserStopAuto = async (pageId, userId, user) => {\n    try {\n        const formattedUserId = userId.indexOf('@') > -1 ? userId.split('@')[0] : userId;\n\n        const data = { id: formattedUserId, first_name: user.first_name }\n        emitEvent(pageId, 'talk-to-human', data);\n    } catch (error) {\n        console.error(error);\n    }\n}\n\n\n"],"file":"customersController.js"}