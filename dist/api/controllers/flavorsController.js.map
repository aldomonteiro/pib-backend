{"version":3,"sources":["../../../src/api/controllers/flavorsController.js"],"names":["flavor_get_all","req","res","sortObj","query","sort","rangeObj","range","queryObj","filter","filterObj","filterField","length","i","value","filterValues","Array","isArray","$in","currentUser","activePage","Flavor","find","exec","err","result","status","json","message","errmsg","_rangeIni","_rangeEnd","offset","limit","_totalCount","flavorsArray","toppings","pageId","tn","flavor","id","kind","createdAt","updatedAt","join","push","setHeader","util","format","flavor_get_one","params","findOne","doc","errMsg","flavor_create","body","newRecord","save","then","catch","console","error","code","flavor_update","flavor_delete","findOneAndRemove","deleteManyFlavors","pageID","deleteMany","getFlavors","queryFlavor","select","getFlavor","flavorID","getFlavorByName","flavorName","flavors","flavorsNames","stringResult","stringSimilarity","findBestMatch","bestMatch","rating","key","indexOf","target","log"],"mappings":"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","sourcesContent":["import Flavor from \"../models/flavors\";\nimport util from \"util\";\nimport stringSimilarity from 'string-similarity';\nimport stringCapitalizeName from 'string-capitalize-name';\nimport { configSortQuery, configRangeQuery, configFilterQueryMultiple } from '../util/util';\nimport { getToppings, getToppingsNames } from './toppingsController';\n\n// List all flavors\n// TODO: use filters in the query req.query\nexport const flavor_get_all = async (req, res) => {\n    // Getting the sort from the requisition\n    let sortObj = configSortQuery(req.query.sort);\n    // Getting the range from the requisition\n    let rangeObj = configRangeQuery(req.query.range);\n\n    let queryObj = {};\n    if (req.query.filter) {\n        const filterObj = configFilterQueryMultiple(req.query.filter);\n\n        if (filterObj && filterObj.filterField && filterObj.filterField.length) {\n            for (let i = 0; i < filterObj.filterField.length; i++) {\n                const filter = filterObj.filterField[i];\n                const value = filterObj.filterValues[i];\n                if (Array.isArray(value)) {\n                    queryObj[filter] = { $in: value };\n                }\n                else\n                    queryObj[filter] = value;\n            }\n        }\n    }\n    if (req.currentUser.activePage) {\n        queryObj[\"pageId\"] = req.currentUser.activePage;\n    }\n\n    Flavor.find(queryObj).sort(sortObj).exec(async (err, result) => {\n        if (err) {\n            res.status(500).json({ message: err.errmsg });\n        } else {\n            let _rangeIni = 0;\n            let _rangeEnd = result.length;\n            if (rangeObj) {\n                _rangeIni = rangeObj.offset <= result.length ? rangeObj.offset : result.length;\n                _rangeEnd = (rangeObj.offset + rangeObj.limit) <= result.length ? rangeObj.offset + rangeObj.limit : result.length;\n            }\n            let _totalCount = result.length;\n            let flavorsArray = new Array();\n            for (let i = _rangeIni; i < _rangeEnd; i++) {\n                const tn = await getToppingsNames(result[i].toppings, result[i].pageId);\n                let flavor = {\n                    id: result[i].id,\n                    flavor: result[i].flavor,\n                    kind: result[i].kind,\n                    toppings: result[i].toppings,\n                    createdAt: result[i].createdAt,\n                    updatedAt: result[i].updatedAt,\n                    tn: tn.join(),\n                }\n                flavorsArray.push(flavor)\n            }\n            res.setHeader('Content-Range', util.format(\"flavors %d-%d/%d\", _rangeIni, _rangeEnd, _totalCount));\n            res.status(200).json(flavorsArray);\n        }\n    });\n\n\n    // // Getting the sort from the requisition\n    // var sortObj = configSortQuery(req.query.sort);\n    // // Getting the range from the requisition\n    // var rangeObj = configRangeQuery(req.query.range);\n\n    // let options = {\n    //     offset: rangeObj['offset'],\n    //     limit: rangeObj['limit'],\n    //     sort: sortObj,\n    //     lean: true,\n    //     leanWithId: false,\n    // };\n\n    // var query = {};\n\n    // const pageID = req.currentUser.activePage;\n\n    // if (pageID) {\n    //     query = Flavor.find({ pageId: pageID });\n    // }\n\n    // Flavor.paginate(query, options, async (err, result) => {\n    //     if (err) {\n    //         res.status(500).json({ message: err.errmsg });\n    //     } else {\n    //         res.setHeader('Content-Range', util.format(\"flavors %d-%d/%d\", rangeObj['offset'], rangeObj['limit'], result.total));\n\n    //         for (var i = 0; i < result.docs.length; i++) {\n    //             const tn = await getToppings(result.docs[i].toppings, pageID);\n    //             for (var k = 0; k < tn.length; k++) {\n    //                 result.docs[i].tn = result.docs[i].tn ? result.docs[i].tn + ' ' + tn[k].topping : tn[k].topping;\n    //             }\n    //         }\n    //         res.status(200).json(result.docs);\n    //     }\n    // });\n};\n\n// List one record by filtering by ID\nexport const flavor_get_one = (req, res) => {\n    if (req.params && req.params.id) {\n\n        const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n\n        Flavor.findOne({ pageId: pageId, id: req.params.id }, (err, doc) => {\n            if (err) {\n                res.status(500).json({ message: err.errMsg });\n            }\n            else {\n                res.status(200).json(doc);\n            }\n        });\n    }\n}\n\n// CREATE A NEW RECORD\nexport const flavor_create = (req, res) => {\n    if (req.body) {\n\n        const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n\n        const newRecord = new Flavor({\n            id: req.body.id,\n            flavor: stringCapitalizeName(req.body.flavor),\n            kind: req.body.kind,\n            pageId: pageId,\n            toppings: req.body.toppings,\n        });\n\n        newRecord.save()\n            .then((result) => {\n                res.status(200).json(result);\n            })\n            .catch((err) => {\n                console.error(err);\n                if (err.code === 11000) {\n                    res.status(500).json({ message: 'pos.messages.duplicatedKey' });\n                } else {\n                    res.status(500).json({ message: err.errmsg });\n                }\n            });\n    }\n}\n\n// UPDATE\nexport const flavor_update = (req, res) => {\n    if (req.body && req.body.id) {\n\n        const pageId = req.currentUser.activePage;\n\n        Flavor.findOne({ pageId: pageId, id: req.body.id }, (err, doc) => {\n            if (!err) {\n                doc.flavor = stringCapitalizeName(req.body.flavor);\n                doc.kind = req.body.kind;\n                doc.toppings = req.body.toppings;\n\n                doc.save((err, result) => {\n                    if (err) {\n                        res.status(500).json({ message: err.errmsg });\n                    } else {\n                        res.status(200).json(result);\n                    }\n                });\n            } else {\n                res.status(500).json({ message: err.errmsg });\n            }\n        });\n    }\n}\n\n// DELETE\nexport const flavor_delete = (req, res) => {\n\n    const pageId = req.currentUser.activePage;\n\n    Flavor.findOneAndRemove({ pageId: pageId, id: req.params.id })\n        .then((result) => {\n            res.status(200).json(result);\n        })\n        .catch((err) => {\n            res.status(500).json({ message: err.errmsg });\n        });\n};\n\n/**\n * Delete all records from a pageID\n * @param {*} pageID \n */\nexport const deleteManyFlavors = async (pageID) => {\n    return await Flavor.deleteMany({ pageId: pageID }).exec();\n}\n\nexport const getFlavors = async (pageID) => {\n    var queryFlavor = Flavor.find({ pageId: pageID });\n    queryFlavor.sort('flavor');\n    queryFlavor.select('id flavor kind toppings');\n    return await queryFlavor.exec();\n}\n\nexport const getFlavor = async (pageID, flavorID) => {\n    var queryFlavor = Flavor.findOne({ pageId: pageID, id: flavorID });\n    queryFlavor.select('id flavor kind');\n    return await queryFlavor.exec();\n}\n\nexport const getFlavorByName = async (pageID, flavorName) => {\n    const flavors = await getFlavors(pageID);\n    var flavorsNames = new Array();\n\n    for (var i = 0; i < flavors.length; i++) {\n        flavorsNames.push(flavors[i].flavor);\n    }\n\n\n    const stringResult = stringSimilarity.findBestMatch(flavorName, flavorsNames);\n    /* stringSimilarity searching for 'Escarola e bacon', result:\n    { ratings:\n        [ { target: 'Quatro queijos', rating: 0.09090909090909091 },\n          { target: 'Frango com Catupiry', rating: 0.16 },\n          { target: 'Escarola', rating: 0.7777777777777778 },\n          { target: 'Escarola com bacon', rating: 0.9166666666666666 } ],\n       bestMatch: { target: 'Escarola com bacon', rating: 0.9166666666666666 } }\n        */\n\n    if (stringResult.bestMatch.rating > 0.6) {\n        const key = flavorsNames.indexOf(stringResult.bestMatch.target);\n        console.log(stringResult, flavorsNames, key, flavors);\n        return flavors[key];\n    } else {\n        return null;\n    }\n}"],"file":"flavorsController.js"}