{"version":3,"sources":["../../../src/api/controllers/flavorsController.js"],"names":["flavor_get_all","req","res","sortObj","query","sort","rangeObj","range","options","offset","limit","lean","leanWithId","pageID","currentUser","activePage","Flavor","find","pageId","paginate","err","result","status","json","message","errmsg","setHeader","util","format","total","i","docs","length","toppings","tn","k","topping","flavor_get_one","params","id","findOne","doc","errMsg","flavor_create","body","newRecord","flavor","kind","save","then","catch","console","error","code","flavor_update","flavor_delete","findOneAndRemove","deleteManyFlavors","deleteMany","exec","getFlavors","queryFlavor","select","getFlavor","flavorID","getFlavorByName","flavorName","flavors","flavorsNames","Array","push","stringResult","stringSimilarity","findBestMatch","bestMatch","rating","key","indexOf","target","log"],"mappings":"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","sourcesContent":["import Flavor from \"../models/flavors\";\nimport util from \"util\";\nimport stringSimilarity from 'string-similarity';\nimport stringCapitalizeName from 'string-capitalize-name';\nimport { configSortQuery, configRangeQuery } from '../util/util';\nimport { getToppings } from './toppingsController';\n\n// List all flavors\n// TODO: use filters in the query req.query\nexport const flavor_get_all = async (req, res) => {\n    // Getting the sort from the requisition\n    var sortObj = configSortQuery(req.query.sort);\n    // Getting the range from the requisition\n    var rangeObj = configRangeQuery(req.query.range);\n\n    let options = {\n        offset: rangeObj['offset'],\n        limit: rangeObj['limit'],\n        sort: sortObj,\n        lean: true,\n        leanWithId: false,\n    };\n\n    var query = {};\n\n    const pageID = req.currentUser.activePage;\n\n    if (pageID) {\n        query = Flavor.find({ pageId: pageID });\n    }\n\n    Flavor.paginate(query, options, async (err, result) => {\n        if (err) {\n            res.status(500).json({ message: err.errmsg });\n        } else {\n            res.setHeader('Content-Range', util.format(\"flavors %d-%d/%d\", rangeObj['offset'], rangeObj['limit'], result.total));\n\n            for (var i = 0; i < result.docs.length; i++) {\n                const tn = await getToppings(result.docs[i].toppings, pageID);\n                for (var k = 0; k < tn.length; k++) {\n                    result.docs[i].tn = result.docs[i].tn ? result.docs[i].tn + ' ' + tn[k].topping : tn[k].topping;\n                }\n            }\n            res.status(200).json(result.docs);\n        }\n    });\n};\n\n// List one record by filtering by ID\nexport const flavor_get_one = (req, res) => {\n    if (req.params && req.params.id) {\n\n        const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n\n        Flavor.findOne({ pageId: pageId, id: req.params.id }, (err, doc) => {\n            if (err) {\n                res.status(500).json({ message: err.errMsg });\n            }\n            else {\n                res.status(200).json(doc);\n            }\n        });\n    }\n}\n\n// CREATE A NEW RECORD\nexport const flavor_create = (req, res) => {\n    if (req.body) {\n\n        const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n\n        const newRecord = new Flavor({\n            id: req.body.id,\n            flavor: stringCapitalizeName(req.body.flavor),\n            kind: req.body.kind,\n            pageId: pageId,\n            toppings: req.body.toppings,\n        });\n\n        newRecord.save()\n            .then((result) => {\n                res.status(200).json(result);\n            })\n            .catch((err) => {\n                console.error(err);\n                if (err.code === 11000) {\n                    res.status(500).json({ message: 'pos.messages.duplicatedKey' });\n                } else {\n                    res.status(500).json({ message: err.errmsg });\n                }\n            });\n    }\n}\n\n// UPDATE\nexport const flavor_update = (req, res) => {\n    if (req.body && req.body.id) {\n\n        const pageId = req.currentUser.activePage;\n\n        Flavor.findOne({ pageId: pageId, id: req.body.id }, (err, doc) => {\n            if (!err) {\n                doc.flavor = stringCapitalizeName(req.body.flavor);\n                doc.kind = req.body.kind;\n                doc.toppings = req.body.toppings;\n\n                doc.save((err, result) => {\n                    if (err) {\n                        res.status(500).json({ message: err.errmsg });\n                    } else {\n                        res.status(200).json(result);\n                    }\n                });\n            } else {\n                res.status(500).json({ message: err.errmsg });\n            }\n        });\n    }\n}\n\n// DELETE\nexport const flavor_delete = (req, res) => {\n\n    const pageId = req.currentUser.activePage;\n\n    Flavor.findOneAndRemove({ pageId: pageId, id: req.params.id })\n        .then((result) => {\n            res.status(200).json(result);\n        })\n        .catch((err) => {\n            res.status(500).json({ message: err.errmsg });\n        });\n};\n\n/**\n * Delete all records from a pageID\n * @param {*} pageID \n */\nexport const deleteManyFlavors = async (pageID) => {\n    return await Flavor.deleteMany({ pageId: pageID }).exec();\n}\n\nexport const getFlavors = async (pageID) => {\n    var queryFlavor = Flavor.find({ pageId: pageID });\n    queryFlavor.sort('flavor');\n    queryFlavor.select('id flavor kind toppings');\n    return await queryFlavor.exec();\n}\n\nexport const getFlavor = async (pageID, flavorID) => {\n    var queryFlavor = Flavor.findOne({ pageId: pageID, id: flavorID });\n    queryFlavor.select('id flavor kind');\n    return await queryFlavor.exec();\n}\n\nexport const getFlavorByName = async (pageID, flavorName) => {\n    const flavors = await getFlavors(pageID);\n    var flavorsNames = new Array();\n\n    for (var i = 0; i < flavors.length; i++) {\n        flavorsNames.push(flavors[i].flavor);\n    }\n\n\n    const stringResult = stringSimilarity.findBestMatch(flavorName, flavorsNames);\n    /* stringSimilarity searching for 'Escarola e bacon', result:\n    { ratings:\n        [ { target: 'Quatro queijos', rating: 0.09090909090909091 },\n          { target: 'Frango com Catupiry', rating: 0.16 },\n          { target: 'Escarola', rating: 0.7777777777777778 },\n          { target: 'Escarola com bacon', rating: 0.9166666666666666 } ],\n       bestMatch: { target: 'Escarola com bacon', rating: 0.9166666666666666 } }\n        */\n\n    if (stringResult.bestMatch.rating > 0.6) {\n        const key = flavorsNames.indexOf(stringResult.bestMatch.target);\n        console.log(stringResult, flavorsNames, key, flavors);\n        return flavors[key];\n    } else {\n        return null;\n    }\n}"],"file":"flavorsController.js"}