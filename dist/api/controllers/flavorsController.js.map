{"version":3,"sources":["../../../src/api/controllers/flavorsController.js"],"names":["flavor_get_all","req","res","sortObj","query","sort","rangeObj","range","queryObj","filter","filterObj","filterField","length","i","value","filterValues","Array","isArray","$in","$regex","$options","currentUser","activePage","Flavor","find","exec","err","result","status","json","message","errmsg","_rangeIni","_rangeEnd","offset","limit","_totalCount","flavorsArray","flavor","id","categoryId","toppings","price","price_by_size","createdAt","updatedAt","push","setHeader","util","format","flavor_get_one","params","pageId","findOne","doc","errMsg","flavor_create","body","category","select","lastId","newRecord","save","then","console","error","code","flavor_update","info","_flavor","flavor_delete","findOneAndRemove","deleteManyFlavors","pageID","deleteMany","getFlavors","queryFlavor","getFlavor","flavorID","getFlavorByName","flavorName","flavors","flavorsNames","stringResult","stringSimilarity","findBestMatch","bestMatch","rating","key","indexOf","target","log"],"mappings":"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","sourcesContent":["import Flavor from '../models/flavors';\nimport util from 'util';\nimport stringSimilarity from 'string-similarity';\nimport stringCapitalizeName from 'string-capitalize-name';\nimport { configSortQuery, configRangeQuery, configFilterQueryMultiple, fixNonCapitalizeWords } from '../util/util';\nimport { getToppingsNames } from './toppingsController';\nimport { getCategory } from './categoriesController';\n\n// List all flavors\n// TODO: use filters in the query req.query\nexport const flavor_get_all = async (req, res) => {\n    // Getting the sort from the requisition\n    let sortObj = configSortQuery(req.query.sort);\n    // Getting the range from the requisition\n    let rangeObj = configRangeQuery(req.query.range);\n\n    let queryObj = {};\n    if (req.query.filter) {\n        const filterObj = configFilterQueryMultiple(req.query.filter);\n\n        if (filterObj && filterObj.filterField && filterObj.filterField.length) {\n            for (let i = 0; i < filterObj.filterField.length; i++) {\n                const filter = filterObj.filterField[i];\n                const value = filterObj.filterValues[i];\n                if (Array.isArray(value)) {\n                    queryObj[filter] = { $in: value };\n                } else if (filter === 'flavor') {\n                    queryObj[filter] = { $regex: value, $options: 'i' };\n                } else\n                    queryObj[filter] = value;\n            }\n        }\n    }\n    if (req.currentUser.activePage) {\n        queryObj['pageId'] = req.currentUser.activePage;\n    }\n\n    Flavor.find(queryObj).sort(sortObj).exec(async (err, result) => {\n        if (err) {\n            res.status(500).json({ message: err.errmsg });\n        } else {\n            let _rangeIni = 0;\n            let _rangeEnd = result.length;\n            if (rangeObj) {\n                _rangeIni = rangeObj.offset <= result.length ? rangeObj.offset : result.length;\n                _rangeEnd = (rangeObj.offset + rangeObj.limit) <= result.length ? rangeObj.offset + rangeObj.limit : result.length;\n            }\n            let _totalCount = result.length;\n            let flavorsArray = [];\n            for (let i = _rangeIni; i < _rangeEnd; i++) {\n                // const tn = await getToppingsNames(result[i].toppings, result[i].pageId);\n                let flavor = {\n                    id: result[i].id,\n                    flavor: result[i].flavor,\n                    categoryId: result[i].categoryId,\n                    toppings: result[i].toppings,\n                    price: result[i].price,\n                    price_by_size: result[i].price_by_size,\n                    createdAt: result[i].createdAt,\n                    updatedAt: result[i].updatedAt,\n                    // tn: tn.join(),\n                }\n                flavorsArray.push(flavor)\n            }\n            res.setHeader('Content-Range', util.format('flavors %d-%d/%d', _rangeIni, _rangeEnd, _totalCount));\n            res.status(200).json(flavorsArray);\n        }\n    });\n\n\n    // // Getting the sort from the requisition\n    // var sortObj = configSortQuery(req.query.sort);\n    // // Getting the range from the requisition\n    // var rangeObj = configRangeQuery(req.query.range);\n\n    // let options = {\n    //     offset: rangeObj['offset'],\n    //     limit: rangeObj['limit'],\n    //     sort: sortObj,\n    //     lean: true,\n    //     leanWithId: false,\n    // };\n\n    // var query = {};\n\n    // const pageID = req.currentUser.activePage;\n\n    // if (pageID) {\n    //     query = Flavor.find({ pageId: pageID });\n    // }\n\n    // Flavor.paginate(query, options, async (err, result) => {\n    //     if (err) {\n    //         res.status(500).json({ message: err.errmsg });\n    //     } else {\n    //         res.setHeader('Content-Range', util.format(\"flavors %d-%d/%d\", rangeObj['offset'], rangeObj['limit'], result.total));\n\n    //         for (var i = 0; i < result.docs.length; i++) {\n    //             const tn = await getToppings(result.docs[i].toppings, pageID);\n    //             for (var k = 0; k < tn.length; k++) {\n    //                 result.docs[i].tn = result.docs[i].tn ? result.docs[i].tn + ' ' + tn[k].topping : tn[k].topping;\n    //             }\n    //         }\n    //         res.status(200).json(result.docs);\n    //     }\n    // });\n};\n\n// List one record by filtering by ID\nexport const flavor_get_one = (req, res) => {\n    if (req.params && req.params.id) {\n\n        const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n\n        Flavor.findOne({ pageId: pageId, id: req.params.id }, (err, doc) => {\n            if (err) {\n                res.status(500).json({ message: err.errMsg });\n            } else {\n                res.status(200).json(doc);\n            }\n        });\n    }\n}\n\n// CREATE A NEW RECORD\nexport const flavor_create = async (req, res) => {\n    if (req.body) {\n\n        const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n\n        const { categoryId, price } = req.body;\n        let price_by_size = false;\n        if (categoryId) {\n            const category = await getCategory(pageId, categoryId);\n            if (category)\n                price_by_size = category.price_by_size;\n        }\n\n        if (price_by_size && price > 0) {\n            res.status(500).json({ message: 'pos.flavors.messages.priceNotAllowed' });\n        } else {\n            let { id } = req.body;\n\n            if (!id || id === 0) {\n                const lastId = await Flavor.find({ pageId: pageId }).select('id').sort('-id').limit(1).exec();\n                id = 1;\n                if (lastId && lastId.length)\n                    id = lastId[0].id + 1;\n            }\n\n            const newRecord = new Flavor({\n                id: id,\n                flavor: stringCapitalizeName(req.body.flavor),\n                categoryId: req.body.categoryId,\n                pageId: pageId,\n                toppings: req.body.toppings,\n                price: price,\n                price_by_size: price_by_size,\n            });\n\n            newRecord.save()\n                .then((result) => {\n                    res.status(200).json(result);\n                })\n                .catch((err) => {\n                    console.error(err);\n                    if (err.code === 11000) {\n                        res.status(500).json({ message: 'pos.messages.duplicatedKey' });\n                    } else {\n                        res.status(500).json({ message: err.errmsg });\n                    }\n                });\n        }\n    }\n}\n\n// UPDATE\nexport const flavor_update = async (req, res) => {\n    console.info('flavor_update:', req.params.id, req.body);\n\n    if (req.body && req.params.id) {\n\n        const pageId = req.currentUser.activePage;\n\n        const { id } = req.params;\n        const { flavor, categoryId, price, toppings } = req.body;\n\n        let price_by_size = false;\n        if (categoryId) {\n            const category = await getCategory(pageId, categoryId);\n            if (category)\n                price_by_size = category.price_by_size;\n        }\n\n        if (price_by_size && price > 0) {\n            res.status(500).json({ message: 'pos.flavors.messages.priceNotAllowed' });\n        } else {\n\n            Flavor.findOne({ pageId: pageId, id: id }, (err, doc) => {\n                if (!err) {\n                    if (flavor) {\n                        let _flavor = fixNonCapitalizeWords(stringCapitalizeName(flavor));\n                        doc.flavor = _flavor;\n                    }\n                    if (categoryId)\n                        doc.categoryId = categoryId;\n                    if (toppings)\n                        doc.toppings = toppings;\n                    if (price)\n                        doc.price = price;\n                    if (price_by_size)\n                        doc.price_by_size = price_by_size;\n                    doc.save((err, result) => {\n                        if (err) {\n                            res.status(500).json({ message: err.errmsg });\n                        } else {\n                            res.status(200).json(result);\n                        }\n                    });\n                } else {\n                    res.status(500).json({ message: err.errmsg });\n                }\n            });\n        }\n    }\n}\n\n// DELETE\nexport const flavor_delete = (req, res) => {\n\n    const pageId = req.currentUser.activePage;\n\n    Flavor.findOneAndRemove({ pageId: pageId, id: req.params.id })\n        .then((result) => {\n            res.status(200).json(result);\n        })\n        .catch((err) => {\n            res.status(500).json({ message: err.errmsg });\n        });\n};\n\n/**\n * Delete all records from a pageID\n * @param {*} pageID\n */\nexport const deleteManyFlavors = async (pageID) => {\n    return await Flavor.deleteMany({ pageId: pageID }).exec();\n}\n\nexport const getFlavors = async (pageID, categoryId, sort) => {\n    let query = {}\n    query['pageId'] = pageID;\n    if (categoryId)\n        query['categoryId'] = categoryId;\n\n    let queryFlavor = Flavor.find(query);\n    if (!sort)\n        queryFlavor.sort('flavor');\n    else queryFlavor.sort(sort);\n    queryFlavor.select('id pageId flavor categoryId toppings price price_by_size');\n    return await queryFlavor.exec();\n}\n\nexport const getFlavor = async (pageID, flavorID) => {\n    var queryFlavor = Flavor.findOne({ pageId: pageID, id: flavorID });\n    queryFlavor.select('id flavor categoryId price');\n    return await queryFlavor.exec();\n}\n\nexport const getFlavorByName = async (pageID, flavorName) => {\n    const flavors = await getFlavors(pageID);\n    var flavorsNames = [];\n\n    for (var i = 0; i < flavors.length; i++) {\n        flavorsNames.push(flavors[i].flavor);\n    }\n\n\n    const stringResult = stringSimilarity.findBestMatch(flavorName, flavorsNames);\n    /* stringSimilarity searching for 'Escarola e bacon', result:\n    { ratings:\n        [ { target: 'Quatro queijos', rating: 0.09090909090909091 },\n          { target: 'Frango com Catupiry', rating: 0.16 },\n          { target: 'Escarola', rating: 0.7777777777777778 },\n          { target: 'Escarola com bacon', rating: 0.9166666666666666 } ],\n       bestMatch: { target: 'Escarola com bacon', rating: 0.9166666666666666 } }\n        */\n\n    if (stringResult.bestMatch.rating > 0.6) {\n        const key = flavorsNames.indexOf(stringResult.bestMatch.target);\n        console.log(stringResult, flavorsNames, key, flavors);\n        return flavors[key];\n    } else {\n        return null;\n    }\n}\n"],"file":"flavorsController.js"}