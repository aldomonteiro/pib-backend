{"version":3,"sources":["../../../src/api/controllers/itemsController.js"],"names":["ITEMSTATUS_PENDING","ITEMSTATUS_COMPLETED","deleteManyItems","pageID","Items","deleteMany","pageId","exec","updateItem","orderData","orderId","currentItem","userId","qty","sizeId","flavorId","categoryId","price","completeItem","split","eraseSize","findOne","status","item","itemId","_split","_price","save","find","select","sort","limit","resultLastId","length","id","record","updateStatusSpecificItem","objectId","_id","mongoose","Types","ObjectId","getItems","completeItems","queryAuxTables","items","flavors","sizes","categories","i","flavor","size","category","name","deleteItem","orderID","itemID","result","console","error","deletePendingItem","reorderItems","seq","changedId","currentId","updateMany","$set","updateItemStatus","info","getItemsTotal","_total","cancelItems","err"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport Items from '../models/items';\nimport { getFlavors } from './flavorsController';\nimport { getOnePricingByFlavor } from './pricingsController';\nimport { getSizes } from './sizesController';\nimport { getCategories } from './categoriesController';\n\nconst ITEMSTATUS_PENDING = 0;\nconst ITEMSTATUS_COMPLETED = 1;\n\n\n/**\n * Delete all records from a pageID\n * @param {*} pageID\n */\nexport const deleteManyItems = async (pageID) => {\n    return await Items.deleteMany({ pageId: pageID }).exec();\n}\n\nexport const updateItem = async orderData => {\n    const { orderId, currentItem, userId, pageId,\n        qty, sizeId, flavorId, categoryId,\n        price, completeItem, split, eraseSize } = orderData;\n\n    if (sizeId || flavorId || categoryId || typeof completeItem === 'boolean' || eraseSize) {\n\n        const item = await Items.findOne({\n            orderId: orderId, userId: userId,\n            pageId: pageId, flavorId: null,\n            status: ITEMSTATUS_PENDING,\n        }).exec();\n\n        // when flavorId is set, a new item will be created.\n        if (item) {\n            if (qty) item.qty = qty;\n            if (sizeId) item.sizeId = sizeId;\n            if (eraseSize) item.sizeId = null;\n            if (flavorId) item.flavorId = flavorId;\n            if (categoryId) item.categoryId = categoryId;\n            if (price) item.price = price;\n            if (currentItem) item.itemId = currentItem;\n            if (split) item.split = split;\n            if (typeof completeItem === 'boolean')\n                item.status = completeItem === true ? ITEMSTATUS_COMPLETED : ITEMSTATUS_PENDING;\n\n            const _split = split || item.split;\n            const _price = price || item.price;\n\n            if (_split && _split > 1 && _price) {\n                item.price = _price / _split;\n            }\n\n            await item.save();\n        } else {\n            let resultLastId = await Items.find({ pageId: pageId, orderId: orderId }).select('id').sort('-id').limit(1).exec();\n            let itemId = 1;\n            if (resultLastId && resultLastId.length)\n                itemId = resultLastId[0].id + 1;\n\n            const record = new Items({\n                id: itemId,\n                orderId: orderId,\n                itemId: currentItem,\n                userId: userId,\n                pageId: pageId,\n                qty: qty || 1,\n                split: split || 1,\n                sizeId: sizeId,\n                flavorId: flavorId,\n                categoryId: categoryId,\n                price: price,\n                status: ITEMSTATUS_PENDING,\n            });\n            await record.save();\n        }\n    }\n}\n\nexport const updateStatusSpecificItem = async (objectId, status) => {\n    const item = await Items.findOne({ _id: mongoose.Types.ObjectId(objectId) }).exec();\n    if (item) {\n        item.status = status;\n        await item.save();\n    }\n    return item;\n}\n\n/**\n * Return all items from an orderId+pageId with flavor and size.\n * completeItems=true query aux tables. default is true.\n * completeItems=false do not query aux tables.\n * @param {*} orderData \n */\nexport const getItems = async orderData => {\n    const { orderId, pageId, completeItems } = orderData;\n\n    let queryAuxTables = false;\n    if (typeof completeItems !== 'undefined') {\n        queryAuxTables = completeItems;\n    }\n\n    const items = await Items.find({ orderId: orderId, pageId: pageId }).exec();\n\n    let flavors = [];\n    let sizes = [];\n    let categories = [];\n\n    if (queryAuxTables) {\n        flavors = await getFlavors(pageId);\n        sizes = await getSizes(pageId);\n        categories = await getCategories(pageId);\n    }\n\n    if (items && items.length) {\n        for (let i = 0; i < items.length; i++) {\n            if (items[i].flavorId && items[i].flavorId > 0) {\n                if (queryAuxTables) {\n                    for (let flavor of flavors) {\n                        if (flavor.id === items[i].flavorId) {\n                            items[i].flavor = flavor.flavor;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if (items[i].sizeId && items[i].sizeId > 0) {\n                if (queryAuxTables) {\n                    for (let size of sizes) {\n                        if (size.id === items[i].sizeId) {\n                            items[i].size = size.size;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if (items[i].categoryId && items[i].categoryId > 0) {\n                if (queryAuxTables) {\n                    for (let category of categories) {\n                        if (category.id === items[i].categoryId) {\n                            items[i].category = category.name;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return items;\n    } else {\n        return null;\n    }\n}\n\n/**\n * \n * @param {*} pageId\n * @param {*} userId\n * @param {*} itemId\n */\nexport const deleteItem = async (pageID, orderID, itemID) => {\n    try {\n        const result = await Items.deleteMany({ pageId: pageID, orderId: orderID, itemId: itemID }).exec();\n        return result;\n    } catch (err) {\n        console.error(err);\n        return null;\n    }\n}\n\nexport const deletePendingItem = async (pageID, orderID) => {\n    try {\n        const result = await Items.deleteMany({ pageId: pageID, orderId: orderID, status: ITEMSTATUS_PENDING }).exec();\n        return result;\n    } catch (err) {\n        console.error(err);\n        return null;\n    }\n}\n\nexport const reorderItems = async (pageID, orderID) => {\n    try {\n        const items = await Items.find({ pageId: pageID, orderId: orderID }).sort({ itemId: 1 }).exec();\n\n        let seq = 1;\n        let changedId = 0;\n        for (let item of items) {\n            let currentId = item.itemId;\n            if (currentId !== changedId) {\n                if (currentId !== seq) {\n                    await Items.updateMany(\n                        { pageId: pageID, orderId: orderID, itemId: currentId },\n                        { $set: { itemId: seq } }).exec();\n                }\n                changedId = currentId;\n                seq++;\n            }\n        }\n        return seq;\n    } catch (err) {\n        console.error(err);\n        return null;\n    }\n}\n\n/**\n * Updates all items with same itemID, setting their status as COMPLETED. It is used\n * when an item has split, and the status is PENDING whle the user is choosing all the flavors.\n * @param {*} pageID\n * @param {*} orderID\n * @param {*} itemID\n */\nexport const updateItemStatus = async (pageID, orderID, itemID) => {\n    try {\n        const result = await Items.updateMany(\n            { pageId: pageID, orderId: orderID, itemId: itemID },\n            { $set: { status: ITEMSTATUS_COMPLETED } }).exec();\n        console.info(result);\n        return result;\n    } catch (err) {\n        console.error(err);\n        return null;\n    }\n}\n\n/**\n * Calculate total price of an orderId+pageId\n * @param {*} orderData\n */\nexport const getItemsTotal = async orderData => {\n    const { orderId, pageId } = orderData;\n    const items = await getItems({ orderId, pageId, completeItems: false });\n\n    let _total = 0;\n\n    if (items && items.length) {\n        for (const item of items) {\n            _total += item.price ? item.price : 0;\n        }\n    }\n\n    return _total;\n}\n\nexport const cancelItems = async (pageId, orderId) => {\n    await Items.deleteMany({ pageId: pageId, orderId: orderId }, (err) => {\n        if (err) {\n            console.error(`Items.deleteMany orderId: ${orderId}`);\n            console.error(err);\n        }\n    });\n}\n\n"],"file":"itemsController.js"}