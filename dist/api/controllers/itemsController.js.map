{"version":3,"sources":["../../../src/api/controllers/itemsController.js"],"names":["ITEMSTATUS_PENDING","ITEMSTATUS_COMPLETED","item_get_all","req","res","sortObj","query","sort","rangeObj","range","filterObj","filter","pageID","currentUser","activePage","queryParamOrder","queryParamItem","$gte","ORDERSTATUS_CONFIRMED","$lt","ORDERSTATUS_REJECTED","filterField","length","i","value","filterValues","endsWith","date","DateTime","fromISO","replace","rezonedIni","set","hour","minute","second","setZone","toISO","rezonedEnd","plus","days","Object","values","Order","find","exec","orders","ordersArray","map","order","id","$in","$gt","console","info","Items","items","flavors","itemsStats","flavor","itemStat","categoryId","itemsSold","amountSold","firstSale","lastSale","flavorId","price","updatedAt","push","_rangeIni","_rangeEnd","offset","limit","_totalCount","resultArray","k","field","keys","a","b","setHeader","util","format","status","json","error","itemGetAllErr","message","deleteManyItems","deleteMany","pageId","updateItem","orderData","orderId","currentItem","userId","qty","sizeId","completeItem","split","eraseSize","commentsItem","findOne","item","itemId","comments","_split","_price","save","select","resultLastId","record","updateStatusSpecificItem","objectId","_id","mongoose","Types","ObjectId","getItems","completeItems","queryAuxTables","sizes","categories","size","category","name","deleteItem","orderID","itemID","result","deletePendingItem","reorderItems","seq","changedId","currentId","updateMany","$set","updateItemStatus","updateItemDirect","data","updateOne","getItemsTotal","_total","cancelItems","err"],"mappings":"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","sourcesContent":["import mongoose from 'mongoose';\nimport { DateTime } from 'luxon';\nimport util from 'util';\nimport Order from '../models/orders';\nimport Items from '../models/items';\nimport { getFlavors } from './flavorsController';\nimport { getSizes } from './sizesController';\nimport { getCategories } from './categoriesController';\nimport {\n    configSortQuery, configRangeQueryNew,\n    configFilterQueryMultiple,\n} from '../util/util';\nimport { ORDERSTATUS_CONFIRMED, ORDERSTATUS_REJECTED } from './ordersController';\n\nconst ITEMSTATUS_PENDING = 0;\nconst ITEMSTATUS_COMPLETED = 1;\n\n// List all orders\n// TODO: use filters in the query req.query\nexport const item_get_all = async (req, res) => {\n    try {\n        const sortObj = configSortQuery(req.query.sort);\n        const rangeObj = configRangeQueryNew(req.query.range);\n        const filterObj = configFilterQueryMultiple(req.query.filter);\n        const pageID = req.currentUser ? req.currentUser.activePage : null;\n\n        if (pageID) {\n            let queryParamOrder = {};\n            let queryParamItem = {};\n            queryParamOrder['pageId'] = pageID;\n            queryParamItem['pageId'] = pageID;\n\n            queryParamOrder['status'] = { $gte: ORDERSTATUS_CONFIRMED, $lt: ORDERSTATUS_REJECTED };\n\n            if (filterObj && filterObj.filterField && filterObj.filterField.length) {\n                for (let i = 0; i < filterObj.filterField.length; i++) {\n                    let filter = filterObj.filterField[i];\n                    const value = filterObj.filterValues[i];\n                    if (filter.endsWith('_rangestart')) {\n                        const date = DateTime.fromISO(value);\n                        filter = filter.replace('_rangestart', '');\n                        const rezonedIni = date.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                        queryParamOrder[filter] = { $gte: rezonedIni.toISO() };\n                    } else if (filter.endsWith('_rangeend')) {\n                        const date = DateTime.fromISO(value);\n                        filter = filter.replace('_rangeend', '');\n                        const rezonedIni = date.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                        const rezonedEnd = rezonedIni.plus({ days: 1 });\n                        if (queryParamOrder[filter])\n                            queryParamOrder[filter] = { $gte: Object.values(queryParamOrder[filter])[0], $lt: rezonedEnd.toISO() };\n                        else\n                            queryParamOrder[filter] = { $lt: rezonedEnd.toISO() };\n                    } else {\n                        queryParamItem[filter] = value;\n                    }\n                }\n            }\n\n            const orders = await Order.find(queryParamOrder).exec();\n            const ordersArray = orders.map(order => order.id);\n\n            queryParamItem['orderId'] = { $in: ordersArray };\n            queryParamItem['flavorId'] = { $gt: 0 };\n\n            console.info(queryParamOrder);\n            console.info(queryParamItem);\n\n            const items = await Items.find(queryParamItem).sort('flavorId').exec();\n            const flavors = await getFlavors(pageID, queryParamItem['categoryId'], 'id');\n\n            let i = 0;\n            const itemsStats = [];\n            for (let flavor of flavors) {\n                const itemStat = {\n                    id: flavor.id,\n                    flavor: flavor.flavor,\n                    categoryId: flavor.categoryId,\n                    itemsSold: 0,\n                    amountSold: 0,\n                    firstSale: null,\n                    lastSale: null,\n                }\n\n                while (1) {\n                    if (i < items.length) {\n                        if (items[i].flavorId === flavor.id) {\n                            itemStat.itemsSold = itemStat.itemsSold + 1;\n                            itemStat.amountSold = itemStat.amountSold + items[i].price;\n                            if (!itemStat.firstSale || items[i].updatedAt < itemStat.firstSale)\n                                itemStat.firstSale = items[i].updatedAt;\n                            if (!itemStat.lastSale || items[i].updatedAt > itemStat.lastSale)\n                                itemStat.lastSale = items[i].updatedAt;\n                        } else\n                            break;\n                    } else\n                        break;\n                    i++\n                }\n                itemsStats.push(itemStat);\n            }\n\n            let _rangeIni = 0;\n            let _rangeEnd = itemsStats.length;\n            if (rangeObj) {\n                _rangeIni = rangeObj.offset <= itemsStats.length ? rangeObj.offset : itemsStats.length;\n                _rangeEnd = (rangeObj.offset + rangeObj.limit) <= itemsStats.length ? rangeObj.offset + rangeObj.limit : itemsStats.length;\n            }\n            let _totalCount = itemsStats.length;\n            let resultArray = [];\n\n            if (itemsStats && itemsStats.length > 0) {\n                for (let k = _rangeIni; k < _rangeEnd; k++) {\n                    resultArray.push(itemsStats[k]);\n                }\n\n                // https://stackoverflow.com/a/1129270/7948731\n                if (sortObj) {\n                    const field = Object.keys(sortObj)[0];\n                    if (sortObj[field] === 'ASC')\n                        resultArray.sort((a, b) => a[field] > b[field] ? 1 : b[field] > a[field] ? -1 : 0);\n                    else\n                        resultArray.sort((a, b) => b[field] > a[field] ? 1 : a[field] > b[field] ? -1 : 0);\n                }\n            }\n            // All lists must have an ID field, if not, React-admin throws a Content-Range error.\n            // https://marmelab.com/react-admin/FAQ.html#can-i-have-custom-identifiersprimary-keys-for-my-resources\n            res.setHeader('Content-Range', util.format('items %d-%d/%d', _rangeIni, _rangeEnd, _totalCount));\n            res.status(200).json(resultArray);\n        } else {\n            res.setHeader('Content-Range', 'items 0-0/0');\n            res.status(200).json([]);\n        }\n    } catch (itemGetAllErr) {\n        console.error({ itemGetAllErr })\n        res.status(500).json({ message: itemGetAllErr.message });\n    }\n}\n\n/**\n * Delete all records from a pageID\n * @param {*} pageID\n */\nexport const deleteManyItems = async (pageID) => {\n    return await Items.deleteMany({ pageId: pageID }).exec();\n}\n\nexport const updateItem = async orderData => {\n    const { orderId, currentItem, userId, pageId,\n        qty, sizeId, flavorId, categoryId,\n        price, completeItem, split, eraseSize, commentsItem } = orderData;\n\n    if (sizeId || flavorId || categoryId || typeof completeItem === 'boolean' || eraseSize) {\n\n        const item = await Items.findOne({\n            orderId: orderId, userId: userId,\n            pageId: pageId, flavorId: null,\n            status: ITEMSTATUS_PENDING,\n        }).exec();\n\n        // when flavorId is set, a new item will be created.\n        if (item) {\n            if (qty) item.qty = qty;\n            if (sizeId) item.sizeId = sizeId;\n            if (eraseSize) item.sizeId = null;\n            if (flavorId) item.flavorId = flavorId;\n            if (categoryId) item.categoryId = categoryId;\n            if (price) item.price = price;\n            if (currentItem) item.itemId = currentItem;\n            if (split) item.split = split;\n            if (commentsItem) item.comments = commentsItem;\n            if (typeof completeItem === 'boolean')\n                item.status = completeItem === true ? ITEMSTATUS_COMPLETED : ITEMSTATUS_PENDING;\n\n            const _split = split || item.split;\n            const _price = price || item.price;\n\n            if (_split && _split > 1 && _price) {\n                item.price = _price / _split;\n            }\n\n            await item.save();\n        } else {\n            let resultLastId = await Items.find({ pageId: pageId, orderId: orderId }).select('id').sort('-id').limit(1).exec();\n            let itemId = 1;\n            if (resultLastId && resultLastId.length)\n                itemId = resultLastId[0].id + 1;\n\n            const record = new Items({\n                id: itemId,\n                orderId: orderId,\n                itemId: currentItem,\n                userId: userId,\n                pageId: pageId,\n                qty: qty || 1,\n                split: split || 1,\n                sizeId: sizeId,\n                flavorId: flavorId,\n                categoryId: categoryId,\n                price: price,\n                status: ITEMSTATUS_PENDING,\n            });\n            await record.save();\n        }\n    }\n}\n\nexport const updateStatusSpecificItem = async (objectId, status) => {\n    const item = await Items.findOne({ _id: mongoose.Types.ObjectId(objectId) }).exec();\n    if (item) {\n        item.status = status;\n        await item.save();\n    }\n    return item;\n}\n\n/**\n * Return all items from an orderId+pageId with flavor and size.\n * completeItems=true query aux tables. default is true.\n * completeItems=false do not query aux tables.\n * @param {*} orderData \n */\nexport const getItems = async orderData => {\n    const { orderId, pageId, completeItems } = orderData;\n\n    let queryAuxTables = false;\n    if (typeof completeItems !== 'undefined') {\n        queryAuxTables = completeItems;\n    }\n\n    const items = await Items.find({ orderId: orderId, pageId: pageId }).exec();\n\n    let flavors = [];\n    let sizes = [];\n    let categories = [];\n\n    if (queryAuxTables) {\n        flavors = await getFlavors(pageId);\n        sizes = await getSizes(pageId);\n        categories = await getCategories(pageId);\n    }\n\n    if (items && items.length) {\n        for (let i = 0; i < items.length; i++) {\n            if (items[i].flavorId && items[i].flavorId > 0) {\n                if (queryAuxTables) {\n                    for (let flavor of flavors) {\n                        if (flavor.id === items[i].flavorId) {\n                            items[i].flavor = flavor.flavor;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if (items[i].sizeId && items[i].sizeId > 0) {\n                if (queryAuxTables) {\n                    for (let size of sizes) {\n                        if (size.id === items[i].sizeId) {\n                            items[i].size = size.size;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if (items[i].categoryId && items[i].categoryId > 0) {\n                if (queryAuxTables) {\n                    for (let category of categories) {\n                        if (category.id === items[i].categoryId) {\n                            items[i].category = category.name;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return items;\n    } else {\n        return null;\n    }\n}\n\n/**\n * \n * @param {*} pageId\n * @param {*} userId\n * @param {*} itemId\n */\nexport const deleteItem = async (pageID, orderID, itemID) => {\n    try {\n        const result = await Items.deleteMany({ pageId: pageID, orderId: orderID, itemId: itemID }).exec();\n        return result;\n    } catch (err) {\n        console.error(err);\n        return null;\n    }\n}\n\nexport const deletePendingItem = async (pageID, orderID) => {\n    try {\n        const result = await Items.deleteMany({ pageId: pageID, orderId: orderID, status: ITEMSTATUS_PENDING }).exec();\n        return result;\n    } catch (err) {\n        console.error(err);\n        return null;\n    }\n}\n\nexport const reorderItems = async (pageID, orderID) => {\n    try {\n        const items = await Items.find({ pageId: pageID, orderId: orderID }).sort({ itemId: 1 }).exec();\n\n        let seq = 1;\n        let changedId = 0;\n        for (let item of items) {\n            let currentId = item.itemId;\n            if (currentId !== changedId) {\n                if (currentId !== seq) {\n                    await Items.updateMany(\n                        { pageId: pageID, orderId: orderID, itemId: currentId },\n                        { $set: { itemId: seq } }).exec();\n                }\n                changedId = currentId;\n                seq++;\n            }\n        }\n        return seq;\n    } catch (err) {\n        console.error(err);\n        return null;\n    }\n}\n\n/**\n * Updates all items with same itemID, setting their status as COMPLETED. It is used\n * when an item has split, and the status is PENDING whle the user is choosing all the flavors.\n * @param {*} pageID\n * @param {*} orderID\n * @param {*} itemID\n */\nexport const updateItemStatus = async (pageID, orderID, itemID) => {\n    try {\n        const result = await Items.updateMany(\n            { pageId: pageID, orderId: orderID, itemId: itemID },\n            { $set: { status: ITEMSTATUS_COMPLETED } }).exec();\n        console.info(result);\n        return result;\n    } catch (err) {\n        console.error(err);\n        return null;\n    }\n}\n\n/**\n * @param {*} pageID\n * @param {*} orderID\n * @param {*} itemID\n */\nexport const updateItemDirect = async (pageID, orderID, itemID, data) => {\n    try {\n        const result = await Items.updateOne(\n            { pageId: pageID, orderId: orderID, id: itemID },\n            { $set: { comments: data } }).exec();\n        console.info(result);\n        return result;\n    } catch (err) {\n        console.error(err);\n        return null;\n    }\n}\n\n\n/**\n * Calculate total price of an orderId+pageId\n * @param {*} orderData\n */\nexport const getItemsTotal = async orderData => {\n    const { orderId, pageId } = orderData;\n    const items = await getItems({ orderId, pageId, completeItems: false });\n\n    let _total = 0;\n\n    if (items && items.length) {\n        for (const item of items) {\n            _total += item.price ? item.price : 0;\n        }\n    }\n\n    return _total;\n}\n\nexport const cancelItems = async (pageId, orderId) => {\n    await Items.deleteMany({ pageId: pageId, orderId: orderId }, (err) => {\n        if (err) {\n            console.error(`Items.deleteMany orderId: ${orderId}`);\n            console.error(err);\n        }\n    });\n}\n\n"],"file":"itemsController.js"}