{"version":3,"sources":["../../../src/api/controllers/ordersController.js"],"names":["ORDERSTATUS_PENDING","ORDERSTATUS_CONFIRMED","ORDERSTATUS_CANCELLED","ORDERSTATUS_DELIVERED","order_get_all","req","res","console","info","query","filter","sortObj","sort","rangeObj","range","filterObj","queryParam","currentUser","activePage","filterValues","filterField","$in","Order","find","exec","findError","result","error","status","json","message","_rangeIni","_rangeEnd","length","offset","limit","_totalCount","ordersArray","Array","i","order","orderId","id","pageId","items","jsonOrder","customerId","userId","status2","qty_total","total","createdAt","push","setHeader","util","format","orderGetAllErr","order_get_one","params","findOne","jsonItems","forEach","item","jsonItem","flavorId","sizeId","price","qty","split","flavor","size","orderGetOneError","updateOrder","orderData","location","user","phone","addrData","completeItem","confirmOrder","waitingForAddress","waitingFor","currentItem","calcTotal","originalSplit","eraseSplit","customerID","customerData","first_name","last_name","profile_pic","location_lat","lat","location_long","long","location_url","url","currentItemSplit","currentItemSize","address","formattedAddress","item_complete","save","select","resultLastId","record","updateOrderError","getOrderPending","isComplete","_order","_items","completeOrder","headerOrder","getOrdersCustomerStat","orders","total_spent","nb_orders","first_order","Date","now","last_order"],"mappings":"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","sourcesContent":["import Order from '../models/orders';\nimport util from \"util\";\nimport { updateItem, getItems, getItemsTotal } from './itemsController';\nimport { customer_update } from './customersController';\nimport { configSortQuery, configRangeQueryNew, configFilterQuery } from '../util/util';\n\nconst ORDERSTATUS_PENDING = 0;\nconst ORDERSTATUS_CONFIRMED = 1;\nconst ORDERSTATUS_CANCELLED = 2;\nconst ORDERSTATUS_DELIVERED = 3;\n\n// List all orders\n// TODO: use filters in the query req.query\nexport const order_get_all = async (req, res) => {\n    try {\n        console.info(req.query.filter);\n\n        const sortObj = configSortQuery(req.query.sort);\n        const rangeObj = configRangeQueryNew(req.query.range);\n        const filterObj = configFilterQuery(req.query.filter);\n\n        let queryParam = {};\n        if (req.currentUser.activePage) {\n            queryParam['pageId'] = req.currentUser.activePage;\n        }\n\n        if (filterObj) {\n            if (typeof filterObj.filterValues === 'Array') {\n                queryParam[filterObj.filterField] = { $in: filterObj.filterValues };\n            } else {\n                queryParam[filterObj.filterField] = filterObj.filterValues;\n            }\n        }\n\n        Order.find(queryParam).sort(sortObj).exec(async (findError, result) => {\n            if (findError) {\n                console.error({ findError });\n                res.status(500).json({ message: findError.message });\n            } else {\n                let _rangeIni = 0;\n                let _rangeEnd = result.length;\n                if (rangeObj) {\n                    _rangeIni = rangeObj.offset <= result.length ? rangeObj.offset : result.length;\n                    _rangeEnd = (rangeObj.offset + rangeObj.limit) <= result.length ? rangeObj.offset + rangeObj.limit : result.length;\n                }\n                let _totalCount = result.length;\n                let ordersArray = new Array();\n                for (let i = _rangeIni; i < _rangeEnd; i++) {\n                    const order = result[i];\n                    const items = await getItems({ orderId: order.id, pageId: order.pageId });\n                    let jsonOrder = {\n                        id: order.id,\n                        pageId: order.pageId,\n                        customerId: order.customerId,\n                        userId: order.userId,\n                        status: order.status,\n                        status2: order.status2,\n                        qty_total: order.qty_total,\n                        total: order.total,\n                        createdAt: order.createdAt,\n                        items: items,\n                    }\n                    ordersArray.push(jsonOrder);\n                }\n                res.setHeader('Content-Range', util.format(\"orders %d-%d/%d\", _rangeIni, _rangeEnd, _totalCount));\n                res.status(200).json(ordersArray);\n            }\n        });\n    } catch (orderGetAllErr) {\n        console.error({ orderGetAllErr })\n        res.status(500).json({ message: orderGetAllErr.message });\n    }\n};\n\n// List one record by filtering by ID\nexport const order_get_one = async (req, res) => {\n    if (req.params && req.params.id) {\n        try {\n            const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n            const order = await Order.findOne({ pageId: pageId, id: req.params.id });\n            const items = await getItems({ orderId: order.id, pageId: pageId });\n            let jsonItems = [];\n            items.forEach(item => {\n                let jsonItem = {\n                    id: item.id,\n                    flavorId: item.flavorId,\n                    sizeId: item.sizeId,\n                    price: item.price,\n                    qty: item.qty,\n                    split: item.split,\n                    flavor: item.flavor,\n                    size: item.size,\n                }\n                jsonItems.push(jsonItem);\n            });\n            let jsonOrder = {\n                id: order.id,\n                customerId: order.customerId,\n                createdAt: order.createdAt,\n                qty_total: order.qty_total,\n                status: order.status,\n                status2: order.status2,\n                total: order.total,\n                items: jsonItems,\n            }\n            res.status(200).json(jsonOrder);\n        } catch (orderGetOneError) {\n            console.error({ orderGetOneError });\n            res.status(500).json({ message: orderGetOneError.message });\n        }\n    }\n}\n\n\nexport const updateOrder = async orderData => {\n    try {\n        const { pageId, userId, qty, location, user, phone, addrData, completeItem, confirmOrder, waitingForAddress, waitingFor, currentItem, sizeId, calcTotal, split, originalSplit, eraseSplit } = orderData;\n        let customerID = 0;\n        let customerData = {}\n        customerData.pageId = pageId;\n        customerData.userId = userId;\n        if (user) {\n            const { first_name, last_name, profile_pic } = user;\n            customerData.first_name = first_name;\n            customerData.last_name = last_name;\n            customerData.profile_pic = profile_pic;\n        }\n        customerData.phone = phone;\n        customerData.location = location;\n        customerData.addrData = addrData;\n        customerID = await customer_update(customerData);\n        const order = await Order.findOne({ pageId: pageId, userId: userId, status: ORDERSTATUS_PENDING }).exec();\n\n        if (order) {\n            orderData.orderId = order.id;\n\n            let updateOrder = false;\n            if (location) {\n                order.location_lat = location.lat;\n                order.location_long = location.long;\n                order.location_url = location.url;\n                updateOrder = true;\n            }\n\n            if (currentItem) {\n                order.currentItem = currentItem;\n                updateOrder = true;\n            }\n\n            if (qty) {\n                order.qty_total = qty;\n                updateOrder = true;\n\n                // order has total quantity.\n                // items are always 1. this variable will be passed to updateItem\n                orderData.qty = 1;\n            }\n\n            // when I have a split, I am forcing size and qty\n            if (typeof split === 'number') {\n                order.currentItemSplit = split;\n                orderData.sizeId = order.currentItemSize;\n                orderData.qty = 1;\n\n                updateOrder = true;\n            }\n\n            if (originalSplit) {\n                // split increments the items number (+originalSplit)\n                //  and removes 1 (that was the original quantity asked by the user)\n                order.qty_total = order.qty_total + originalSplit - 1;\n                // saving the originalSplit in the order and... \n                order.originalSplit = originalSplit;\n                // ...always saving the split as originalSplit in item.\n                // because the split in the order will be decreased until 1\n                orderData.split = originalSplit;\n                updateOrder = true;\n            }\n\n            // eraseSplit is sent when I am gonna ask the user\n            // about the next pizza.\n            if (eraseSplit) {\n                order.originalSplit = null;\n                order.currentItemSplit = null;\n                updateOrder = true;\n            }\n\n            if (customerID > 0) {\n                order.customerId = customerID;\n                updateOrder = true;\n            }\n\n            if (phone) {\n                order.phone = phone;\n                updateOrder = true;\n            }\n            if (addrData) {\n                order.address = addrData.formattedAddress;\n                updateOrder = true;\n            }\n\n            if (sizeId) {\n                order.currentItemSize = sizeId;\n                updateOrder = true;\n            }\n\n            if (completeItem) {\n                if (order.item_complete) order.item_complete = order.item_complete + 1;\n                else order.item_complete = 1;\n                updateOrder = true;\n            }\n\n            if (confirmOrder) {\n                order.status = ORDERSTATUS_CONFIRMED;\n                updateOrder = true;\n            } else {\n                // when updateorder with flavor, I dont have neither split nor originalSplit\n                // but, if the order has an originalSplit, I am going to send it to the item.\n                // This code should run only if I am not confirming the order.\n                if (order.originalSplit && order.originalSplit > 1) {\n                    orderData.split = order.originalSplit;\n                    updateOrder = true;\n                }\n            }\n\n            if (typeof waitingForAddress === 'boolean') {\n                order.waitingForAddress = waitingForAddress;\n                updateOrder = true;\n            }\n\n            if (waitingFor) {\n                order.waitingFor = waitingFor;\n                updateOrder = true;\n            }\n\n            if (typeof calcTotal === 'boolean') {\n                const total = await getItemsTotal({ orderId: order.id, pageId: order.pageId });\n                if (total > 0 && total !== order.total) {\n                    order.total = total;\n                    updateOrder = true;\n                }\n            }\n\n            if (updateOrder)\n                await order.save();\n\n            await updateItem(orderData);\n        } else {\n            // const count = await Order.find({ pageId: pageId }).count().exec();\n            // let orderId = 1;\n            // if (count) orderId = count + 1;\n\n            const resultLastId = await Order.find({ pageId: pageId }).select('id').sort('-id').limit(1).exec();\n            let orderId = 1;\n            if (resultLastId && resultLastId.length) orderId = resultLastId[0].id + 1;\n\n            const record = new Order({\n                id: orderId,\n                pageId: pageId,\n                userId: userId,\n                qty_total: qty ? qty : 0,\n                location_lat: location ? location.lat : null,\n                location_long: location ? location.long : null,\n                location_url: location ? location.url : null,\n                waitingForAddress: typeof waitingForAddress === 'boolean' ? waitingForAddress : false,\n                status: ORDERSTATUS_PENDING,\n            });\n            await record.save();\n            orderData.orderId = record.id;\n            await updateItem(orderData);\n        }\n    } catch (updateOrderError) {\n        console.error({ updateOrderError });\n        throw updateOrderError;\n    }\n}\n\nexport const getOrderPending = async orderData => {\n    const { userId, pageId, isComplete } = orderData;\n\n    const _order = await Order.findOne({ userId: userId, pageId: pageId, status: ORDERSTATUS_PENDING }).exec();\n    if (_order) {\n        if (isComplete && isComplete === true) {\n            const _items = await getItems({ orderId: _order.id, pageId: pageId });\n\n            const completeOrder = {\n                order: _order,\n                items: _items,\n            };\n\n            return completeOrder;\n        } else {\n            const headerOrder = {\n                order: _order,\n            }\n            return headerOrder;\n        }\n    } else return null;\n}\n\nexport const getOrdersCustomerStat = async orderData => {\n    const { pageId, customerId } = orderData;\n\n    const orders = await Order.find({ pageId: pageId, customerId: customerId }).select('createdAt total').sort('createdAt').exec();\n    let total_spent = 0;\n    let nb_orders = 0;\n    let first_order = Date.now();\n    let last_order = null;\n    for (const order of orders) {\n        total_spent += order.total;\n        nb_orders += 1;\n\n        if (first_order >= order.createdAt) {\n            first_order = order.createdAt;\n        }\n        if (last_order <= order.createdAt) {\n            last_order = order.createdAt;\n        }\n    }\n    return { total_spent, nb_orders, first_order, last_order };\n}\n\n"],"file":"ordersController.js"}