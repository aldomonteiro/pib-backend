{"version":3,"sources":["../../../src/api/controllers/ordersController.js"],"names":["ORDERSTATUS_PENDING","ORDERSTATUS_CONFIRMED","ORDERSTATUS_CANCELLED","ORDERSTATUS_DELIVERED","order_get_all","req","res","sortObj","query","sort","rangeObj","range","options","offset","limit","lean","leanWithId","pageID","currentUser","activePage","Order","find","pageId","paginate","err","result","status","json","message","errmsg","docs","order","orderId","id","items","setHeader","util","format","total","order_get_one","params","findOne","doc","errMsg","updateOrder","orderData","userId","qty","location","user","phone","addrData","completeItem","confirmOrder","waitingForAddress","waitingFor","sizeId","customerID","customerData","first_name","last_name","profile_pic","exec","location_lat","lat","location_long","long","location_url","url","qty_total","customerId","address","formattedAddress","currentItemSize","item_complete","save","select","resultLastId","length","console","info","record","saved","error","updateOrderError","getOrderPending","isComplete","_order","_items","completeOrder","headerOrder"],"mappings":"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","sourcesContent":["import Order from '../models/orders';\nimport util from \"util\";\nimport { updateItem, getItems } from './itemsController';\nimport { customer_update } from './customersController';\nimport { configSortQuery, configRangeQuery } from '../util/util';\n\nconst ORDERSTATUS_PENDING = 0;\nconst ORDERSTATUS_CONFIRMED = 1;\nconst ORDERSTATUS_CANCELLED = 2;\nconst ORDERSTATUS_DELIVERED = 3;\n\n// List all orders\n// TODO: use filters in the query req.query\nexport const order_get_all = async (req, res) => {\n    // Getting the sort from the requisition\n    var sortObj = configSortQuery(req.query.sort);\n    // Getting the range from the requisition\n    var rangeObj = configRangeQuery(req.query.range);\n\n    let options = {\n        offset: rangeObj['offset'],\n        limit: rangeObj['limit'],\n        sort: sortObj,\n        lean: true,\n        leanWithId: false,\n    };\n\n    let query = {};\n    let pageID = null;\n    if (req.currentUser.activePage) {\n        pageID = req.currentUser.activePage;\n        query = Order.find({ pageId: pageID });\n    }\n\n    Order.paginate(query, options, async (err, result) => {\n        if (err) {\n            res.status(500).json({ message: err.errmsg });\n        } else {\n            for (let order of result.docs) {\n                const items = await getItems({ orderId: order.id, pageId: order.pageId });\n                order.items = items;\n            }\n            res.setHeader('Content-Range', util.format(\"orders %d-%d/%d\", rangeObj['offset'], rangeObj['limit'], result.total));\n            res.status(200).json(result.docs);\n        }\n    });\n};\n\n// List one record by filtering by ID\nexport const order_get_one = (req, res) => {\n    if (req.params && req.params.id) {\n        const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n        Order.findOne({ pageId: pageId, id: req.params.id }, (err, doc) => {\n            if (err) {\n                res.status(500).json({ message: err.errMsg });\n            }\n            else {\n                res.status(200).json(doc);\n            }\n        });\n    }\n}\n\n\nexport const updateOrder = async orderData => {\n    try {\n        const { pageId, userId, qty, location, user, phone, addrData, completeItem, confirmOrder, waitingForAddress, waitingFor, sizeId } = orderData;\n        let customerID = 0;\n        let customerData = {}\n        customerData.pageId = pageId;\n        customerData.userId = userId;\n        if (user) {\n            const { first_name, last_name, profile_pic } = user;\n            customerData.first_name = first_name;\n            customerData.last_name = last_name;\n            customerData.profile_pic = profile_pic;\n        }\n        customerData.phone = phone;\n        customerData.location = location;\n        customerData.addrData = addrData;\n        customerID = await customer_update(customerData);\n        const order = await Order.findOne({ pageId: pageId, userId: userId, status: ORDERSTATUS_PENDING }).exec();\n\n        if (order) {\n            orderData.orderId = order.id;\n\n            let updateOrder = false;\n            if (location) {\n                order.location_lat = location.lat;\n                order.location_long = location.long;\n                order.location_url = location.url;\n                updateOrder = true;\n            }\n            if (qty) {\n                order.qty_total = qty;\n                updateOrder = true;\n\n                // order has total quantity.\n                // items are always 1. this variable will be passed to updateItem\n                orderData.qty = 1;\n            }\n            if (customerID > 0) {\n                order.customerId = customerID;\n                updateOrder = true;\n            }\n\n            if (phone) {\n                order.phone = phone;\n                updateOrder = true;\n            }\n            if (addrData) {\n                order.address = addrData.formattedAddress;\n                updateOrder = true;\n            }\n\n            if (sizeId) {\n                order.currentItemSize = sizeId;\n                updateOrder = true;\n            }\n\n            if (completeItem) {\n                if (order.item_complete) order.item_complete = order.item_complete + 1;\n                else order.item_complete = 1;\n                updateOrder = true;\n            }\n\n            if (confirmOrder) {\n                order.status = ORDERSTATUS_CONFIRMED;\n                updateOrder = true;\n            }\n\n            if (typeof waitingForAddress === 'boolean') {\n                order.waitingForAddress = waitingForAddress;\n                updateOrder = true;\n            }\n\n            if (waitingFor) {\n                order.waitingFor = waitingFor;\n                updateOrder = true;\n            }\n\n            if (updateOrder)\n                await order.save();\n\n            await updateItem(orderData);\n        } else {\n            // const count = await Order.find({ pageId: pageId }).count().exec();\n            // let orderId = 1;\n            // if (count) orderId = count + 1;\n\n            const resultLastId = await Order.find({ pageId: pageId }).select('id').sort('-id').limit(1).exec();\n            let orderId = 1;\n            if (resultLastId && resultLastId.length) orderId = resultLastId[0].id + 1;\n\n            console.info({ resultLastId });\n\n            const record = new Order({\n                id: orderId,\n                pageId: pageId,\n                userId: userId,\n                qty_total: qty ? qty : 0,\n                location_lat: location ? location.lat : null,\n                location_long: location ? location.long : null,\n                location_url: location ? location.url : null,\n                waitingForAddress: typeof waitingForAddress === 'boolean' ? waitingForAddress : false,\n                status: ORDERSTATUS_PENDING,\n            });\n            const saved = await record.save();\n            orderData.orderId = saved.id;\n            await updateItem(orderData);\n        }\n    } catch (updateOrderError) {\n        console.error({ updateOrderError });\n        throw (error);\n    }\n}\n\nexport const getOrderPending = async orderData => {\n    const { userId, pageId, isComplete } = orderData;\n\n    const _order = await Order.findOne({ userId: userId, pageId: pageId, status: ORDERSTATUS_PENDING }).exec();\n    if (_order) {\n        if (isComplete && isComplete === true) {\n            const _items = await getItems({ orderId: _order.id, pageId: pageId });\n\n            const completeOrder = {\n                order: _order,\n                items: _items,\n            };\n\n            return completeOrder;\n        } else {\n            const headerOrder = {\n                order: _order,\n            }\n            return headerOrder;\n        }\n    } else return null;\n}\n"],"file":"ordersController.js"}