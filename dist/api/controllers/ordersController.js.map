{"version":3,"sources":["../../../src/api/controllers/ordersController.js"],"names":["ORDERSTATUS_PENDING","ORDERSTATUS_CONFIRMED","ORDERSTATUS_DELIVERED","ORDERSTATUS_CANCELLED","order_get_all","req","res","sortObj","query","sort","rangeObj","range","filterObj","filter","queryParam","currentUser","activePage","filterField","length","i","value","filterValues","$in","date","DateTime","fromISO","invalid","nextDay","plus","days","$gte","toISODate","$lt","console","info","Order","find","exec","findError","result","error","status","json","message","_rangeIni","_rangeEnd","offset","limit","_totalCount","ordersArray","Array","order","orderId","id","pageId","items","jsonOrder","customerId","userId","status2","qty_total","total","createdAt","push","setHeader","util","format","orderGetAllErr","order_get_one","params","getOrderJson","orderGetOneError","order_update","body","findOne","doc","sent_shipping_notification","local","save","jsonItems","forEach","item","jsonItem","flavorId","sizeId","beverageId","beverage","price","qty","split","flavor","size","getOrderJsonErr","Error","updateOrder","orderData","location","user","phone","addrData","completeItem","confirmOrder","waitingForAddress","waitingFor","currentItem","calcTotal","originalSplit","eraseSplit","noBeverage","customerID","customerData","first_name","last_name","profile_pic","location_lat","lat","location_long","long","location_url","url","currentItemSplit","currentItemSize","address","formattedAddress","item_complete","no_beverage","select","resultLastId","record","updateOrderError","getOrderPending","isComplete","_order","_items","completeOrder","headerOrder","getOrdersCustomerStat","orders","total_spent","nb_orders","first_order","Date","now","last_order"],"mappings":"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","sourcesContent":["import Order from '../models/orders';\nimport util from \"util\";\nimport { updateItem, getItems, getItemsTotal } from './itemsController';\nimport { customer_update } from './customersController';\nimport { configSortQuery, configRangeQueryNew, configFilterQueryMultiple } from '../util/util';\nimport { DateTime } from 'luxon';\n// import { Bot, Elements } from 'facebook-messenger-bot';\n// import { getOnePageToken } from './pagesController';\nimport { sendShippingNotification } from '../bot/botController';\nconst ORDERSTATUS_PENDING = 0;\nconst ORDERSTATUS_CONFIRMED = 1;\nconst ORDERSTATUS_DELIVERED = 2;\nconst ORDERSTATUS_CANCELLED = 9;\n\n// List all orders\n// TODO: use filters in the query req.query\nexport const order_get_all = async (req, res) => {\n    try {\n        const sortObj = configSortQuery(req.query.sort);\n        const rangeObj = configRangeQueryNew(req.query.range);\n        const filterObj = configFilterQueryMultiple(req.query.filter);\n\n        let queryParam = {};\n        if (req.currentUser.activePage) {\n            queryParam['pageId'] = req.currentUser.activePage;\n        }\n\n        if (filterObj.filterField && filterObj.filterField.length) {\n            for (let i = 0; i < filterObj.filterField.length; i++) {\n                const filter = filterObj.filterField[i];\n                const value = filterObj.filterValues[i];\n                if (typeof value === 'Array') {\n                    queryParam[filter] = { $in: value };\n                } else {\n                    const date = DateTime.fromISO(value);\n                    if (!date.invalid) { // is a date\n                        const nextDay = date.plus({ days: 1 });\n                        queryParam[filter] = { $gte: date.toISODate(), $lt: nextDay.toISODate() };\n                    } else\n                        queryParam[filter] = value;\n                }\n            }\n        }\n\n        console.info(req.query.filter, filterObj, queryParam);\n\n        Order.find(queryParam).sort(sortObj).exec(async (findError, result) => {\n            if (findError) {\n                console.error({ findError });\n                res.status(500).json({ message: findError.message });\n            } else {\n                let _rangeIni = 0;\n                let _rangeEnd = result.length;\n                if (rangeObj) {\n                    _rangeIni = rangeObj.offset <= result.length ? rangeObj.offset : result.length;\n                    _rangeEnd = (rangeObj.offset + rangeObj.limit) <= result.length ? rangeObj.offset + rangeObj.limit : result.length;\n                }\n                let _totalCount = result.length;\n                let ordersArray = new Array();\n                for (let i = _rangeIni; i < _rangeEnd; i++) {\n                    const order = result[i];\n                    const items = await getItems({ orderId: order.id, pageId: order.pageId });\n                    let jsonOrder = {\n                        id: order.id,\n                        pageId: order.pageId,\n                        customerId: order.customerId,\n                        userId: order.userId,\n                        status: order.status,\n                        status2: order.status2,\n                        qty_total: order.qty_total,\n                        total: order.total,\n                        createdAt: order.createdAt,\n                        items: items,\n                    }\n                    ordersArray.push(jsonOrder);\n                }\n                res.setHeader('Content-Range', util.format(\"orders %d-%d/%d\", _rangeIni, _rangeEnd, _totalCount));\n                res.status(200).json(ordersArray);\n            }\n        });\n    } catch (orderGetAllErr) {\n        console.error({ orderGetAllErr })\n        res.status(500).json({ message: orderGetAllErr.message });\n    }\n};\n\n// List one record by filtering by ID\nexport const order_get_one = async (req, res) => {\n    if (req.params && req.params.id) {\n        try {\n            const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n            const jsonOrder = await getOrderJson(pageId, req.params.id);\n            res.status(200).json(jsonOrder);\n        } catch (orderGetOneError) {\n            console.error({ orderGetOneError });\n            res.status(500).json({ message: orderGetOneError.message });\n        }\n    }\n}\n\n// UPDATE\nexport const order_update = async (req, res) => {\n    if (req.body && req.body.id) {\n        try {\n            const pageId = req.currentUser.activePage;\n            const doc = await Order.findOne({ pageId: pageId, id: req.body.id });\n            if (req.body.status2 === 'ordered') {\n                doc.status = ORDERSTATUS_CONFIRMED;\n            } else if (req.body.status2 === 'delivered') {\n                doc.status = ORDERSTATUS_DELIVERED;\n            } else if (req.body.status2 === 'cancelled') {\n                doc.status = ORDERSTATUS_DELIVERED;\n            }\n\n            if (doc.status === ORDERSTATUS_DELIVERED) {\n                if (!doc.sent_shipping_notification) {\n                    console.info(\"I am going to send to \" + doc.userId + \", about the order number:\" + doc.id + \" a shipping notification\");\n                    await sendShippingNotification(doc.pageId, doc.userId, doc.id);\n                    doc.sent_shipping_notification = DateTime.local();\n                }\n            }\n\n            await doc.save();\n            const jsonOrder = await getOrderJson(pageId, doc.id);\n\n\n            res.status(200).json(jsonOrder);\n        }\n        catch (orderUpdateErr) {\n            console.error(orderUpdateErr);\n            res.status(500).json({ message: orderUpdateErr.message });\n        }\n    }\n}\n\n// export const sendShippingNotification = async order => {\n//     const { accessToken } = await getOnePageToken(order.pageId);\n\n//     const _txt = 'O seu pedido número ' + order.id + ' acabou de sair para entrega. Bom apetite!';\n\n//     const out = new Elements();\n//     out.add({ text: _txt });\n//     await Bot.send_message_tag(accessToken, order.userId, out);\n// }\n\n// List one record by filtering by ID\nexport const getOrderJson = async (pageId, orderId) => {\n    try {\n        const order = await Order.findOne({ pageId: pageId, id: orderId });\n        const items = await getItems({ pageId: pageId, orderId: orderId });\n        let jsonItems = [];\n        items.forEach(item => {\n            let jsonItem = {\n                id: item.id,\n                flavorId: item.flavorId,\n                sizeId: item.sizeId,\n                beverageId: item.beverageId,\n                beverage: item.beverage,\n                price: item.price,\n                qty: item.qty,\n                split: item.split,\n                flavor: item.flavor,\n                size: item.size,\n            }\n            jsonItems.push(jsonItem);\n        });\n        let jsonOrder = {\n            id: order.id,\n            customerId: order.customerId,\n            createdAt: order.createdAt,\n            qty_total: order.qty_total,\n            status: order.status,\n            status2: order.status2,\n            total: order.total,\n            items: jsonItems,\n        }\n        return jsonOrder;\n    } catch (getOrderJsonErr) {\n        console.error({ getOrderJsonErr });\n        throw new Error(getOrderJsonErr.message);\n    }\n}\n\n\nexport const updateOrder = async orderData => {\n    try {\n        const { pageId, userId, qty, location, user,\n            phone, addrData, completeItem, confirmOrder,\n            waitingForAddress, waitingFor, currentItem, sizeId, calcTotal,\n            split, originalSplit, eraseSplit, noBeverage } = orderData;\n\n        let customerID = 0;\n        let customerData = {}\n        customerData.pageId = pageId;\n        customerData.userId = userId;\n        if (user) {\n            const { first_name, last_name, profile_pic } = user;\n            customerData.first_name = first_name;\n            customerData.last_name = last_name;\n            customerData.profile_pic = profile_pic;\n        }\n        customerData.phone = phone;\n        customerData.location = location;\n        customerData.addrData = addrData;\n        customerID = await customer_update(customerData);\n        const order = await Order.findOne({ pageId: pageId, userId: userId, status: ORDERSTATUS_PENDING }).exec();\n\n        if (order) {\n            orderData.orderId = order.id;\n\n            let updateOrder = false;\n            if (location) {\n                order.location_lat = location.lat;\n                order.location_long = location.long;\n                order.location_url = location.url;\n                updateOrder = true;\n            }\n\n            if (currentItem) {\n                order.currentItem = currentItem;\n                updateOrder = true;\n            }\n\n            if (qty) {\n                order.qty_total = qty;\n                updateOrder = true;\n\n                // order has total quantity.\n                // items are always 1. this variable will be passed to updateItem\n                orderData.qty = 1;\n            }\n\n            // when I have a split, I am forcing size and qty\n            if (typeof split === 'number') {\n                order.currentItemSplit = split;\n                orderData.sizeId = order.currentItemSize;\n                orderData.qty = 1;\n\n                updateOrder = true;\n            }\n\n            if (originalSplit) {\n                // split increments the items number (+originalSplit)\n                //  and removes 1 (that was the original quantity asked by the user)\n                order.qty_total = order.qty_total + originalSplit - 1;\n                // saving the originalSplit in the order and... \n                order.originalSplit = originalSplit;\n                // ...always saving the split as originalSplit in item.\n                // because the split in the order will be decreased until 1\n                orderData.split = originalSplit;\n                updateOrder = true;\n            }\n\n            // eraseSplit is sent when I am gonna ask the user\n            // about the next pizza.\n            if (eraseSplit) {\n                order.originalSplit = null;\n                order.currentItemSplit = null;\n                updateOrder = true;\n            }\n\n            if (customerID > 0) {\n                order.customerId = customerID;\n                updateOrder = true;\n            }\n\n            if (phone) {\n                order.phone = phone;\n                updateOrder = true;\n            }\n            if (addrData) {\n                order.address = addrData.formattedAddress;\n                updateOrder = true;\n            }\n\n            if (sizeId) {\n                order.currentItemSize = sizeId;\n                updateOrder = true;\n            }\n\n            if (completeItem) {\n                if (order.item_complete) order.item_complete = order.item_complete + 1;\n                else order.item_complete = 1;\n                updateOrder = true;\n            }\n\n            if (confirmOrder) {\n                order.status = ORDERSTATUS_CONFIRMED;\n                updateOrder = true;\n            } else {\n                // when updateorder with flavor, I dont have neither split nor originalSplit\n                // but, if the order has an originalSplit, I am going to send it to the item.\n                // This code should run only if I am not confirming the order.\n                if (order.originalSplit && order.originalSplit > 1) {\n                    orderData.split = order.originalSplit;\n                    updateOrder = true;\n                }\n            }\n\n            if (typeof waitingForAddress === 'boolean') {\n                order.waitingForAddress = waitingForAddress;\n                updateOrder = true;\n            }\n\n            if (waitingFor) {\n                order.waitingFor = waitingFor;\n                updateOrder = true;\n            }\n\n            if (typeof calcTotal === 'boolean') {\n                const total = await getItemsTotal({ orderId: order.id, pageId: order.pageId });\n                if (total > 0 && total !== order.total) {\n                    order.total = total;\n                    updateOrder = true;\n                }\n            }\n\n            if (typeof noBeverage === 'boolean') {\n                order.no_beverage = noBeverage;\n                updateOrder = true;\n            }\n\n            if (updateOrder)\n                await order.save();\n\n            await updateItem(orderData);\n        } else {\n            // const count = await Order.find({ pageId: pageId }).count().exec();\n            // let orderId = 1;\n            // if (count) orderId = count + 1;\n\n            const resultLastId = await Order.find({ pageId: pageId }).select('id').sort('-id').limit(1).exec();\n            let orderId = 1;\n            if (resultLastId && resultLastId.length) orderId = resultLastId[0].id + 1;\n\n            const record = new Order({\n                id: orderId,\n                pageId: pageId,\n                userId: userId,\n                qty_total: qty ? qty : 0,\n                location_lat: location ? location.lat : null,\n                location_long: location ? location.long : null,\n                location_url: location ? location.url : null,\n                waitingForAddress: typeof waitingForAddress === 'boolean' ? waitingForAddress : false,\n                status: ORDERSTATUS_PENDING,\n            });\n            await record.save();\n            orderData.orderId = record.id;\n            await updateItem(orderData);\n        }\n    } catch (updateOrderError) {\n        console.error({ updateOrderError });\n        throw updateOrderError;\n    }\n}\n\nexport const getOrderPending = async orderData => {\n    const { userId, pageId, isComplete } = orderData;\n\n    const _order = await Order.findOne({ userId: userId, pageId: pageId, status: ORDERSTATUS_PENDING }).exec();\n    if (_order) {\n        if (isComplete && isComplete === true) {\n            const _items = await getItems({ orderId: _order.id, pageId: pageId });\n\n            const completeOrder = {\n                order: _order,\n                items: _items,\n            };\n\n            return completeOrder;\n        } else {\n            const headerOrder = {\n                order: _order,\n            }\n            return headerOrder;\n        }\n    } else return null;\n}\n\nexport const getOrdersCustomerStat = async orderData => {\n    const { pageId, customerId } = orderData;\n\n    const orders = await Order.find({ pageId: pageId, customerId: customerId }).select('createdAt total').sort('createdAt').exec();\n    let total_spent = 0;\n    let nb_orders = 0;\n    let first_order = Date.now();\n    let last_order = null;\n    for (const order of orders) {\n        total_spent += order.total;\n        nb_orders += 1;\n\n        if (first_order >= order.createdAt) {\n            first_order = order.createdAt;\n        }\n        if (last_order <= order.createdAt) {\n            last_order = order.createdAt;\n        }\n    }\n    return { total_spent, nb_orders, first_order, last_order };\n}\n\n"],"file":"ordersController.js"}