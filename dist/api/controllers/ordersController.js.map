{"version":3,"sources":["../../../src/api/controllers/ordersController.js"],"names":["ORDERSTATUS_PENDING","ORDERSTATUS_CONFIRMED","ORDERSTATUS_CANCELLED","ORDERSTATUS_DELIVERED","updateOrder","orderData","pageId","userId","qty","location","user","phone","addrData","completeItem","confirmOrder","waitingForAddress","waitingFor","first_name","last_name","profile_pic","Order","findOne","status","exec","order","orderId","id","location_lat","lat","location_long","long","location_url","url","qty_total","address","formattedAddress","item_complete","save","find","select","sort","limit","resultLastId","length","console","info","record","saved","error","getOrderPending","isComplete","_order","_items","completeOrder","items","headerOrder"],"mappings":"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","sourcesContent":["import Order from '../models/orders';\nimport { updateItem, getItems } from './itemsController';\nimport { customer_update } from './customersController';\nimport { throwError } from 'rxjs';\n\nconst ORDERSTATUS_PENDING = 0;\nconst ORDERSTATUS_CONFIRMED = 1;\nconst ORDERSTATUS_CANCELLED = 2;\nconst ORDERSTATUS_DELIVERED = 3;\n\nexport const updateOrder = async orderData => {\n    try {\n        const { pageId, userId, qty, location, user, phone, addrData, completeItem, confirmOrder, waitingForAddress, waitingFor } = orderData;\n\n        if (user) {\n            const { first_name, last_name, profile_pic } = user;\n            await customer_update({ pageId, userId, first_name, last_name, profile_pic })\n        } else if (phone) {\n            await customer_update({ pageId, userId, phone })\n        } else if (location) {\n            await customer_update({ pageId, userId, location })\n        } else if (addrData) {\n            await customer_update({ pageId, userId, addrData })\n        }\n\n        const order = await Order.findOne({ pageId: pageId, userId: userId, status: ORDERSTATUS_PENDING }).exec();\n\n        if (order) {\n            orderData.orderId = order.id;\n\n            let updateOrder = false;\n            if (location) {\n                order.location_lat = location.lat;\n                order.location_long = location.long;\n                order.location_url = location.url;\n                updateOrder = true;\n            }\n            if (qty) {\n                order.qty_total = qty;\n                updateOrder = true;\n\n                // order has total quantity.\n                // items are always 1. this variable will be passed to updateItem\n                orderData.qty = 1;\n            }\n            if (phone) {\n                order.phone = phone;\n                updateOrder = true;\n            }\n            if (addrData) {\n                order.address = addrData.formattedAddress;\n                updateOrder = true;\n            }\n\n            if (completeItem) {\n                if (order.item_complete) order.item_complete = order.item_complete + 1;\n                else order.item_complete = 1;\n                updateOrder = true;\n            }\n\n            if (confirmOrder) {\n                order.status = ORDERSTATUS_CONFIRMED;\n                updateOrder = true;\n            }\n\n            if (typeof waitingForAddress === 'boolean') {\n                order.waitingForAddress = waitingForAddress;\n                updateOrder = true;\n            }\n\n            if (waitingFor) {\n                order.waitingFor = waitingFor;\n                updateOrder = true;\n            }\n\n            if (updateOrder)\n                await order.save();\n\n            await updateItem(orderData);\n        } else {\n            // const count = await Order.find({ pageId: pageId }).count().exec();\n            // let orderId = 1;\n            // if (count) orderId = count + 1;\n\n            const resultLastId = await Order.find({ pageId: pageId }).select('id').sort('-id').limit(1).exec();\n            let orderId = 1;\n            if (resultLastId && resultLastId.length) orderId = resultLastId[0].id + 1;\n\n            console.info({ resultLastId });\n\n            const record = new Order({\n                id: orderId,\n                pageId: pageId,\n                userId: userId,\n                qty_total: qty ? qty : 0,\n                location_lat: location ? location.lat : null,\n                location_long: location ? location.long : null,\n                location_url: location ? location.url : null,\n                waitingForAddress: typeof waitingForAddress === 'boolean' ? waitingForAddress : false,\n                status: ORDERSTATUS_PENDING,\n            });\n            const saved = await record.save();\n            orderData.orderId = saved.id;\n            await updateItem(orderData);\n        }\n    } catch (error) {\n        console.error(\"Error while updating order\");\n        console.error(error);\n        throwError(error);\n    }\n}\n\nexport const getOrderPending = async orderData => {\n    const { userId, pageId, isComplete } = orderData;\n\n    const _order = await Order.findOne({ userId: userId, pageId: pageId, status: ORDERSTATUS_PENDING }).exec();\n    if (_order) {\n        if (isComplete && isComplete === true) {\n            const _items = await getItems({ orderId: _order.id, pageId: pageId });\n\n            const completeOrder = {\n                order: _order,\n                items: _items,\n            };\n\n            return completeOrder;\n        } else {\n            const headerOrder = {\n                order: _order,\n            }\n            return headerOrder;\n        }\n    } else return null;\n}\n"],"file":"ordersController.js"}