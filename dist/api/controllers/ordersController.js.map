{"version":3,"sources":["../../../src/api/controllers/ordersController.js"],"names":["ORDERSTATUS_PENDING","ORDERSTATUS_CONFIRMED","ORDERSTATUS_VIEWED","ORDERSTATUS_ACCEPTED","ORDERSTATUS_PRINTED","ORDERSTATUS_DELIVERED","ORDERSTATUS_REJECTED","ORDERSTATUS_CANCELLED","order_get_all","req","res","sortObj","query","sort","rangeObj","range","filterObj","filter","queryParam","currentUser","activePage","$gte","filterField","length","i","value","filterValues","Array","isArray","dateIni","DateTime","fromISO","set","hour","minute","second","setZone","dateEnd","invalid","toISO","$lt","$in","date","rezonedIni","rezonedEnd","plus","days","console","info","Order","find","exec","findError","result","error","status","json","message","_rangeIni","_rangeEnd","offset","limit","_totalCount","ordersArray","pageId","store","order","orderId","id","completeItems","items","distanceFromStore","location_lat","location_long","formattedDistance","toFixed","deliverAt","deliver_time","fromJSDate","confirmed_at","minutes","jsonOrder","customerId","userId","phone","deliver_type","address","status2","status3","qty_total","total","createdAt","deliverd_at","delivered_at","payment_type","payment_change","comments","push","setHeader","util","format","orderGetAllErr","order_get_one","params","getOrderJson","orderGetOneError","order_update","body","operation","findOne","doc","rejectionExplanation","sent_reject_notification","local","rejection_reason","source","sent_shipping_notification","save","deleteManyOrders","pageID","deleteMany","customer","jsonItems","forEach","item","jsonItem","flavorId","sizeId","beverageId","beverage","price","qty","split","flavor","size","customerName","first_name","last_name","getOrderJsonErr","Error","updateOrder","orderData","deliverType","deliverTime","location","user","addrData","completeItem","confirmOrder","waitingForAddress","waitingFor","waitingForData","undo","currentItem","calcTotal","originalSplit","currentItemSplit","eraseSplit","noBeverage","paymentType","paymentChange","backToConfirmation","categoryId","eraseSize","customerID","customerData","profile_pic","lat","long","location_url","url","currentItemSize","formattedAddress","item_complete","no_beverage","currentItemCategory","select","resultLastId","record","updateOrderError","getOrderPending","isComplete","_order","_items","completeOrder","headerOrder","getLastOrder","getLastPendingOrders","orders","getOrdersCustomerStat","total_spent","nb_orders","first_order","Date","now","last_order","cancelOrder","findOneAndRemove","err"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAIA;;AAGA;;;;;;;;AACA,IAAMA,mBAAmB,GAAG,CAA5B;AACA,IAAMC,qBAAqB,GAAG,CAA9B;AACA,IAAMC,kBAAkB,GAAG,CAA3B;AACA,IAAMC,oBAAoB,GAAG,CAA7B;AACA,IAAMC,mBAAmB,GAAG,CAA5B;AACA,IAAMC,qBAAqB,GAAG,CAA9B;AACA,IAAMC,oBAAoB,GAAG,CAA7B;AACA,IAAMC,qBAAqB,GAAG,CAA9B,C,CAEA;AACA;;AACO,IAAMC,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACzB,gBAAI;AACMC,cAAAA,OADN,GACgB,4BAAgBF,GAAG,CAACG,KAAJ,CAAUC,IAA1B,CADhB;AAEMC,cAAAA,QAFN,GAEiB,gCAAoBL,GAAG,CAACG,KAAJ,CAAUG,KAA9B,CAFjB;AAGMC,cAAAA,SAHN,GAGkB,sCAA0BP,GAAG,CAACG,KAAJ,CAAUK,MAApC,CAHlB;AAKIC,cAAAA,UALJ,GAKiB,EALjB;;AAMA,kBAAIT,GAAG,CAACU,WAAJ,CAAgBC,UAApB,EAAgC;AAC5BF,gBAAAA,UAAU,CAAC,QAAD,CAAV,GAAuBT,GAAG,CAACU,WAAJ,CAAgBC,UAAvC;AACH;;AAEDF,cAAAA,UAAU,CAAC,QAAD,CAAV,GAAuB;AAAEG,gBAAAA,IAAI,EAAEpB;AAAR,eAAvB;;AAEA,kBAAI,CAACU,OAAL,EAAc;AACVA,gBAAAA,OAAO,CAAC,WAAD,CAAP,GAAuB,MAAvB;AACH;;AAED,kBAAIK,SAAS,IAAIA,SAAS,CAACM,WAAvB,IAAsCN,SAAS,CAACM,WAAV,CAAsBC,MAAhE,EAAwE;AACpE,qBAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGR,SAAS,CAACM,WAAV,CAAsBC,MAA1C,EAAkDC,CAAC,EAAnD,EAAuD;AAC7CP,kBAAAA,MAD6C,GACpCD,SAAS,CAACM,WAAV,CAAsBE,CAAtB,CADoC;AAE7CC,kBAAAA,KAF6C,GAErCT,SAAS,CAACU,YAAV,CAAuBF,CAAvB,CAFqC;;AAGnD,sBAAIG,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACtB,wBAAIA,KAAK,CAACF,MAAN,KAAiB,CAArB,EAAwB;AACdM,sBAAAA,OADc,GACJC,gBAASC,OAAT,CAAiBN,KAAK,CAAC,CAAD,CAAtB,EAA2BO,GAA3B,CAA+B;AAAEC,wBAAAA,IAAI,EAAE,CAAR;AAAWC,wBAAAA,MAAM,EAAE,CAAnB;AAAsBC,wBAAAA,MAAM,EAAE;AAA9B,uBAA/B,EAAkEC,OAAlE,CAA0E,KAA1E,CADI;AAEdC,sBAAAA,OAFc,GAEJP,gBAASC,OAAT,CAAiBN,KAAK,CAAC,CAAD,CAAtB,EAA2BO,GAA3B,CAA+B;AAAEC,wBAAAA,IAAI,EAAE,EAAR;AAAYC,wBAAAA,MAAM,EAAE,EAApB;AAAwBC,wBAAAA,MAAM,EAAE;AAAhC,uBAA/B,EAAqEC,OAArE,CAA6E,KAA7E,CAFI;AAIpB,0BAAI,CAACP,OAAO,CAACS,OAAT,IAAoB,CAACD,OAAO,CAACC,OAAjC,EAAyC;AACrCpB,wBAAAA,UAAU,CAACD,MAAD,CAAV,GAAqB;AAAEI,0BAAAA,IAAI,EAAEQ,OAAO,CAACU,KAAR,EAAR;AAAyBC,0BAAAA,GAAG,EAAEH,OAAO,CAACE,KAAR;AAA9B,yBAArB,CADJ,KAGIrB,UAAU,CAACD,MAAD,CAAV,GAAqB;AAAEwB,wBAAAA,GAAG,EAAEhB;AAAP,uBAArB;AACP,qBARD,MASIP,UAAU,CAACD,MAAD,CAAV,GAAqB;AAAEwB,sBAAAA,GAAG,EAAEhB;AAAP,qBAArB;AACP,mBAXD,MAWO;AACGiB,oBAAAA,IADH,GACUZ,gBAASC,OAAT,CAAiBN,KAAjB,CADV;;AAEH,wBAAI,CAACiB,IAAI,CAACJ,OAAV,EAAmB;AAAE;AACjB;AACA;AACMK,sBAAAA,UAHS,GAGID,IAAI,CAACV,GAAL,CAAS;AAAEC,wBAAAA,IAAI,EAAE,CAAR;AAAWC,wBAAAA,MAAM,EAAE,CAAnB;AAAsBC,wBAAAA,MAAM,EAAE;AAA9B,uBAAT,EAA4CC,OAA5C,CAAoD,KAApD,CAHJ;AAITQ,sBAAAA,UAJS,GAIID,UAAU,CAACE,IAAX,CAAgB;AAAEC,wBAAAA,IAAI,EAAE;AAAR,uBAAhB,CAJJ;AAKfC,sBAAAA,OAAO,CAACC,IAAR,CAAa,OAAb,EAAsBN,IAAI,CAACH,KAAL,EAAtB,EACI,UADJ,EACgBI,UAAU,CAACJ,KAAX,EADhB,EAEI,UAFJ,EAEgBK,UAAU,CAACL,KAAX,EAFhB;AAGArB,sBAAAA,UAAU,CAACD,MAAD,CAAV,GAAqB;AAAEI,wBAAAA,IAAI,EAAEsB,UAAU,CAACJ,KAAX,EAAR;AAA4BC,wBAAAA,GAAG,EAAEI,UAAU,CAACL,KAAX;AAAjC,uBAArB;AACH,qBATD,MAUIrB,UAAU,CAACD,MAAD,CAAV,GAAqBQ,KAArB;AACP;AACJ;AACJ;;AAEDsB,cAAAA,OAAO,CAACC,IAAR,CAAa,4BAAb,EAA2C9B,UAA3C,EAAuDF,SAAvD;;AAEAiC,8BAAMC,IAAN,CAAWhC,UAAX,EAAuBL,IAAvB,CAA4BF,OAA5B,EAAqCwC,IAArC;AAAA;AAAA;AAAA;AAAA;AAAA,wCAA0C,iBAAOC,SAAP,EAAkBC,MAAlB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,+BAClCD,SADkC;AAAA;AAAA;AAAA;;AAElCL,0BAAAA,OAAO,CAACO,KAAR,CAAc;AAAEF,4BAAAA,SAAS,EAATA;AAAF,2BAAd;AACA1C,0BAAAA,GAAG,CAAC6C,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,4BAAAA,OAAO,EAAEL,SAAS,CAACK;AAArB,2BAArB;AAHkC;AAAA;;AAAA;AAK9BC,0BAAAA,SAL8B,GAKlB,CALkB;AAM9BC,0BAAAA,SAN8B,GAMlBN,MAAM,CAAC9B,MANW;;AAOlC,8BAAIT,QAAJ,EAAc;AACV4C,4BAAAA,SAAS,GAAG5C,QAAQ,CAAC8C,MAAT,IAAmBP,MAAM,CAAC9B,MAA1B,GAAmCT,QAAQ,CAAC8C,MAA5C,GAAqDP,MAAM,CAAC9B,MAAxE;AACAoC,4BAAAA,SAAS,GAAI7C,QAAQ,CAAC8C,MAAT,GAAkB9C,QAAQ,CAAC+C,KAA5B,IAAsCR,MAAM,CAAC9B,MAA7C,GAAsDT,QAAQ,CAAC8C,MAAT,GAAkB9C,QAAQ,CAAC+C,KAAjF,GAAyFR,MAAM,CAAC9B,MAA5G;AACH;;AACGuC,0BAAAA,WAX8B,GAWhBT,MAAM,CAAC9B,MAXS;AAY9BwC,0BAAAA,WAZ8B,GAYhB,EAZgB;;AAAA,gCAa9BV,MAAM,IAAIA,MAAM,CAAC9B,MAAjB,IAA2B8B,MAAM,CAAC9B,MAAP,GAAgB,CAbb;AAAA;AAAA;AAAA;;AAAA;AAAA,iCAcV,oCAAa8B,MAAM,CAAC,CAAD,CAAN,CAAUW,MAAvB,CAdU;;AAAA;AAcxBC,0BAAAA,KAdwB;AAerBzC,0BAAAA,EAfqB,GAejBkC,SAfiB;;AAAA;AAAA,gCAeNlC,EAAC,GAAGmC,SAfE;AAAA;AAAA;AAAA;;AAgBpBO,0BAAAA,KAhBoB,GAgBZb,MAAM,CAAC7B,EAAD,CAhBM;AAAA;AAAA,iCAiBN,+BAAS;AAAE2C,4BAAAA,OAAO,EAAED,KAAK,CAACE,EAAjB;AAAqBJ,4BAAAA,MAAM,EAAEE,KAAK,CAACF,MAAnC;AAA2CK,4BAAAA,aAAa,EAAE;AAA1D,2BAAT,CAjBM;;AAAA;AAiBpBC,0BAAAA,KAjBoB;AAkBpBC,0BAAAA,iBAlBoB,GAkBA,uCAA2BN,KAAK,CAACO,YAAjC,EAA+CP,KAAK,CAACQ,aAArD,EAAoEP,KAAK,CAACM,YAA1E,EAAwFN,KAAK,CAACO,aAA9F,CAlBA;AAmBtBC,0BAAAA,iBAnBsB;;AAoB1B,8BAAIH,iBAAiB,GAAG,CAAxB,EAA2B;AACvBG,4BAAAA,iBAAiB,GAAG,CAACH,iBAAiB,GAAG,GAArB,EAA0BI,OAA1B,CAAkC,CAAlC,IAAuC,IAA3D;AACH,2BAFD,MAEO;AACHD,4BAAAA,iBAAiB,GAAGH,iBAAiB,CAACI,OAAlB,CAA0B,CAA1B,IAA+B,KAAnD;AACH;;AACKC,0BAAAA,SAzBoB,GAyBRV,KAAK,CAACW,YAAN,GACZ/C,gBAASgD,UAAT,CAAoBZ,KAAK,CAACa,YAA1B,EAAwClC,IAAxC,CAA6C;AAAEmC,4BAAAA,OAAO,EAAEd,KAAK,CAACW;AAAjB,2BAA7C,CADY,GAEZX,KAAK,CAACa,YA3Bc;AA6BtBE,0BAAAA,SA7BsB,GA6BV;AACZb,4BAAAA,EAAE,EAAEF,KAAK,CAACE,EADE;AAEZJ,4BAAAA,MAAM,EAAEE,KAAK,CAACF,MAFF;AAGZkB,4BAAAA,UAAU,EAAEhB,KAAK,CAACgB,UAHN;AAIZC,4BAAAA,MAAM,EAAEjB,KAAK,CAACiB,MAJF;AAKZC,4BAAAA,KAAK,EAAElB,KAAK,CAACkB,KALD;AAMZR,4BAAAA,SAAS,EAAEA,SANC;AAOZS,4BAAAA,YAAY,EAAEnB,KAAK,CAACmB,YAPR;AAQZR,4BAAAA,YAAY,EAAEX,KAAK,CAACW,YARR;AASZS,4BAAAA,OAAO,EAAEpB,KAAK,CAACoB,OATH;AAUZ/B,4BAAAA,MAAM,EAAEW,KAAK,CAACX,MAVF;AAWZgC,4BAAAA,OAAO,EAAErB,KAAK,CAACqB,OAXH;AAYZC,4BAAAA,OAAO,EAAEtB,KAAK,CAACsB,OAZH;AAaZC,4BAAAA,SAAS,EAAEvB,KAAK,CAACuB,SAbL;AAcZC,4BAAAA,KAAK,EAAExB,KAAK,CAACwB,KAdD;AAeZC,4BAAAA,SAAS,EAAEzB,KAAK,CAACyB,SAfL;AAgBZrB,4BAAAA,KAAK,EAAEA,KAhBK;AAiBZC,4BAAAA,iBAAiB,EAAEG,iBAjBP;AAkBZF,4BAAAA,YAAY,EAAEN,KAAK,CAACM,YAlBR;AAmBZC,4BAAAA,aAAa,EAAEP,KAAK,CAACO,aAnBT;AAoBZM,4BAAAA,YAAY,EAAEb,KAAK,CAACa,YApBR;AAqBZa,4BAAAA,WAAW,EAAE1B,KAAK,CAAC2B,YArBP;AAsBZC,4BAAAA,YAAY,EAAE5B,KAAK,CAAC4B,YAtBR;AAuBZC,4BAAAA,cAAc,EAAE7B,KAAK,CAAC6B,cAvBV;AAwBZC,4BAAAA,QAAQ,EAAE9B,KAAK,CAAC8B;AAxBJ,2BA7BU;AAuD1BjC,0BAAAA,WAAW,CAACkC,IAAZ,CAAiBhB,SAAjB;;AAvD0B;AAeSzD,0BAAAA,EAAC,EAfV;AAAA;AAAA;;AAAA;AA0DlCd,0BAAAA,GAAG,CAACwF,SAAJ,CAAc,eAAd,EACIC,cAAKC,MAAL,CAAY,iBAAZ,EACI1C,SADJ,EACeC,SADf,EAC0BG,WAD1B,CADJ;AAGApD,0BAAAA,GAAG,CAAC6C,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBO,WAArB;;AA7DkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA1C;;AAAA;AAAA;AAAA;AAAA;AAgEH,aAlHD,CAkHE,OAAOsC,cAAP,EAAuB;AACrBtD,cAAAA,OAAO,CAACO,KAAR,CAAc;AAAE+C,gBAAAA,cAAc,EAAdA;AAAF,eAAd;AACA3F,cAAAA,GAAG,CAAC6C,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,gBAAAA,OAAO,EAAE4C,cAAc,CAAC5C;AAA1B,eAArB;AACH;;AAtHwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbjD,aAAa;AAAA;AAAA;AAAA,GAAnB,C,CAyHP;;;;;AACO,IAAM8F,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAO7F,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACrBD,GAAG,CAAC8F,MAAJ,IAAc9F,GAAG,CAAC8F,MAAJ,CAAWnC,EADJ;AAAA;AAAA;AAAA;;AAAA;AAGXJ,YAAAA,MAHW,GAGFvD,GAAG,CAACU,WAAJ,CAAgBC,UAAhB,GAA6BX,GAAG,CAACU,WAAJ,CAAgBC,UAA7C,GAA0D,IAHxD;AAAA;AAAA,mBAIOoF,YAAY,CAACxC,MAAD,EAASvD,GAAG,CAAC8F,MAAJ,CAAWnC,EAApB,CAJnB;;AAAA;AAIXa,YAAAA,SAJW;AAKjBvE,YAAAA,GAAG,CAAC6C,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqByB,SAArB;AALiB;AAAA;;AAAA;AAAA;AAAA;AAOjBlC,YAAAA,OAAO,CAACO,KAAR,CAAc;AAAEmD,cAAAA,gBAAgB;AAAlB,aAAd;AACA/F,YAAAA,GAAG,CAAC6C,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,aAAiBA;AAA5B,aAArB;;AARiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAb6C,aAAa;AAAA;AAAA;AAAA,GAAnB,C,CAaP;;;;;AACO,IAAMI,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOjG,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBACpBD,GAAG,CAACkG,IAAJ,IAAYlG,GAAG,CAACkG,IAAJ,CAASvC,EADD;AAAA;AAAA;AAAA;;AAAA;AAAA,wBAGU3D,GAAG,CAACkG,IAHd,EAGRvC,EAHQ,aAGRA,EAHQ,EAGJwC,SAHI,aAGJA,SAHI;AAIV5C,YAAAA,MAJU,GAIDvD,GAAG,CAACU,WAAJ,CAAgBC,UAJf;AAAA;AAAA,mBAKE6B,gBAAM4D,OAAN,CAAc;AAAE7C,cAAAA,MAAM,EAAEA,MAAV;AAAkBI,cAAAA,EAAE,EAAEA;AAAtB,aAAd,CALF;;AAAA;AAKV0C,YAAAA,GALU;;AAAA,kBAOZF,SAAS,KAAK,QAPF;AAAA;AAAA;AAAA;;AAQJG,YAAAA,oBARI,GAQqBtG,GAAG,CAACkG,IARzB,CAQJI,oBARI;AAUZD,YAAAA,GAAG,CAACvD,MAAJ,GAAajD,oBAAb;AACAwG,YAAAA,GAAG,CAACE,wBAAJ,GAA+BlF,gBAASmF,KAAT,EAA/B;AACAH,YAAAA,GAAG,CAACI,gBAAJ,GAAuBH,oBAAvB;AACA,0DAA0BD,GAAG,CAAC9C,MAA9B,EAAsC8C,GAAG,CAAC3B,MAA1C,EAAkD2B,GAAG,CAAC1C,EAAtD,EAA0D2C,oBAA1D;AAbY;AAAA;;AAAA;AAAA,kBAcLH,SAAS,KAAK,MAdT;AAAA;AAAA;AAAA;;AAeZE,YAAAA,GAAG,CAACvD,MAAJ,GAAarD,kBAAb,CAfY,CAgBZ;;AAhBY;AAAA;;AAAA;AAAA,kBAiBL0G,SAAS,KAAK,QAjBT;AAAA;AAAA;AAAA;;AAkBZE,YAAAA,GAAG,CAACvD,MAAJ,GAAapD,oBAAb,CAlBY,CAmBZ;;AAnBY;AAAA;;AAAA;AAAA,kBAoBLyG,SAAS,KAAK,OApBT;AAAA;AAAA;AAAA;;AAqBZE,YAAAA,GAAG,CAACvD,MAAJ,GAAanD,mBAAb,CArBY,CAsBZ;;AAtBY;AAAA;;AAAA;AAAA,kBAuBLwG,SAAS,KAAK,SAvBT;AAAA;AAAA;AAAA;;AAwBZE,YAAAA,GAAG,CAACvD,MAAJ,GAAalD,qBAAb;;AAxBY,kBAyBRyG,GAAG,CAACK,MAAJ,KAAe,UAzBP;AAAA;AAAA;AAAA;;AAAA,gBA0BHL,GAAG,CAACM,0BA1BD;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA2BE,6CAAyBN,GAAG,CAAC9C,MAA7B,EAAqC8C,GAAG,CAAC3B,MAAzC,EAAiD2B,GAAG,CAAC1C,EAArD,CA3BF;;AAAA;AA4BJ0C,YAAAA,GAAG,CAACM,0BAAJ,GAAiCtF,gBAASmF,KAAT,EAAjC;;AA5BI;AAAA;AAAA;;AAAA;AAgCZ,gBAAIxG,GAAG,CAACkG,IAAJ,CAASpB,OAAT,KAAqB,SAAzB,EAAoC;AAChCuB,cAAAA,GAAG,CAACvD,MAAJ,GAAatD,qBAAb;AACH,aAFD,MAEO,IAAIQ,GAAG,CAACkG,IAAJ,CAASpB,OAAT,KAAqB,WAAzB,EAAsC;AACzCuB,cAAAA,GAAG,CAACvD,MAAJ,GAAalD,qBAAb;AACAyG,cAAAA,GAAG,CAACjB,YAAJ,GAAmB/D,gBAASmF,KAAT,EAAnB;AACH,aAHM,MAGA,IAAIxG,GAAG,CAACkG,IAAJ,CAASpB,OAAT,KAAqB,WAAzB,EAAsC;AACzCuB,cAAAA,GAAG,CAACvD,MAAJ,GAAalD,qBAAb;AACH;;AAvCW,kBAyCRyG,GAAG,CAACvD,MAAJ,KAAelD,qBAzCP;AAAA;AAAA;AAAA;;AAAA,kBA0CJyG,GAAG,CAACK,MAAJ,KAAe,UA1CX;AAAA;AAAA;AAAA;;AAAA,gBA2CCL,GAAG,CAACM,0BA3CL;AAAA;AAAA;AAAA;;AA4CArE,YAAAA,OAAO,CAACC,IAAR,CAAa,2BAA2B8D,GAAG,CAAC3B,MAA/B,GAAwC,2BAAxC,GAAsE2B,GAAG,CAAC1C,EAA1E,GAA+E,0BAA5F;AA5CA;AAAA,mBA6CM,6CAAyB0C,GAAG,CAAC9C,MAA7B,EAAqC8C,GAAG,CAAC3B,MAAzC,EAAiD2B,GAAG,CAAC1C,EAArD,CA7CN;;AAAA;AA8CA0C,YAAAA,GAAG,CAACM,0BAAJ,GAAiCtF,gBAASmF,KAAT,EAAjC;;AA9CA;AAAA;AAAA,mBAmDVH,GAAG,CAACO,IAAJ,EAnDU;;AAAA;AAAA;AAAA,mBAoDQb,YAAY,CAACxC,MAAD,EAAS8C,GAAG,CAAC1C,EAAb,CApDpB;;AAAA;AAoDVa,YAAAA,SApDU;AAqDhBvE,YAAAA,GAAG,CAAC6C,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqByB,SAArB;AArDgB;AAAA;;AAAA;AAAA;AAAA;AAwDhBlC,YAAAA,OAAO,CAACO,KAAR;AACA5C,YAAAA,GAAG,CAAC6C,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,aAAeA;AAA1B,aAArB;;AAzDgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZiD,YAAY;AAAA;AAAA;AAAA,GAAlB;AA8DP;;;;;;;;AAIO,IAAMY,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACftE,gBAAMuE,UAAN,CAAiB;AAAExD,cAAAA,MAAM,EAAEuD;AAAV,aAAjB,EAAqCpE,IAArC,EADe;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBmE,gBAAgB;AAAA;AAAA;AAAA,GAAtB,C,CAIP;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;;;;AACO,IAAMd,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOxC,MAAP,EAAeG,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEAlB,gBAAM4D,OAAN,CAAc;AAAE7C,cAAAA,MAAM,EAAEA,MAAV;AAAkBI,cAAAA,EAAE,EAAED;AAAtB,aAAd,CAFA;;AAAA;AAEdD,YAAAA,KAFc;AAAA;AAAA,mBAGG,0CAAgBF,MAAhB,EAAwBE,KAAK,CAACgB,UAA9B,CAHH;;AAAA;AAGduC,YAAAA,QAHc;AAAA;AAAA,mBAIA,+BAAS;AAAEzD,cAAAA,MAAM,EAAEA,MAAV;AAAkBG,cAAAA,OAAO,EAAEA,OAA3B;AAAoCE,cAAAA,aAAa,EAAE;AAAnD,aAAT,CAJA;;AAAA;AAIdC,YAAAA,KAJc;AAAA;AAAA,mBAKA,oCAAaJ,KAAK,CAACF,MAAnB,CALA;;AAAA;AAKdC,YAAAA,KALc;AAMdM,YAAAA,iBANc,GAMM,uCAA2BN,KAAK,CAACO,YAAjC,EAA+CP,KAAK,CAACQ,aAArD,EAAoEP,KAAK,CAACM,YAA1E,EAAwFN,KAAK,CAACO,aAA9F,CANN;AAOdG,YAAAA,SAPc,GAOFV,KAAK,CAACW,YAAN,GACZ/C,gBAASgD,UAAT,CAAoBZ,KAAK,CAACa,YAA1B,EAAwClC,IAAxC,CAA6C;AAAEmC,cAAAA,OAAO,EAAEd,KAAK,CAACW;AAAjB,aAA7C,CADY,GAEZX,KAAK,CAACa,YATQ;AAUhB2C,YAAAA,SAVgB,GAUJ,EAVI;AAWpBpD,YAAAA,KAAK,CAACqD,OAAN,CAAc,UAAAC,IAAI,EAAI;AAClB,kBAAIC,QAAQ,GAAG;AACXzD,gBAAAA,EAAE,EAAEwD,IAAI,CAACxD,EADE;AAEX0D,gBAAAA,QAAQ,EAAEF,IAAI,CAACE,QAFJ;AAGXC,gBAAAA,MAAM,EAAEH,IAAI,CAACG,MAHF;AAIXC,gBAAAA,UAAU,EAAEJ,IAAI,CAACI,UAJN;AAKXC,gBAAAA,QAAQ,EAAEL,IAAI,CAACK,QALJ;AAMXC,gBAAAA,KAAK,EAAEN,IAAI,CAACM,KAND;AAOXC,gBAAAA,GAAG,EAAEP,IAAI,CAACO,GAPC;AAQXC,gBAAAA,KAAK,EAAER,IAAI,CAACQ,KARD;AASXC,gBAAAA,MAAM,EAAET,IAAI,CAACS,MATF;AAUXC,gBAAAA,IAAI,EAAEV,IAAI,CAACU;AAVA,eAAf;AAYAZ,cAAAA,SAAS,CAACzB,IAAV,CAAe4B,QAAf;AACH,aAdD;AAeI5C,YAAAA,SA1BgB,GA0BJ;AACZb,cAAAA,EAAE,EAAEF,KAAK,CAACE,EADE;AAEZc,cAAAA,UAAU,EAAEhB,KAAK,CAACgB,UAFN;AAGZqD,cAAAA,YAAY,EAAEd,QAAQ,CAACe,UAAT,GAAsB,GAAtB,GAA4Bf,QAAQ,CAACgB,SAHvC;AAIZ9C,cAAAA,SAAS,EAAEzB,KAAK,CAACyB,SAJL;AAKZf,cAAAA,SAAS,EAAEA,SALC;AAMZS,cAAAA,YAAY,EAAEnB,KAAK,CAACmB,YANR;AAOZR,cAAAA,YAAY,EAAEX,KAAK,CAACW,YAPR;AAQZY,cAAAA,SAAS,EAAEvB,KAAK,CAACuB,SARL;AASZlC,cAAAA,MAAM,EAAEW,KAAK,CAACX,MATF;AAUZgC,cAAAA,OAAO,EAAErB,KAAK,CAACqB,OAVH;AAWZC,cAAAA,OAAO,EAAEtB,KAAK,CAACsB,OAXH;AAYZJ,cAAAA,KAAK,EAAElB,KAAK,CAACkB,KAZD;AAaZE,cAAAA,OAAO,EAAEpB,KAAK,CAACoB,OAbH;AAcZI,cAAAA,KAAK,EAAExB,KAAK,CAACwB,KAdD;AAeZpB,cAAAA,KAAK,EAAEoD,SAfK;AAgBZnD,cAAAA,iBAAiB,EAAEA,iBAhBP;AAiBZC,cAAAA,YAAY,EAAEN,KAAK,CAACM,YAjBR;AAkBZC,cAAAA,aAAa,EAAEP,KAAK,CAACO,aAlBT;AAmBZM,cAAAA,YAAY,EAAEb,KAAK,CAACa,YAnBR;AAoBZa,cAAAA,WAAW,EAAE1B,KAAK,CAAC2B,YApBP;AAqBZC,cAAAA,YAAY,EAAE5B,KAAK,CAAC4B,YArBR;AAsBZC,cAAAA,cAAc,EAAE7B,KAAK,CAAC6B,cAtBV;AAuBZC,cAAAA,QAAQ,EAAE9B,KAAK,CAAC8B;AAvBJ,aA1BI;AAAA,8CAmDbf,SAnDa;;AAAA;AAAA;AAAA;AAqDpBlC,YAAAA,OAAO,CAACO,KAAR,CAAc;AAAEoF,cAAAA,eAAe;AAAjB,aAAd;AArDoB,kBAsDd,IAAIC,KAAJ,CAAU,aAAgBlF,OAA1B,CAtDc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZ+C,YAAY;AAAA;AAAA;AAAA,GAAlB;;;;AA2DA,IAAMoC,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAMC,SAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEX7E,YAAAA,MAFW,GAOW6E,SAPX,CAEX7E,MAFW,EAEHmB,MAFG,GAOW0D,SAPX,CAEH1D,MAFG,EAEKgC,MAFL,GAOW0B,SAPX,CAEK1B,MAFL,EAEa2B,WAFb,GAOWD,SAPX,CAEaC,WAFb,EAE0BC,WAF1B,GAOWF,SAPX,CAE0BE,WAF1B,EAEuCZ,GAFvC,GAOWU,SAPX,CAEuCV,GAFvC,EAE4C1C,SAF5C,GAOWoD,SAPX,CAE4CpD,SAF5C,EAEuDuD,QAFvD,GAOWH,SAPX,CAEuDG,QAFvD,EAEiEC,IAFjE,GAOWJ,SAPX,CAEiEI,IAFjE,EAGf7D,KAHe,GAOWyD,SAPX,CAGfzD,KAHe,EAGR8D,QAHQ,GAOWL,SAPX,CAGRK,QAHQ,EAGEC,YAHF,GAOWN,SAPX,CAGEM,YAHF,EAGgBC,YAHhB,GAOWP,SAPX,CAGgBO,YAHhB,EAIfC,iBAJe,GAOWR,SAPX,CAIfQ,iBAJe,EAIIC,UAJJ,GAOWT,SAPX,CAIIS,UAJJ,EAIgBC,cAJhB,GAOWV,SAPX,CAIgBU,cAJhB,EAIgCC,IAJhC,GAOWX,SAPX,CAIgCW,IAJhC,EAIsCC,WAJtC,GAOWZ,SAPX,CAIsCY,WAJtC,EAImD1B,MAJnD,GAOWc,SAPX,CAImDd,MAJnD,EAI2D2B,SAJ3D,GAOWb,SAPX,CAI2Da,SAJ3D,EAKfC,aALe,GAOWd,SAPX,CAKfc,aALe,EAKAvB,KALA,GAOWS,SAPX,CAKAT,KALA,EAKOwB,gBALP,GAOWf,SAPX,CAKOe,gBALP,EAKyBC,UALzB,GAOWhB,SAPX,CAKyBgB,UALzB,EAKqCC,UALrC,GAOWjB,SAPX,CAKqCiB,UALrC,EAMfC,WANe,GAOWlB,SAPX,CAMfkB,WANe,EAMFC,aANE,GAOWnB,SAPX,CAMFmB,aANE,EAMaC,kBANb,GAOWpB,SAPX,CAMaoB,kBANb,EAMiCjE,QANjC,GAOW6C,SAPX,CAMiC7C,QANjC,EAOfkE,UAPe,GAOWrB,SAPX,CAOfqB,UAPe,EAOHC,SAPG,GAOWtB,SAPX,CAOHsB,SAPG;AASfC,YAAAA,UATe,GASF,CATE;AAUfC,YAAAA,YAVe,GAUA,EAVA;AAWnBA,YAAAA,YAAY,CAACrG,MAAb,GAAsBA,MAAtB;AACAqG,YAAAA,YAAY,CAAClF,MAAb,GAAsBA,MAAtB;;AACA,gBAAI8D,IAAJ,EAAU;AACET,cAAAA,UADF,GACyCS,IADzC,CACET,UADF,EACcC,SADd,GACyCQ,IADzC,CACcR,SADd,EACyB6B,WADzB,GACyCrB,IADzC,CACyBqB,WADzB;AAEND,cAAAA,YAAY,CAAC7B,UAAb,GAA0BA,UAA1B;AACA6B,cAAAA,YAAY,CAAC5B,SAAb,GAAyBA,SAAzB;AACA4B,cAAAA,YAAY,CAACC,WAAb,GAA2BA,WAA3B;AACH;;AACDD,YAAAA,YAAY,CAACjF,KAAb,GAAqBA,KAArB;AACAiF,YAAAA,YAAY,CAACrB,QAAb,GAAwBA,QAAxB;AACAqB,YAAAA,YAAY,CAACnB,QAAb,GAAwBA,QAAxB;AArBmB;AAAA,mBAsBA,yCAAemB,YAAf,CAtBA;;AAAA;AAsBnBD,YAAAA,UAtBmB;AAAA;AAAA,mBAuBCnH,gBAAM4D,OAAN,CAAc;AAAE7C,cAAAA,MAAM,EAAEA,MAAV;AAAkBmB,cAAAA,MAAM,EAAEA,MAA1B;AAAkC5B,cAAAA,MAAM,EAAEvD;AAA1C,aAAd,EAA+EmD,IAA/E,EAvBD;;AAAA;AAuBbe,YAAAA,KAvBa;;AAAA,iBAyBfA,KAzBe;AAAA;AAAA;AAAA;;AA0Bf2E,YAAAA,SAAS,CAAC1E,OAAV,GAAoBD,KAAK,CAACE,EAA1B;AAEIwE,YAAAA,YA5BW,GA4BG,KA5BH;;AA6Bf,gBAAII,QAAJ,EAAc;AACV9E,cAAAA,KAAK,CAACM,YAAN,GAAqBwE,QAAQ,CAACuB,GAA9B;AACArG,cAAAA,KAAK,CAACO,aAAN,GAAsBuE,QAAQ,CAACwB,IAA/B;AACAtG,cAAAA,KAAK,CAACuG,YAAN,GAAqBzB,QAAQ,CAAC0B,GAA9B;AACA9B,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIa,WAAJ,EAAiB;AACbvF,cAAAA,KAAK,CAACuF,WAAN,GAAoBA,WAApB;AACAb,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIzB,MAAJ,EAAY;AACRjD,cAAAA,KAAK,CAACiD,MAAN,GAAeA,MAAf;AACAyB,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIT,GAAJ,EAAS;AACLjE,cAAAA,KAAK,CAACiE,GAAN,GAAYA,GAAZ;AACAS,cAAAA,YAAW,GAAG,IAAd,CAFK,CAIL;AACA;;AACAC,cAAAA,SAAS,CAACV,GAAV,GAAgB,CAAhB;AACH;;AAED,gBAAIW,WAAJ,EAAiB;AACb5E,cAAAA,KAAK,CAACmB,YAAN,GAAqByD,WAArB;AACAF,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIG,WAAJ,EAAiB;AACb7E,cAAAA,KAAK,CAACW,YAAN,GAAqBkE,WAArB;AACAH,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAInD,SAAJ,EAAe;AACXvB,cAAAA,KAAK,CAACuB,SAAN,GAAkBA,SAAlB;AACAmD,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIe,aAAJ,EAAmB;AACf;AACA;AACAzF,cAAAA,KAAK,CAACuB,SAAN,GAAkBvB,KAAK,CAACuB,SAAN,GAAkBkE,aAAlB,GAAkC,CAApD,CAHe,CAIf;;AACAzF,cAAAA,KAAK,CAACyF,aAAN,GAAsBA,aAAtB,CALe,CAMf;AACA;;AACAd,cAAAA,SAAS,CAACT,KAAV,GAAkBuB,aAAlB;AACAf,cAAAA,YAAW,GAAG,IAAd;AACH,aAhFc,CAkFf;;;AACA,gBAAIgB,gBAAJ,EAAsB;AAClB1F,cAAAA,KAAK,CAAC0F,gBAAN,GAAyBA,gBAAzB;AACAhB,cAAAA,YAAW,GAAG,IAAd;AACH,aAtFc,CAwFf;AACA;AACA;AACA;;;AACA,gBAAIR,KAAJ,EAAW;AACPS,cAAAA,SAAS,CAACd,MAAV,GAAmB7D,KAAK,CAACyG,eAAzB;AACA9B,cAAAA,SAAS,CAACV,GAAV,GAAgB,CAAhB;AACH,aA/Fc,CAiGf;AACA;;;AACA,gBAAI0B,UAAJ,EAAgB;AACZ3F,cAAAA,KAAK,CAACyF,aAAN,GAAsB,IAAtB;AACAzF,cAAAA,KAAK,CAAC0F,gBAAN,GAAyB,IAAzB;AACAhB,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIwB,UAAU,GAAG,CAAjB,EAAoB;AAChBlG,cAAAA,KAAK,CAACgB,UAAN,GAAmBkF,UAAnB;AACAxB,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIxD,KAAJ,EAAW;AACPlB,cAAAA,KAAK,CAACkB,KAAN,GAAcA,KAAd;AACAwD,cAAAA,YAAW,GAAG,IAAd;AACH;;AACD,gBAAIM,QAAJ,EAAc;AACVhF,cAAAA,KAAK,CAACoB,OAAN,GAAgB4D,QAAQ,CAAC0B,gBAAzB;;AACA,kBAAI1B,QAAQ,CAAC1E,YAAT,IAAyB0E,QAAQ,CAACzE,aAAtC,EAAqD;AACjDP,gBAAAA,KAAK,CAACM,YAAN,GAAqB0E,QAAQ,CAAC1E,YAA9B;AACAN,gBAAAA,KAAK,CAACO,aAAN,GAAsByE,QAAQ,CAACzE,aAA/B;AACH;;AACDmE,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIb,MAAJ,EAAY;AACR7D,cAAAA,KAAK,CAACyG,eAAN,GAAwB5C,MAAxB;AACAa,cAAAA,YAAW,GAAG,IAAd;AACH;AAED;;;AAGA;AACA;AACA;;;AAEA,gBAAIO,YAAJ,EAAkB;AACd,kBAAIjF,KAAK,CAAC2G,aAAV,EAAyB3G,KAAK,CAAC2G,aAAN,GAAsB3G,KAAK,CAAC2G,aAAN,GAAsB,CAA5C,CAAzB,KACK3G,KAAK,CAAC2G,aAAN,GAAsB,CAAtB;AACLjC,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIQ,YAAJ,EAAkB;AACdlF,cAAAA,KAAK,CAACX,MAAN,GAAetD,qBAAf;AACAiE,cAAAA,KAAK,CAACa,YAAN,GAAqBjD,gBAASmF,KAAT,EAArB;AACA2B,cAAAA,YAAW,GAAG,IAAd;AACH,aAJD,MAIO;AACH;AACA;AACA;AACA,kBAAI1E,KAAK,CAACyF,aAAN,IAAuBzF,KAAK,CAACyF,aAAN,GAAsB,CAAjD,EAAoD;AAChDd,gBAAAA,SAAS,CAACT,KAAV,GAAkBlE,KAAK,CAACyF,aAAxB;AACAf,gBAAAA,YAAW,GAAG,IAAd;AACH;AACJ;;AAED,gBAAI,OAAOS,iBAAP,KAA6B,SAAjC,EAA4C;AACxCnF,cAAAA,KAAK,CAACmF,iBAAN,GAA0BA,iBAA1B;AACAT,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIU,UAAJ,EAAgB;AACZpF,cAAAA,KAAK,CAACoF,UAAN,GAAmBA,UAAnB;AACAV,cAAAA,YAAW,GAAG,IAAd;AAEA,kBAAI,CAACY,IAAL,EACItF,KAAK,CAACsF,IAAN,GAAa,IAAb;AACP;;AAED,gBAAID,cAAJ,EAAoB;AAChBrF,cAAAA,KAAK,CAACqF,cAAN,GAAuBA,cAAvB;AACAX,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIY,IAAJ,EAAU;AACNtF,cAAAA,KAAK,CAACsF,IAAN,GAAaA,IAAb;AACAZ,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIqB,kBAAJ,EAAwB;AACpB/F,cAAAA,KAAK,CAAC+F,kBAAN,GAA2BA,kBAA3B;AACArB,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAI5C,QAAJ,EAAc;AACV9B,cAAAA,KAAK,CAAC8B,QAAN,GAAiBA,QAAjB;AACA4C,cAAAA,YAAW,GAAG,IAAd;AACH;;AA1Lc,kBA6LX,OAAOc,SAAP,KAAqB,SA7LV;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA8LS,oCAAc;AAAEvF,cAAAA,OAAO,EAAED,KAAK,CAACE,EAAjB;AAAqBJ,cAAAA,MAAM,EAAEE,KAAK,CAACF;AAAnC,aAAd,CA9LT;;AAAA;AA8LL0B,YAAAA,KA9LK;;AA+LX,gBAAIA,KAAK,GAAG,CAAR,IAAaA,KAAK,KAAKxB,KAAK,CAACwB,KAAjC,EAAwC;AACpCxB,cAAAA,KAAK,CAACwB,KAAN,GAAcA,KAAd;AACAkD,cAAAA,YAAW,GAAG,IAAd;AACH;;AAlMU;AAqMf,gBAAI,OAAOkB,UAAP,KAAsB,SAA1B,EAAqC;AACjC5F,cAAAA,KAAK,CAAC4G,WAAN,GAAoBhB,UAApB;AACAlB,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAImB,WAAJ,EAAiB;AACb7F,cAAAA,KAAK,CAAC4B,YAAN,GAAqBiE,WAArB;AACAnB,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIoB,aAAJ,EAAmB;AACf9F,cAAAA,KAAK,CAAC6B,cAAN,GAAuBiE,aAAvB;AACApB,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIsB,UAAJ,EAAgB;AACZhG,cAAAA,KAAK,CAAC6G,mBAAN,GAA4Bb,UAA5B;AACAtB,cAAAA,YAAW,GAAG,IAAd;AACH;;AAvNc,iBAyNXA,YAzNW;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA0NL1E,KAAK,CAACmD,IAAN,EA1NK;;AAAA;AAAA;AAAA,mBA4NT,iCAAWwB,SAAX,CA5NS;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAkOY5F,gBAAMC,IAAN,CAAW;AAAEc,cAAAA,MAAM,EAAEA;AAAV,aAAX,EAA+BgH,MAA/B,CAAsC,IAAtC,EAA4CnK,IAA5C,CAAiD,KAAjD,EAAwDgD,KAAxD,CAA8D,CAA9D,EAAiEV,IAAjE,EAlOZ;;AAAA;AAkOT8H,YAAAA,YAlOS;AAmOX9G,YAAAA,OAnOW,GAmOD,CAnOC;AAoOf,gBAAI8G,YAAY,IAAIA,YAAY,CAAC1J,MAAjC,EAAyC4C,OAAO,GAAG8G,YAAY,CAAC,CAAD,CAAZ,CAAgB7G,EAAhB,GAAqB,CAA/B;AAEnC8G,YAAAA,MAtOS,GAsOA,IAAIjI,eAAJ,CAAU;AACrBmB,cAAAA,EAAE,EAAED,OADiB;AAErBH,cAAAA,MAAM,EAAEA,MAFa;AAGrBmB,cAAAA,MAAM,EAAEA,MAHa;AAIrBM,cAAAA,SAAS,EAAE0C,GAAG,IAAI,CAJG;AAKrB3D,cAAAA,YAAY,EAAEwE,QAAQ,GAAGA,QAAQ,CAACuB,GAAZ,GAAkB,IALnB;AAMrB9F,cAAAA,aAAa,EAAEuE,QAAQ,GAAGA,QAAQ,CAACwB,IAAZ,GAAmB,IANrB;AAOrBC,cAAAA,YAAY,EAAEzB,QAAQ,GAAGA,QAAQ,CAAC0B,GAAZ,GAAkB,IAPnB;AAQrBrB,cAAAA,iBAAiB,EAAE,OAAOA,iBAAP,KAA6B,SAA7B,GAAyCA,iBAAzC,GAA6D,KAR3D;AASrBhE,cAAAA,YAAY,EAAEyD,WATO;AAUrBvF,cAAAA,MAAM,EAAEvD;AAVa,aAAV,CAtOA;AAAA;AAAA,mBAkPTkL,MAAM,CAAC7D,IAAP,EAlPS;;AAAA;AAmPfwB,YAAAA,SAAS,CAAC1E,OAAV,GAAoB+G,MAAM,CAAC9G,EAA3B;AAnPe;AAAA,mBAoPT,iCAAWyE,SAAX,CApPS;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuPnB9F,YAAAA,OAAO,CAACO,KAAR,CAAc;AAAE6H,cAAAA,gBAAgB;AAAlB,aAAd;AAvPmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXvC,WAAW;AAAA;AAAA;AAAA,GAAjB;;;;AA4PA,IAAMwC,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAMvC,SAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnB1D,YAAAA,MADmB,GACY0D,SADZ,CACnB1D,MADmB,EACXnB,MADW,GACY6E,SADZ,CACX7E,MADW,EACHqH,UADG,GACYxC,SADZ,CACHwC,UADG;AAAA;AAAA,mBAGNpI,gBAAM4D,OAAN,CAAc;AAC/B1B,cAAAA,MAAM,EAAEA,MADuB;AACfnB,cAAAA,MAAM,EAAEA,MADO;AAE/BT,cAAAA,MAAM,EAAEvD;AAFuB,aAAd,EAGlBmD,IAHkB,EAHM;;AAAA;AAGrBmI,YAAAA,MAHqB;;AAAA,iBAOvBA,MAPuB;AAAA;AAAA;AAAA;;AAAA,kBAQnBD,UAAU,IAAIA,UAAU,KAAK,IARV;AAAA;AAAA;AAAA;;AAAA;AAAA,mBASE,+BAAS;AAAElH,cAAAA,OAAO,EAAEmH,MAAM,CAAClH,EAAlB;AAAsBJ,cAAAA,MAAM,EAAEA,MAA9B;AAAsCK,cAAAA,aAAa,EAAEgH;AAArD,aAAT,CATF;;AAAA;AASbE,YAAAA,MATa;AAWbC,YAAAA,aAXa,GAWG;AAClBtH,cAAAA,KAAK,EAAEoH,MADW;AAElBhH,cAAAA,KAAK,EAAEiH;AAFW,aAXH;AAAA,8CAgBZC,aAhBY;;AAAA;AAkBbC,YAAAA,WAlBa,GAkBC;AAChBvH,cAAAA,KAAK,EAAEoH;AADS,aAlBD;AAAA,8CAqBZG,WArBY;;AAAA;AAAA;AAAA;;AAAA;AAAA,8CAuBb,IAvBa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfL,eAAe;AAAA;AAAA;AAAA,GAArB;;;;AA0BA,IAAMM,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAMnE,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACGtE,gBAAMC,IAAN,CAAW;AAAEc,cAAAA,MAAM,EAAEuD,MAAV;AAAkBhE,cAAAA,MAAM,EAAE;AAAElC,gBAAAA,IAAI,EAAEpB;AAAR;AAA1B,aAAX,EAAwE+K,MAAxE,CAA+E,IAA/E,EAAqFnK,IAArF,CAA0F,eAA1F,EAA2GgD,KAA3G,CAAiH,CAAjH,EAAoHV,IAApH,EADH;;AAAA;AAClB8H,YAAAA,YADkB;;AAAA,kBAEpBA,YAAY,IAAIA,YAAY,CAAC1J,MAFT;AAAA;AAAA;AAAA;;AAAA,8CAGb0J,YAAY,CAAC,CAAD,CAAZ,CAAgB7G,EAHH;;AAAA;AAAA,8CAIZ,CAJY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZsH,YAAY;AAAA;AAAA;AAAA,GAAlB;;;;AAOA,IAAMC,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,mBAAMpE,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACXtE,gBAAMC,IAAN,CAAW;AAAEc,cAAAA,MAAM,EAAEuD,MAAV;AAAkBhE,cAAAA,MAAM,EAAEtD;AAA1B,aAAX,EAChB+K,MADgB,CACT,iBADS,EAEhBnK,IAFgB,CAEX,eAFW,EAGhBsC,IAHgB,EADW;;AAAA;AAC1ByI,YAAAA,MAD0B;;AAAA,kBAM5BA,MAAM,IAAIA,MAAM,CAACrK,MANW;AAAA;AAAA;AAAA;;AAAA,+CAOrBqK,MAPqB;;AAAA;AAAA,+CAQpB,EARoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBD,oBAAoB;AAAA;AAAA;AAAA,GAA1B;;;;AAYA,IAAME,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,mBAAMhD,SAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACzB7E,YAAAA,MADyB,GACF6E,SADE,CACzB7E,MADyB,EACjBkB,UADiB,GACF2D,SADE,CACjB3D,UADiB;AAAA;AAAA,mBAGZjC,gBAAMC,IAAN,CAAW;AAAEc,cAAAA,MAAM,EAAEA,MAAV;AAAkBkB,cAAAA,UAAU,EAAEA;AAA9B,aAAX,EAAuD8F,MAAvD,CAA8D,iBAA9D,EAAiFnK,IAAjF,CAAsF,WAAtF,EAAmGsC,IAAnG,EAHY;;AAAA;AAG3ByI,YAAAA,MAH2B;AAI7BE,YAAAA,WAJ6B,GAIf,CAJe;AAK7BC,YAAAA,SAL6B,GAKjB,CALiB;AAM7BC,YAAAA,WAN6B,GAMfC,IAAI,CAACC,GAAL,EANe;AAO7BC,YAAAA,UAP6B,GAOhB,IAPgB;AAAA;AAAA;AAAA;AAAA;;AAQjC,6BAAoBP,MAApB,uHAA4B;AAAjB1H,cAAAA,KAAiB;AACxB4H,cAAAA,WAAW,IAAI5H,KAAK,CAACwB,KAArB;AACAqG,cAAAA,SAAS,IAAI,CAAb;;AAEA,kBAAIC,WAAW,IAAI9H,KAAK,CAACyB,SAAzB,EAAoC;AAChCqG,gBAAAA,WAAW,GAAG9H,KAAK,CAACyB,SAApB;AACH;;AACD,kBAAIwG,UAAU,IAAIjI,KAAK,CAACyB,SAAxB,EAAmC;AAC/BwG,gBAAAA,UAAU,GAAGjI,KAAK,CAACyB,SAAnB;AACH;AACJ;;AAlBgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,+CAmB1B;AAAEmG,cAAAA,WAAW,EAAXA,WAAF;AAAeC,cAAAA,SAAS,EAATA,SAAf;AAA0BC,cAAAA,WAAW,EAAXA,WAA1B;AAAuCG,cAAAA,UAAU,EAAVA;AAAvC,aAnB0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAArBN,qBAAqB;AAAA;AAAA;AAAA,GAA3B;;;;AAsBA,IAAMO,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,mBAAMvD,SAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACf7E,YAAAA,MADe,GACI6E,SADJ,CACf7E,MADe,EACPmB,MADO,GACI0D,SADJ,CACP1D,MADO;AAAA;AAAA,mBAGjBlC,gBAAMoJ,gBAAN,CAAuB;AAAErI,cAAAA,MAAM,EAAEA,MAAV;AAAkBmB,cAAAA,MAAM,EAAEA,MAA1B;AAAkC5B,cAAAA,MAAM,EAAEvD;AAA1C,aAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,sCACF,mBAAOsM,GAAP,EAAY5L,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACS4L,GADT;AAAA;AAAA;AAAA;;AAAA,6BAEY5L,GAFZ;AAAA;AAAA;AAAA;;AAGkByD,wBAAAA,OAHlB,GAG4BzD,GAAG,CAAC0D,EAHhC;AAAA;AAAA,+BAIkB,kCAAYJ,MAAZ,EAAoBG,OAApB,CAJlB;;AAAA;AAAA;AAAA;;AAAA;AAMYpB,wBAAAA,OAAO,CAACO,KAAR,CAAc,iDAAd;AACAP,wBAAAA,OAAO,CAACC,IAAR,CAAatC,GAAb;;AAPZ;AAAA;AAAA;;AAAA;AAUQqC,wBAAAA,OAAO,CAACO,KAAR,CAAc,wBAAd;AACAP,wBAAAA,OAAO,CAACO,KAAR,CAAcgJ,GAAd;;AAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADE;;AAAA;AAAA;AAAA;AAAA,gBAHiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXF,WAAW;AAAA;AAAA;AAAA,GAAjB;AAqBP;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import Order from '../models/orders';\nimport util from \"util\";\nimport { updateItem, getItems, getItemsTotal, cancelItems } from './itemsController';\nimport { updateCustomer, getCustomerById } from './customersController';\nimport { getStoreData } from './storesController';\nimport {\n    configSortQuery, configRangeQueryNew,\n    configFilterQueryMultiple, distanceBetweenCoordinates,\n} from '../util/util';\nimport { DateTime } from 'luxon';\n// import { Bot, Elements } from 'facebook-messenger-bot';\n// import { getOnePageToken } from './pagesController';\nimport { sendShippingNotification, sendRejectionNotification } from '../bot/botController';\nconst ORDERSTATUS_PENDING = 0;\nconst ORDERSTATUS_CONFIRMED = 1;\nconst ORDERSTATUS_VIEWED = 2;\nconst ORDERSTATUS_ACCEPTED = 3;\nconst ORDERSTATUS_PRINTED = 4;\nconst ORDERSTATUS_DELIVERED = 5;\nconst ORDERSTATUS_REJECTED = 8;\nconst ORDERSTATUS_CANCELLED = 9;\n\n// List all orders\n// TODO: use filters in the query req.query\nexport const order_get_all = async (req, res) => {\n    try {\n        const sortObj = configSortQuery(req.query.sort);\n        const rangeObj = configRangeQueryNew(req.query.range);\n        const filterObj = configFilterQueryMultiple(req.query.filter);\n\n        let queryParam = {};\n        if (req.currentUser.activePage) {\n            queryParam['pageId'] = req.currentUser.activePage;\n        }\n\n        queryParam['status'] = { $gte: ORDERSTATUS_CONFIRMED };\n\n        if (!sortObj) {\n            sortObj['createdAt'] = 'DESC';\n        }\n\n        if (filterObj && filterObj.filterField && filterObj.filterField.length) {\n            for (let i = 0; i < filterObj.filterField.length; i++) {\n                const filter = filterObj.filterField[i];\n                const value = filterObj.filterValues[i];\n                if (Array.isArray(value)) {\n                    if (value.length === 2) {\n                        const dateIni = DateTime.fromISO(value[0]).set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                        const dateEnd = DateTime.fromISO(value[1]).set({ hour: 23, minute: 59, second: 59 }).setZone('UTC');\n\n                        if (!dateIni.invalid && !dateEnd.invalid)// is date\n                            queryParam[filter] = { $gte: dateIni.toISO(), $lt: dateEnd.toISO() };\n                        else\n                            queryParam[filter] = { $in: value };\n                    } else\n                        queryParam[filter] = { $in: value };\n                } else {\n                    const date = DateTime.fromISO(value);\n                    if (!date.invalid) { // is a date\n                        // date comes with the current time, so, I am setting it to midnight.\n                        // Mongoose stores data on GMT timezone\n                        const rezonedIni = date.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                        const rezonedEnd = rezonedIni.plus({ days: 1 });\n                        console.info('date:', date.toISO(),\n                            'rezoned:', rezonedIni.toISO(),\n                            'nextDay:', rezonedEnd.toISO());\n                        queryParam[filter] = { $gte: rezonedIni.toISO(), $lt: rezonedEnd.toISO() };\n                    } else\n                        queryParam[filter] = value;\n                }\n            }\n        }\n\n        console.info('orders get_all queryParam:', queryParam, filterObj);\n\n        Order.find(queryParam).sort(sortObj).exec(async (findError, result) => {\n            if (findError) {\n                console.error({ findError });\n                res.status(500).json({ message: findError.message });\n            } else {\n                let _rangeIni = 0;\n                let _rangeEnd = result.length;\n                if (rangeObj) {\n                    _rangeIni = rangeObj.offset <= result.length ? rangeObj.offset : result.length;\n                    _rangeEnd = (rangeObj.offset + rangeObj.limit) <= result.length ? rangeObj.offset + rangeObj.limit : result.length;\n                }\n                let _totalCount = result.length;\n                let ordersArray = [];\n                if (result && result.length && result.length > 0) {\n                    const store = await getStoreData(result[0].pageId);\n                    for (let i = _rangeIni; i < _rangeEnd; i++) {\n                        const order = result[i];\n                        const items = await getItems({ orderId: order.id, pageId: order.pageId, completeItems: false });\n                        const distanceFromStore = distanceBetweenCoordinates(store.location_lat, store.location_long, order.location_lat, order.location_long);\n                        let formattedDistance;\n                        if (distanceFromStore < 1) {\n                            formattedDistance = (distanceFromStore * 100).toFixed(2) + ' m';\n                        } else {\n                            formattedDistance = distanceFromStore.toFixed(2) + ' km';\n                        }\n                        const deliverAt = order.deliver_time\n                            ? DateTime.fromJSDate(order.confirmed_at).plus({ minutes: order.deliver_time })\n                            : order.confirmed_at;\n\n                        let jsonOrder = {\n                            id: order.id,\n                            pageId: order.pageId,\n                            customerId: order.customerId,\n                            userId: order.userId,\n                            phone: order.phone,\n                            deliverAt: deliverAt,\n                            deliver_type: order.deliver_type,\n                            deliver_time: order.deliver_time,\n                            address: order.address,\n                            status: order.status,\n                            status2: order.status2,\n                            status3: order.status3,\n                            qty_total: order.qty_total,\n                            total: order.total,\n                            createdAt: order.createdAt,\n                            items: items,\n                            distanceFromStore: formattedDistance,\n                            location_lat: order.location_lat,\n                            location_long: order.location_long,\n                            confirmed_at: order.confirmed_at,\n                            deliverd_at: order.delivered_at,\n                            payment_type: order.payment_type,\n                            payment_change: order.payment_change,\n                            comments: order.comments,\n                        }\n                        ordersArray.push(jsonOrder);\n                    }\n                }\n                res.setHeader('Content-Range',\n                    util.format('orders %d-%d/%d',\n                        _rangeIni, _rangeEnd, _totalCount));\n                res.status(200).json(ordersArray);\n            }\n        });\n    } catch (orderGetAllErr) {\n        console.error({ orderGetAllErr })\n        res.status(500).json({ message: orderGetAllErr.message });\n    }\n};\n\n// List one record by filtering by ID\nexport const order_get_one = async (req, res) => {\n    if (req.params && req.params.id) {\n        try {\n            const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n            const jsonOrder = await getOrderJson(pageId, req.params.id);\n            res.status(200).json(jsonOrder);\n        } catch (orderGetOneError) {\n            console.error({ orderGetOneError });\n            res.status(500).json({ message: orderGetOneError.message });\n        }\n    }\n}\n\n// UPDATE\nexport const order_update = async (req, res) => {\n    if (req.body && req.body.id) {\n        try {\n            const { id, operation } = req.body;\n            const pageId = req.currentUser.activePage;\n            const doc = await Order.findOne({ pageId: pageId, id: id });\n\n            if (operation === 'REJECT') {\n                const { rejectionExplanation } = req.body;\n\n                doc.status = ORDERSTATUS_REJECTED;\n                doc.sent_reject_notification = DateTime.local();\n                doc.rejection_reason = rejectionExplanation;\n                sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            } else if (operation === 'VIEW') {\n                doc.status = ORDERSTATUS_VIEWED;\n                // sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            } else if (operation === 'ACCEPT') {\n                doc.status = ORDERSTATUS_ACCEPTED;\n                // sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            } else if (operation === 'PRINT') {\n                doc.status = ORDERSTATUS_PRINTED;\n                // sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            } else if (operation === 'DELIVER') {\n                doc.status = ORDERSTATUS_DELIVERED;\n                if (doc.source !== 'whatsapp') {\n                    if (!doc.sent_shipping_notification) {\n                        await sendShippingNotification(doc.pageId, doc.userId, doc.id);\n                        doc.sent_shipping_notification = DateTime.local();\n                    }\n                }\n            } else {\n                if (req.body.status2 === 'ordered') {\n                    doc.status = ORDERSTATUS_CONFIRMED;\n                } else if (req.body.status2 === 'delivered') {\n                    doc.status = ORDERSTATUS_DELIVERED;\n                    doc.delivered_at = DateTime.local();\n                } else if (req.body.status2 === 'cancelled') {\n                    doc.status = ORDERSTATUS_DELIVERED;\n                }\n\n                if (doc.status === ORDERSTATUS_DELIVERED) {\n                    if (doc.source !== 'whatsapp') {\n                        if (!doc.sent_shipping_notification) {\n                            console.info(\"I am going to send to \" + doc.userId + \", about the order number:\" + doc.id + \" a shipping notification\");\n                            await sendShippingNotification(doc.pageId, doc.userId, doc.id);\n                            doc.sent_shipping_notification = DateTime.local();\n                        }\n                    }\n                }\n            }\n            await doc.save();\n            const jsonOrder = await getOrderJson(pageId, doc.id);\n            res.status(200).json(jsonOrder);\n        }\n        catch (orderUpdateErr) {\n            console.error(orderUpdateErr);\n            res.status(500).json({ message: orderUpdateErr.message });\n        }\n    }\n}\n\n/**\n * Delete all records from a pageID\n * @param {*} pageID \n */\nexport const deleteManyOrders = async (pageID) => {\n    return await Order.deleteMany({ pageId: pageID }).exec();\n}\n\n// export const sendShippingNotification = async order => {\n//     const { accessToken } = await getOnePageToken(order.pageId);\n\n//     const _txt = 'O seu pedido número ' + order.id + ' acabou de sair para entrega. Bom apetite!';\n\n//     const out = new Elements();\n//     out.add({ text: _txt });\n//     await Bot.send_message_tag(accessToken, order.userId, out);\n// }\n\n// List one record by filtering by ID\nexport const getOrderJson = async (pageId, orderId) => {\n    try {\n        const order = await Order.findOne({ pageId: pageId, id: orderId });\n        const customer = await getCustomerById(pageId, order.customerId);\n        const items = await getItems({ pageId: pageId, orderId: orderId, completeItems: true });\n        const store = await getStoreData(order.pageId);\n        const distanceFromStore = distanceBetweenCoordinates(store.location_lat, store.location_long, order.location_lat, order.location_long);\n        const deliverAt = order.deliver_time\n            ? DateTime.fromJSDate(order.confirmed_at).plus({ minutes: order.deliver_time })\n            : order.confirmed_at;\n        let jsonItems = [];\n        items.forEach(item => {\n            let jsonItem = {\n                id: item.id,\n                flavorId: item.flavorId,\n                sizeId: item.sizeId,\n                beverageId: item.beverageId,\n                beverage: item.beverage,\n                price: item.price,\n                qty: item.qty,\n                split: item.split,\n                flavor: item.flavor,\n                size: item.size,\n            }\n            jsonItems.push(jsonItem);\n        });\n        let jsonOrder = {\n            id: order.id,\n            customerId: order.customerId,\n            customerName: customer.first_name + ' ' + customer.last_name,\n            createdAt: order.createdAt,\n            deliverAt: deliverAt,\n            deliver_type: order.deliver_type,\n            deliver_time: order.deliver_time,\n            qty_total: order.qty_total,\n            status: order.status,\n            status2: order.status2,\n            status3: order.status3,\n            phone: order.phone,\n            address: order.address,\n            total: order.total,\n            items: jsonItems,\n            distanceFromStore: distanceFromStore,\n            location_lat: order.location_lat,\n            location_long: order.location_long,\n            confirmed_at: order.confirmed_at,\n            deliverd_at: order.delivered_at,\n            payment_type: order.payment_type,\n            payment_change: order.payment_change,\n            comments: order.comments,\n        }\n        return jsonOrder;\n    } catch (getOrderJsonErr) {\n        console.error({ getOrderJsonErr });\n        throw new Error(getOrderJsonErr.message);\n    }\n}\n\n\nexport const updateOrder = async orderData => {\n    try {\n        const { pageId, userId, source, deliverType, deliverTime, qty, qty_total, location, user,\n            phone, addrData, completeItem, confirmOrder,\n            waitingForAddress, waitingFor, waitingForData, undo, currentItem, sizeId, calcTotal,\n            originalSplit, split, currentItemSplit, eraseSplit, noBeverage,\n            paymentType, paymentChange, backToConfirmation, comments,\n            categoryId, eraseSize } = orderData;\n\n        let customerID = 0;\n        let customerData = {}\n        customerData.pageId = pageId;\n        customerData.userId = userId;\n        if (user) {\n            const { first_name, last_name, profile_pic } = user;\n            customerData.first_name = first_name;\n            customerData.last_name = last_name;\n            customerData.profile_pic = profile_pic;\n        }\n        customerData.phone = phone;\n        customerData.location = location;\n        customerData.addrData = addrData;\n        customerID = await updateCustomer(customerData);\n        const order = await Order.findOne({ pageId: pageId, userId: userId, status: ORDERSTATUS_PENDING }).exec();\n\n        if (order) {\n            orderData.orderId = order.id;\n\n            let updateOrder = false;\n            if (location) {\n                order.location_lat = location.lat;\n                order.location_long = location.long;\n                order.location_url = location.url;\n                updateOrder = true;\n            }\n\n            if (currentItem) {\n                order.currentItem = currentItem;\n                updateOrder = true;\n            }\n\n            if (source) {\n                order.source = source;\n                updateOrder = true;\n            }\n\n            if (qty) {\n                order.qty = qty;\n                updateOrder = true;\n\n                // order has total quantity.\n                // items are always 1. this variable will be passed to updateItem\n                orderData.qty = 1;\n            }\n\n            if (deliverType) {\n                order.deliver_type = deliverType;\n                updateOrder = true;\n            }\n\n            if (deliverTime) {\n                order.deliver_time = deliverTime;\n                updateOrder = true;\n            }\n\n            if (qty_total) {\n                order.qty_total = qty_total;\n                updateOrder = true;\n            }\n\n            if (originalSplit) {\n                // split increments the items number (+originalSplit)\n                //  and removes 1 (that was the original quantity asked by the user)\n                order.qty_total = order.qty_total + originalSplit - 1;\n                // saving the originalSplit in the order and...\n                order.originalSplit = originalSplit;\n                // ...always saving the split as originalSplit in item.\n                // because the split in the order will be decreased until 1\n                orderData.split = originalSplit;\n                updateOrder = true;\n            }\n\n            // starts from 1 until originalSplit\n            if (currentItemSplit) {\n                order.currentItemSplit = currentItemSplit;\n                updateOrder = true;\n            }\n\n            // originalSplit is passed as parameter only once: when user choose the\n            // split division. split is passed as the same value as originalSplit, so, here\n            // I am changing the quantity to assure the item will receive correct data.\n            // originalSplit changes the quantity, so, it can't be passed more than once.\n            if (split) {\n                orderData.sizeId = order.currentItemSize;\n                orderData.qty = 1;\n            }\n\n            // eraseSplit is sent when I am gonna ask the user\n            // about the next pizza.\n            if (eraseSplit) {\n                order.originalSplit = null;\n                order.currentItemSplit = null;\n                updateOrder = true;\n            }\n\n            if (customerID > 0) {\n                order.customerId = customerID;\n                updateOrder = true;\n            }\n\n            if (phone) {\n                order.phone = phone;\n                updateOrder = true;\n            }\n            if (addrData) {\n                order.address = addrData.formattedAddress;\n                if (addrData.location_lat && addrData.location_long) {\n                    order.location_lat = addrData.location_lat;\n                    order.location_long = addrData.location_long;\n                }\n                updateOrder = true;\n            }\n\n            if (sizeId) {\n                order.currentItemSize = sizeId;\n                updateOrder = true;\n            }\n\n            /** EraseSize only in the item, because, user can navigate through categories\n             * of the same size.\n             */\n            // if (eraseSize) {\n            //     order.currentItemSize = null;\n            // }\n\n            if (completeItem) {\n                if (order.item_complete) order.item_complete = order.item_complete + 1;\n                else order.item_complete = 1;\n                updateOrder = true;\n            }\n\n            if (confirmOrder) {\n                order.status = ORDERSTATUS_CONFIRMED;\n                order.confirmed_at = DateTime.local();\n                updateOrder = true;\n            } else {\n                // when updateorder with flavor, I dont have neither split nor originalSplit\n                // but, if the order has an originalSplit, I am going to send it to the item.\n                // This code should run only if I am not confirming the order.\n                if (order.originalSplit && order.originalSplit > 1) {\n                    orderData.split = order.originalSplit;\n                    updateOrder = true;\n                }\n            }\n\n            if (typeof waitingForAddress === 'boolean') {\n                order.waitingForAddress = waitingForAddress;\n                updateOrder = true;\n            }\n\n            if (waitingFor) {\n                order.waitingFor = waitingFor;\n                updateOrder = true;\n\n                if (!undo)\n                    order.undo = null;\n            }\n\n            if (waitingForData) {\n                order.waitingForData = waitingForData;\n                updateOrder = true;\n            }\n\n            if (undo) {\n                order.undo = undo;\n                updateOrder = true;\n            }\n\n            if (backToConfirmation) {\n                order.backToConfirmation = backToConfirmation;\n                updateOrder = true;\n            }\n\n            if (comments) {\n                order.comments = comments;\n                updateOrder = true;\n            }\n\n\n            if (typeof calcTotal === 'boolean') {\n                const total = await getItemsTotal({ orderId: order.id, pageId: order.pageId });\n                if (total > 0 && total !== order.total) {\n                    order.total = total;\n                    updateOrder = true;\n                }\n            }\n\n            if (typeof noBeverage === 'boolean') {\n                order.no_beverage = noBeverage;\n                updateOrder = true;\n            }\n\n            if (paymentType) {\n                order.payment_type = paymentType;\n                updateOrder = true;\n            }\n\n            if (paymentChange) {\n                order.payment_change = paymentChange;\n                updateOrder = true;\n            }\n\n            if (categoryId) {\n                order.currentItemCategory = categoryId;\n                updateOrder = true;\n            }\n\n            if (updateOrder)\n                await order.save();\n\n            await updateItem(orderData);\n        } else {\n            // const count = await Order.find({ pageId: pageId }).count().exec();\n            // let orderId = 1;\n            // if (count) orderId = count + 1;\n\n            const resultLastId = await Order.find({ pageId: pageId }).select('id').sort('-id').limit(1).exec();\n            let orderId = 1;\n            if (resultLastId && resultLastId.length) orderId = resultLastId[0].id + 1;\n\n            const record = new Order({\n                id: orderId,\n                pageId: pageId,\n                userId: userId,\n                qty_total: qty || 0,\n                location_lat: location ? location.lat : null,\n                location_long: location ? location.long : null,\n                location_url: location ? location.url : null,\n                waitingForAddress: typeof waitingForAddress === 'boolean' ? waitingForAddress : false,\n                deliver_type: deliverType,\n                status: ORDERSTATUS_PENDING,\n            });\n            await record.save();\n            orderData.orderId = record.id;\n            await updateItem(orderData);\n        }\n    } catch (updateOrderError) {\n        console.error({ updateOrderError });\n        throw updateOrderError;\n    }\n}\n\nexport const getOrderPending = async orderData => {\n    const { userId, pageId, isComplete } = orderData;\n\n    const _order = await Order.findOne({\n        userId: userId, pageId: pageId,\n        status: ORDERSTATUS_PENDING,\n    }).exec();\n    if (_order) {\n        if (isComplete && isComplete === true) {\n            const _items = await getItems({ orderId: _order.id, pageId: pageId, completeItems: isComplete });\n\n            const completeOrder = {\n                order: _order,\n                items: _items,\n            };\n\n            return completeOrder;\n        } else {\n            const headerOrder = {\n                order: _order,\n            }\n            return headerOrder;\n        }\n    } else return null;\n}\n\nexport const getLastOrder = async pageID => {\n    const resultLastId = await Order.find({ pageId: pageID, status: { $gte: ORDERSTATUS_CONFIRMED } }).select('id').sort('-confirmed_at').limit(1).exec();\n    if (resultLastId && resultLastId.length)\n        return resultLastId[0].id;\n    else return 0;\n}\n\nexport const getLastPendingOrders = async pageID => {\n    const orders = await Order.find({ pageId: pageID, status: ORDERSTATUS_CONFIRMED })\n        .select('id confirmed_at')\n        .sort('-confirmed_at')\n        .exec();\n\n    if (orders && orders.length)\n        return orders;\n    else return [];\n}\n\n\nexport const getOrdersCustomerStat = async orderData => {\n    const { pageId, customerId } = orderData;\n\n    const orders = await Order.find({ pageId: pageId, customerId: customerId }).select('createdAt total').sort('createdAt').exec();\n    let total_spent = 0;\n    let nb_orders = 0;\n    let first_order = Date.now();\n    let last_order = null;\n    for (const order of orders) {\n        total_spent += order.total;\n        nb_orders += 1;\n\n        if (first_order >= order.createdAt) {\n            first_order = order.createdAt;\n        }\n        if (last_order <= order.createdAt) {\n            last_order = order.createdAt;\n        }\n    }\n    return { total_spent, nb_orders, first_order, last_order };\n}\n\nexport const cancelOrder = async orderData => {\n    const { pageId, userId } = orderData;\n\n    await Order.findOneAndRemove({ pageId: pageId, userId: userId, status: ORDERSTATUS_PENDING },\n        async (err, res) => {\n            if (!err) {\n                if (res) {\n                    const orderId = res.id;\n                    await cancelItems(pageId, orderId);\n                } else {\n                    console.error('Items from this order shall be deleted manually');\n                    console.info(res);\n                }\n            } else {\n                console.error('Order.findOneAndDelete');\n                console.error(err);\n            }\n        });\n}\n\n\n/**\n * Trying to reduce the number of calls to getFlavors and getSizes.\n * @param {*} flavors\n * @param {*} sizes\n * @param {*} orderData\n */\n// const getPerformaticItems = async (flavors, sizes, orderData) => {\n//     orderData.completeItems = false;\n//     let items = await getItems(orderData);\n//     for (let i = 0; i < items.length; i++) {\n//         let item = items[i];\n//         if (flavors[item.flavorId]) {\n//             item.flavor = flavors[item.flavorId];\n//         } else {\n//             const flavor = await getFlavor(orderData.pageId, item.flavorId);\n//             if (flavor) {\n//                 item.flavor = flavors[flavor.id] = flavor.flavor;\n//             }\n//         }\n//         if (sizes[item.sizeId]) {\n//             item.size = sizes[item.sizeId];\n//         } else {\n//             const size = await getSize(orderData.pageId, item.sizeId);\n//             if (size) {\n//                 item.size = sizes[size.id] = size.size;\n//             }\n//         }\n//     }\n//     return items;\n// }\n\n"],"file":"ordersController.js"}