{"version":3,"sources":["../../../src/api/controllers/ordersController.js"],"names":["ORDERSTATUS_PENDING","ORDERSTATUS_CONFIRMED","ORDERSTATUS_VIEWED","ORDERSTATUS_ACCEPTED","ORDERSTATUS_PRINTED","ORDERSTATUS_DELIVERED","ORDERSTATUS_REJECTED","ORDERSTATUS_CANCELLED","order_get_all","req","res","sortObj","query","sort","rangeObj","range","filterObj","filter","queryParam","currentUser","activePage","$gte","filterField","length","i","value","filterValues","Array","isArray","dateIni","DateTime","fromISO","set","hour","minute","second","setZone","dateEnd","invalid","toISO","$lt","$in","date","endsWith","replace","rezonedIni","rezonedEnd","plus","days","Object","values","body","simpleOrder","simpleOrderGetAll","ret","fullOrderGetAll","console","log","setHeader","util","format","rangeIni","rangeEnd","totalCount","status","json","ordersArray","error","orderGetAllErr","message","order_get_one","params","id","pageId","getOrderJson","jsonOrder","orderGetOneError","order_update","operation","Order","findOne","doc","updateOrder","rejectionExplanation","sent_reject_notification","local","rejection_reason","userId","store","sendNotification","phone","accept_notification","deliver_notification","missing_address_notification","question","comments","status2","delivered_at","source","sent_shipping_notification","info","save","deleteManyOrders","pageID","deleteMany","exec","orderId","order","customerId","customer","completeItems","items","distanceFromStore","location_lat","location_long","deliverAt","deliver_time","fromJSDate","confirmed_at","minutes","updatedAt","jsonItems","forEach","item","jsonItem","flavorId","sizeId","beverageId","beverage","price","qty","split","flavor","size","push","customerName","first_name","last_name","createdAt","deliver_type","qty_total","status3","address","total","payment_type","payment_change","delivery_fee","surcharge_percent","surcharge_amount","getOrderJsonErr","Error","orderData","deliverType","deliverTime","location","user","addrData","completeItem","confirmOrder","waitingForAddress","waitingFor","waitingForData","undo","currentItem","calcTotal","originalSplit","currentItemSplit","eraseSplit","noBeverage","paymentType","paymentChange","backToConfirmation","categoryId","storeAddress","customerID","customerData","profile_pic","currentStatus","calcDistance","calc","lat","location_url","url","formattedAddress","storeData","distance_from_store","delivery_fees","currentItemSize","store_address","item_complete","no_beverage","currentItemCategory","Date","now","find","select","limit","resultLastId","record","updateOrderError","queryObj","result","offset","asideTotalAmount","asideTotalItems","formattedDistance","toFixed","refDate","deliverd_at","findError","getOrderPending","isComplete","_order","_items","completeOrder","headerOrder","getLastUserOrder","resultLast","getLastOrder","getLastPendingOrders","orders","getOrdersCustomerStat","total_spent","nb_orders","first_order","last_order","cancelOrder","findOneAndRemove","err","whatsAppId"],"mappings":"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","sourcesContent":["import Order from '../models/orders';\nimport util from 'util';\nimport { updateItem, getItems, getItemsTotal, cancelItems } from './itemsController';\nimport { updateCustomer, getCustomerById } from './customersController';\nimport { getStoreData, calcDeliveryFee } from './storesController';\nimport {\n    configSortQuery, configRangeQueryNew,\n    configFilterQueryMultiple, distanceBetweenCoordinates,\n} from '../util/util';\nimport { DateTime } from 'luxon';\n// import { Bot, Elements } from 'facebook-messenger-bot';\n// import { getOnePageToken } from './pagesController';\nimport { sendShippingNotification, sendRejectionNotification } from '../bot/botController';\nimport { emitEvent } from './redisController';\nimport { emitEventWhats } from './socketController';\nexport const ORDERSTATUS_PENDING = 0;\nexport const ORDERSTATUS_CONFIRMED = 1;\nexport const ORDERSTATUS_VIEWED = 2;\nexport const ORDERSTATUS_ACCEPTED = 3;\nexport const ORDERSTATUS_PRINTED = 4;\nexport const ORDERSTATUS_DELIVERED = 5;\nexport const ORDERSTATUS_REJECTED = 8;\nexport const ORDERSTATUS_CANCELLED = 9;\n\n// List all orders\n// TODO: use filters in the query req.query\nexport const order_get_all = async (req, res) => {\n    try {\n        const sortObj = configSortQuery(req.query.sort);\n        const rangeObj = configRangeQueryNew(req.query.range);\n        const filterObj = configFilterQueryMultiple(req.query.filter);\n\n        let queryParam = {};\n        if (req.currentUser.activePage) {\n            queryParam['pageId'] = req.currentUser.activePage;\n        }\n\n        // simple orders are querying all orders, even the ones not confirmed.\n        queryParam['status'] = { $gte: ORDERSTATUS_CONFIRMED };\n\n        if (!sortObj) {\n            sortObj['createdAt'] = 'DESC';\n        }\n\n        if (filterObj && filterObj.filterField && filterObj.filterField.length) {\n            for (let i = 0; i < filterObj.filterField.length; i++) {\n                let filter = filterObj.filterField[i];\n                const value = filterObj.filterValues[i];\n                if (Array.isArray(value)) {\n                    if (value.length === 2) {\n                        const dateIni = DateTime.fromISO(value[0]).set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                        const dateEnd = DateTime.fromISO(value[1]).set({ hour: 23, minute: 59, second: 59 }).setZone('UTC');\n\n                        if (!dateIni.invalid && !dateEnd.invalid)// is date\n                            queryParam[filter] = { $gte: dateIni.toISO(), $lt: dateEnd.toISO() };\n                        else\n                            queryParam[filter] = { $in: value };\n                    } else\n                        queryParam[filter] = { $in: value };\n                } else {\n                    const date = DateTime.fromISO(value);\n                    if (!date.invalid) { // is a date\n                        // date comes with the current time, so, I am setting it to midnight.\n                        // Mongoose stores data on GMT timezone\n                        if (filter.endsWith('_rangestart')) {\n                            filter = filter.replace('_rangestart', '');\n                            const rezonedIni = date.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                            queryParam[filter] = { $gte: rezonedIni.toISO() };\n                        } else if (filter.endsWith('_rangeend')) {\n                            filter = filter.replace('_rangeend', '');\n                            const rezonedIni = date.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                            const rezonedEnd = rezonedIni.plus({ days: 1 });\n                            if (queryParam[filter])\n                                queryParam[filter] = { $gte: Object.values(queryParam[filter])[0], $lt: rezonedEnd.toISO() };\n                            else\n                                queryParam[filter] = { $lt: rezonedEnd.toISO() };\n                        } else {\n                            const rezonedIni = date.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                            const rezonedEnd = rezonedIni.plus({ days: 1 });\n                            queryParam[filter] = { $gte: rezonedIni.toISO(), $lt: rezonedEnd.toISO() };\n                        }\n                    } else\n                        queryParam[filter] = value;\n                }\n            }\n        }\n\n        let ret;\n        if (req.body.simpleOrder)\n            ret = await simpleOrderGetAll(queryParam, sortObj, rangeObj);\n        else ret = await fullOrderGetAll(queryParam, sortObj, rangeObj);\n\n        console.log('ret from fullOrderGetAll:', ret);\n\n        res.setHeader('Content-Range',\n            util.format('orders %d-%d/%d',\n                ret.rangeIni, ret.rangeEnd, ret.totalCount));\n        res.status(200).json(ret.ordersArray);\n\n    } catch (orderGetAllErr) {\n        console.error({ orderGetAllErr })\n        res.status(500).json({ message: orderGetAllErr.message });\n    }\n};\n\n// List one record by filtering by ID\nexport const order_get_one = async (req, res) => {\n    if (req.params && req.params.id) {\n        try {\n            const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n            const jsonOrder = await getOrderJson(pageId, req.params.id);\n            res.status(200).json(jsonOrder);\n        } catch (orderGetOneError) {\n            console.error({ orderGetOneError });\n            res.status(500).json({ message: orderGetOneError.message });\n        }\n    }\n}\n\n// UPDATE\nexport const order_update = async (req, res) => {\n    if (req.body && req.body.id) {\n        try {\n            const { id, operation } = req.body;\n            const pageId = req.currentUser.activePage;\n            const doc = await Order.findOne({ pageId: pageId, id: id });\n\n            let updateOrder = true;\n\n            if (operation === 'REJECT') {\n                const { rejectionExplanation } = req.body;\n\n                doc.status = ORDERSTATUS_REJECTED;\n                doc.sent_reject_notification = DateTime.local();\n                doc.rejection_reason = rejectionExplanation;\n                sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            } else if (operation === 'VIEW') {\n                doc.status = ORDERSTATUS_VIEWED;\n                // sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            } else if (operation === 'ACCEPT') {\n                doc.status = ORDERSTATUS_ACCEPTED;\n                const store = await getStoreData(doc.pageId);\n                sendNotification(store.phone, doc.userId, store.accept_notification);\n            } else if (operation === 'PRINT') {\n                doc.status = ORDERSTATUS_PRINTED;\n                // sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            } else if (operation === 'DELIVER') {\n                doc.status = ORDERSTATUS_DELIVERED;\n                const store = await getStoreData(doc.pageId);\n                sendNotification(store.phone, doc.userId, store.deliver_notification);\n            } else if (operation === 'MISSING_ADDRESS') {\n                updateOrder = false;\n                const store = await getStoreData(doc.pageId);\n                sendNotification(store.phone, doc.userId, store.missing_address_notification);\n            } else if (operation === 'OPEN_QUESTION') {\n                const { question } = req.body;\n                doc.comments = doc.comments + '\\n' + question;\n                const store = await getStoreData(doc.pageId);\n                sendNotification(store.phone, doc.userId, question);\n            } else {\n                if (req.body.status2 === 'ordered') {\n                    doc.status = ORDERSTATUS_CONFIRMED;\n                } else if (req.body.status2 === 'delivered') {\n                    doc.status = ORDERSTATUS_DELIVERED;\n                    doc.delivered_at = DateTime.local();\n                } else if (req.body.status2 === 'cancelled') {\n                    doc.status = ORDERSTATUS_DELIVERED;\n                }\n                if (doc.status === ORDERSTATUS_DELIVERED) {\n                    if (doc.source !== 'whatsapp') {\n                        if (!doc.sent_shipping_notification) {\n                            console.info('I am going to send to ' + doc.userId + ', about the order number:' + doc.id + ' a shipping notification');\n                            await sendShippingNotification(doc.pageId, doc.userId, doc.id);\n                            doc.sent_shipping_notification = DateTime.local();\n                        }\n                    }\n                }\n            }\n            if (updateOrder)\n                await doc.save();\n            const jsonOrder = await getOrderJson(pageId, doc.id);\n            res.status(200).json(jsonOrder);\n        } catch (orderUpdateErr) {\n            console.error(orderUpdateErr);\n            res.status(500).json({ message: orderUpdateErr.message });\n        }\n    }\n}\n\n/**\n * Delete all records from a pageID\n * @param {*} pageID\n */\nexport const deleteManyOrders = async (pageID) => {\n    return await Order.deleteMany({ pageId: pageID }).exec();\n}\n\n// export const sendShippingNotification = async order => {\n//     const { accessToken } = await getOnePageToken(order.pageId);\n\n//     const _txt = 'O seu pedido número ' + order.id + ' acabou de sair para entrega. Bom apetite!';\n\n//     const out = new Elements();\n//     out.add({ text: _txt });\n//     await Bot.send_message_tag(accessToken, order.userId, out);\n// }\n\n// List one record by filtering by ID\nexport const getOrderJson = async (pageId, orderId) => {\n    try {\n        const order = await Order.findOne({ pageId: pageId, id: orderId });\n        const customer = await getCustomerById(pageId, order.customerId);\n        const items = await getItems({ pageId: pageId, orderId: orderId, completeItems: true });\n        const store = await getStoreData(order.pageId);\n        const distanceFromStore = distanceBetweenCoordinates(store.location_lat, store.location_long, order.location_lat, order.location_long);\n        const deliverAt = order.deliver_time\n            ? DateTime.fromJSDate(order.confirmed_at).plus({ minutes: order.deliver_time })\n            : order.updatedAt;\n        let jsonItems = [];\n        if (items && items.length > 0) {\n            items.forEach(item => {\n                let jsonItem = {\n                    id: item.id,\n                    flavorId: item.flavorId,\n                    sizeId: item.sizeId,\n                    beverageId: item.beverageId,\n                    beverage: item.beverage,\n                    price: item.price,\n                    qty: item.qty,\n                    split: item.split,\n                    flavor: item.flavor,\n                    size: item.size,\n                }\n                jsonItems.push(jsonItem);\n            });\n        }\n        let jsonOrder = {\n            id: order.id,\n            customerId: order.customerId,\n            customerName: customer.first_name + ' ' + customer.last_name,\n            createdAt: order.createdAt,\n            updatedAt: order.updatedAt,\n            deliverAt: deliverAt,\n            confirmed_at: order.confirmed_at,\n            delivered_at: order.delivered_at,\n            deliver_type: order.deliver_type,\n            deliver_time: order.deliver_time,\n            qty_total: order.qty_total,\n            status: order.status,\n            status2: order.status2,\n            status3: order.status3,\n            phone: order.phone,\n            address: order.address,\n            total: order.total,\n            items: jsonItems,\n            distanceFromStore: distanceFromStore,\n            location_lat: order.location_lat,\n            location_long: order.location_long,\n            payment_type: order.payment_type,\n            payment_change: order.payment_change,\n            comments: order.comments,\n            delivery_fee: order.delivery_fee,\n            surcharge_percent: order.surcharge_percent,\n            surcharge_amount: order.surcharge_amount,\n        }\n        return jsonOrder;\n    } catch (getOrderJsonErr) {\n        console.error({ getOrderJsonErr });\n        throw new Error(getOrderJsonErr.message);\n    }\n}\n\n\nexport const updateOrder = async orderData => {\n    try {\n        const { pageId, userId, source, deliverType, deliverTime, qty, qty_total, location, user,\n            phone, addrData, completeItem, confirmOrder,\n            waitingForAddress, waitingFor, waitingForData, undo, currentItem, sizeId, calcTotal,\n            originalSplit, split, currentItemSplit, eraseSplit, noBeverage,\n            paymentType, paymentChange, backToConfirmation, comments,\n            categoryId, surcharge_percent, surcharge_amount,\n            storeAddress } = orderData;\n\n        let customerID = 0;\n        let customerData = {}\n        customerData.pageId = pageId;\n        customerData.userId = userId;\n        if (user) {\n            const { first_name, last_name, profile_pic } = user;\n            customerData.first_name = first_name;\n            customerData.last_name = last_name;\n            customerData.profile_pic = profile_pic;\n        }\n        customerData.phone = phone;\n        customerData.location = location;\n        customerData.addrData = addrData;\n        customerID = await updateCustomer(customerData);\n        const order = await Order.findOne({ pageId: pageId, userId: userId, status: { $lt: ORDERSTATUS_REJECTED } }).exec();\n\n        if (order) {\n            const currentStatus = order.status;\n\n            orderData.orderId = order.id;\n\n            let updateOrder = false;\n\n            let calcDistance = {\n                calc: false,\n                lat: 0,\n                long: 0,\n            }\n\n            if (location) {\n                order.location_lat = location.lat;\n                order.location_long = location.long;\n                order.location_url = location.url;\n                updateOrder = true;\n\n                calcDistance.calc = true;\n                calcDistance.lat = location.lat;\n                calcDistance.long = location.long;\n            }\n\n            if (addrData) {\n                order.address = addrData.formattedAddress;\n                if (addrData.location_lat && addrData.location_long) {\n                    order.location_lat = addrData.location_lat;\n                    order.location_long = addrData.location_long;\n\n                    calcDistance.calc = true;\n                    calcDistance.lat = addrData.location_lat;\n                    calcDistance.long = addrData.location_long;\n                }\n                updateOrder = true;\n            }\n\n            if (calcDistance.calc) {\n                const storeData = await getStoreData(pageId);\n                if (storeData.location_lat && storeData.location_long) {\n                    const distanceFromStore = distanceBetweenCoordinates(storeData.location_lat, storeData.location_long, calcDistance.lat, calcDistance.long)\n                    order.distance_from_store = distanceFromStore;\n                    order.delivery_fee = calcDeliveryFee(storeData.delivery_fees, distanceFromStore);\n                }\n            }\n\n            if (currentItem) {\n                order.currentItem = currentItem;\n                updateOrder = true;\n            }\n\n            if (source) {\n                order.source = source;\n                updateOrder = true;\n            }\n\n            if (qty) {\n                order.qty = qty;\n                updateOrder = true;\n\n                // order has total quantity.\n                // items are always 1. this variable will be passed to updateItem\n                orderData.qty = 1;\n            }\n\n            if (deliverType) {\n                order.deliver_type = deliverType;\n                updateOrder = true;\n            }\n\n            if (deliverTime) {\n                order.deliver_time = deliverTime;\n                updateOrder = true;\n            }\n\n            if (qty_total) {\n                order.qty_total = qty_total;\n                updateOrder = true;\n            }\n\n            if (originalSplit) {\n                // split increments the items number (+originalSplit)\n                //  and removes 1 (that was the original quantity asked by the user)\n                order.qty_total = order.qty_total + originalSplit - 1;\n                // saving the originalSplit in the order and...\n                order.originalSplit = originalSplit;\n                // ...always saving the split as originalSplit in item.\n                // because the split in the order will be decreased until 1\n                orderData.split = originalSplit;\n                updateOrder = true;\n            }\n\n            // starts from 1 until originalSplit\n            if (currentItemSplit) {\n                order.currentItemSplit = currentItemSplit;\n                updateOrder = true;\n            }\n\n            // originalSplit is passed as parameter only once: when user choose the\n            // split division. split is passed as the same value as originalSplit, so, here\n            // I am changing the quantity to assure the item will receive correct data.\n            // originalSplit changes the quantity, so, it can't be passed more than once.\n            if (split) {\n                orderData.sizeId = order.currentItemSize;\n                orderData.qty = 1;\n            }\n\n            // eraseSplit is sent when I am gonna ask the user\n            // about the next pizza.\n            if (eraseSplit) {\n                order.originalSplit = null;\n                order.currentItemSplit = null;\n                updateOrder = true;\n            }\n\n            if (customerID > 0) {\n                order.customerId = customerID;\n                updateOrder = true;\n            }\n\n            if (phone) {\n                order.phone = phone;\n                updateOrder = true;\n            }\n\n            if (sizeId) {\n                order.currentItemSize = sizeId;\n                updateOrder = true;\n            }\n\n            if (surcharge_percent) {\n                order.surcharge_percent = surcharge_percent / 100;\n                updateOrder = true;\n            }\n\n            if (surcharge_amount) {\n                order.surcharge_amount = surcharge_amount;\n                updateOrder = true;\n            }\n\n            if (storeAddress) {\n                order.store_address = storeAddress;\n                updateOrder = true;\n            }\n\n            /** EraseSize only in the item, because, user can navigate through categories\n             * of the same size.\n             */\n            // if (eraseSize) {\n            //     order.currentItemSize = null;\n            // }\n\n            if (completeItem) {\n                if (order.item_complete) order.item_complete = order.item_complete + 1;\n                else order.item_complete = 1;\n                updateOrder = true;\n            }\n\n            if (confirmOrder) {\n                order.status = ORDERSTATUS_CONFIRMED;\n                order.confirmed_at = DateTime.local();\n                updateOrder = true;\n            } else {\n                // when updateorder with flavor, I dont have neither split nor originalSplit\n                // but, if the order has an originalSplit, I am going to send it to the item.\n                // This code should run only if I am not confirming the order.\n                if (order.originalSplit && order.originalSplit > 1) {\n                    orderData.split = order.originalSplit;\n                    updateOrder = true;\n                }\n            }\n\n            if (typeof waitingForAddress === 'boolean') {\n                order.waitingForAddress = waitingForAddress;\n                updateOrder = true;\n            }\n\n            if (waitingFor) {\n                order.waitingFor = waitingFor;\n                updateOrder = true;\n\n                if (!undo)\n                    order.undo = null;\n            }\n\n            if (waitingForData) {\n                order.waitingForData = waitingForData;\n                updateOrder = true;\n            }\n\n            if (undo) {\n                order.undo = undo;\n                updateOrder = true;\n            }\n\n            if (backToConfirmation) {\n                order.backToConfirmation = backToConfirmation;\n                updateOrder = true;\n            }\n\n            if (comments) {\n                order.comments = comments;\n                updateOrder = true;\n            }\n\n            if (typeof calcTotal === 'boolean') {\n                let total = await getItemsTotal({ orderId: order.id, pageId: order.pageId });\n                if (order.delivery_fee > 0) total += order.delivery_fee;\n                if (order.surcharge_percent > 0) total += total * order.surcharge_percent;\n                if (order.surcharge_amount > 0) total += order.surcharge_amount;\n\n                if (total > 0 && total !== order.total) {\n                    order.total = total;\n                    updateOrder = true;\n                }\n            }\n\n            if (typeof noBeverage === 'boolean') {\n                order.no_beverage = noBeverage;\n                updateOrder = true;\n            }\n\n            if (paymentType) {\n                order.payment_type = paymentType;\n                updateOrder = true;\n            }\n\n            if (paymentChange) {\n                order.payment_change = paymentChange;\n                updateOrder = true;\n            }\n\n            if (categoryId) {\n                order.currentItemCategory = categoryId;\n                updateOrder = true;\n            }\n\n            if (updateOrder)\n                await order.save();\n\n            await updateItem(orderData);\n\n            if (confirmOrder || comments) {\n                // every time new comments are stores I am passing the confirmOrder parameter. So,\n                // here I check if this order was not already confirmed.\n                if (confirmOrder && currentStatus !== ORDERSTATUS_CONFIRMED)\n                    emitEvent(pageId, 'new-order', { id: order.id, confirmed_at: order.confirmed_at });\n                else if (comments)\n                    emitEvent(pageId, 'new-comment', { id: order.id, updatedAt: Date.now() });\n            }\n\n        } else {\n            // const count = await Order.find({ pageId: pageId }).count().exec();\n            // let orderId = 1;\n            // if (count) orderId = count + 1;\n\n            const resultLastId = await Order.find({ pageId: pageId }).select('id').sort('-id').limit(1).exec();\n            let orderId = 1;\n            if (resultLastId && resultLastId.length) orderId = resultLastId[0].id + 1;\n\n            const record = new Order({\n                id: orderId,\n                pageId: pageId,\n                userId: userId,\n                qty_total: qty || 0,\n                location_lat: location ? location.lat : null,\n                location_long: location ? location.long : null,\n                location_url: location ? location.url : null,\n                waitingForAddress: typeof waitingForAddress === 'boolean' ? waitingForAddress : false,\n                waitingFor: waitingFor,\n                comments: comments,\n                deliver_type: deliverType,\n                status: ORDERSTATUS_PENDING,\n            });\n            await record.save();\n            orderData.orderId = record.id;\n            await updateItem(orderData);\n        }\n    } catch (updateOrderError) {\n        console.error({ updateOrderError });\n        throw updateOrderError;\n    }\n}\n\nconst fullOrderGetAll = async (queryObj, sortObj, rangeObj) => {\n    try {\n\n        const ret = {\n            rangeIni: 0,\n            rangeEnd: 0,\n            totalCount: 0,\n            ordersArray: [],\n        }\n\n        const result = await Order.find(queryObj).sort(sortObj).exec();\n\n        ret.rangeIni = 0;\n        ret.rangeEnd = result.length;\n        if (rangeObj) {\n            ret.rangeIni = rangeObj.offset <= result.length ? rangeObj.offset : result.length;\n            ret.rangeEnd = (rangeObj.offset + rangeObj.limit) <= result.length ? rangeObj.offset + rangeObj.limit : result.length;\n        }\n        ret.totalCount = result.length;\n        ret.ordersArray = [];\n        if (result && result.length && result.length > 0) {\n\n            // workaround to show totalamount and totalitems in the frontend, because\n            // I am only sending part of the list (pagination)\n            let asideTotalAmount = 0;\n            let asideTotalItems = result.length;\n            for (const order of result) {\n                asideTotalAmount = asideTotalAmount + order.total;\n            }\n            // workaround end: all orders will receive these values.\n\n            const store = await getStoreData(result[0].pageId);\n            for (let i = ret.rangeIni; i < ret.rangeEnd; i++) {\n                const order = result[i];\n                const items = await getItems({ orderId: order.id, pageId: order.pageId, completeItems: false });\n                const distanceFromStore = distanceBetweenCoordinates(store.location_lat, store.location_long, order.location_lat, order.location_long);\n                let formattedDistance;\n                if (distanceFromStore < 1) {\n                    formattedDistance = (distanceFromStore * 100).toFixed(2) + ' m';\n                } else {\n                    formattedDistance = distanceFromStore.toFixed(2) + ' km';\n                }\n\n                const refDate = order.confirmed_at || order.createdAt;\n\n                const deliverAt = order.deliver_time\n                    ? DateTime.fromJSDate(refDate).plus({ minutes: order.deliver_time })\n                    : refDate;\n\n                let jsonOrder = {\n                    id: order.id,\n                    pageId: order.pageId,\n                    customerId: order.customerId,\n                    userId: order.userId,\n                    phone: order.phone,\n                    deliverAt: deliverAt,\n                    deliver_type: order.deliver_type,\n                    deliver_time: order.deliver_time,\n                    address: order.address,\n                    status: order.status,\n                    status2: order.status2,\n                    status3: order.status3,\n                    qty_total: order.qty_total,\n                    total: order.total,\n                    createdAt: order.createdAt,\n                    updatedAt: order.updatedAt,\n                    items: items,\n                    distanceFromStore: formattedDistance,\n                    location_lat: order.location_lat,\n                    location_long: order.location_long,\n                    confirmed_at: order.confirmed_at,\n                    deliverd_at: order.delivered_at,\n                    payment_type: order.payment_type,\n                    payment_change: order.payment_change,\n                    comments: order.comments,\n                    delivery_fee: order.delivery_fee,\n                    surcharge_percent: order.surcharge_percent,\n                    surcharge_amount: order.surcharge_amount,\n                    asideTotalAmount: asideTotalAmount,\n                    asideTotalItems: asideTotalItems,\n                }\n                ret.ordersArray.push(jsonOrder);\n            }\n        }\n        return ret;\n    } catch (error) {\n\n    }\n}\n\nconst simpleOrderGetAll = async (query, sort, rangeObj) => {\n    let ret = {\n        rangeIni: 0,\n        rangeEnd: 0,\n        totalCount: 0,\n        ordersArray: [],\n    }\n\n    Order.find(query).sort(sort).exec(async (findError, result) => {\n        if (findError) {\n            console.error({ findError });\n            throw new Error(findError.message);\n        } else {\n            ret.rangeIni = 0;\n            ret.rangeEnd = result.length;\n            if (rangeObj) {\n                ret.rangeIni = rangeObj.offset <= result.length ? rangeObj.offset : result.length;\n                ret.rangeEnd = (rangeObj.offset + rangeObj.limit) <= result.length ? rangeObj.offset + rangeObj.limit : result.length;\n            }\n            ret.totalCount = result.length;\n            ret.ordersArray = [];\n            if (result && result.length && result.length > 0) {\n\n                // workaround to show totalamount and totalitems in the frontend, because\n                // I am only sending part of the list (pagination)\n                let asideTotalAmount = 0;\n                let asideTotalItems = result.length;\n                for (const order of result) {\n                    asideTotalAmount = asideTotalAmount + order.total;\n                }\n                // workaround end: all orders will receive these values.\n\n                const store = await getStoreData(result[0].pageId);\n                for (let i = ret.rangeIni; i < ret.rangeEnd; i++) {\n                    const order = result[i];\n                    const items = await getItems({ orderId: order.id, pageId: order.pageId, completeItems: false });\n                    const distanceFromStore = distanceBetweenCoordinates(store.location_lat, store.location_long, order.location_lat, order.location_long);\n                    let formattedDistance;\n                    if (distanceFromStore < 1) {\n                        formattedDistance = (distanceFromStore * 100).toFixed(2) + ' m';\n                    } else {\n                        formattedDistance = distanceFromStore.toFixed(2) + ' km';\n                    }\n                    const deliverAt = order.deliver_time\n                        ? DateTime.fromJSDate(order.confirmed_at).plus({ minutes: order.deliver_time })\n                        : order.confirmed_at;\n\n                    let jsonOrder = {\n                        id: order.id,\n                        pageId: order.pageId,\n                        customerId: order.customerId,\n                        userId: order.userId,\n                        phone: order.phone,\n                        deliverAt: deliverAt,\n                        deliver_type: order.deliver_type,\n                        deliver_time: order.deliver_time,\n                        address: order.address,\n                        status: order.status,\n                        status2: order.status2,\n                        status3: order.status3,\n                        qty_total: order.qty_total,\n                        total: order.total,\n                        createdAt: order.createdAt,\n                        items: items,\n                        distanceFromStore: formattedDistance,\n                        location_lat: order.location_lat,\n                        location_long: order.location_long,\n                        confirmed_at: order.confirmed_at,\n                        deliverd_at: order.delivered_at,\n                        payment_type: order.payment_type,\n                        payment_change: order.payment_change,\n                        comments: order.comments,\n                        delivery_fee: order.delivery_fee,\n                        surcharge_percent: order.surcharge_percent,\n                        surcharge_amount: order.surcharge_amount,\n                        asideTotalAmount: asideTotalAmount,\n                        asideTotalItems: asideTotalItems,\n                    }\n                    ret.ordersArray.push(jsonOrder);\n                }\n            }\n        }\n    });\n\n    return ret;\n}\n\nexport const getOrderPending = async orderData => {\n    const { userId, pageId, isComplete } = orderData;\n\n    const _order = await Order.findOne({\n        userId: userId, pageId: pageId,\n        status: { $lt: ORDERSTATUS_DELIVERED },\n    }).exec();\n    if (_order) {\n        if (isComplete && isComplete === true) {\n            const _items = await getItems({ orderId: _order.id, pageId: pageId, completeItems: isComplete });\n\n            const completeOrder = {\n                order: _order,\n                items: _items,\n            };\n\n            return completeOrder;\n        } else {\n            const headerOrder = {\n                order: _order,\n            }\n            return headerOrder;\n        }\n    } else return null;\n}\n\nexport const getLastUserOrder = async orderData => {\n    const { userId, pageId } = orderData;\n\n    const resultLast = await Order.find({\n        pageId: pageId,\n        userId: userId,\n        status: ORDERSTATUS_DELIVERED,\n    }).sort('-id').limit(1).exec();\n    if (resultLast && resultLast.length)\n        return resultLast[0];\n    else return null;\n}\n\nexport const getLastOrder = async pageID => {\n    const resultLastId = await Order.find({ pageId: pageID, status: { $gte: ORDERSTATUS_CONFIRMED } }).select('id').sort('-confirmed_at').limit(1).exec();\n    if (resultLastId && resultLastId.length)\n        return resultLastId[0].id;\n    else return 0;\n}\n\nexport const getLastPendingOrders = async pageID => {\n    const orders = await Order.find({ pageId: pageID, status: ORDERSTATUS_CONFIRMED })\n        .select('id confirmed_at')\n        .sort('-confirmed_at')\n        .exec();\n\n    if (orders && orders.length)\n        return orders;\n    else return [];\n}\n\n\nexport const getOrdersCustomerStat = async orderData => {\n    const { pageId, customerId } = orderData;\n\n    const orders = await Order.find({ pageId: pageId, customerId: customerId }).select('createdAt total').sort('createdAt').exec();\n    let total_spent = 0;\n    let nb_orders = 0;\n    let first_order = Date.now();\n    let last_order = null;\n    for (const order of orders) {\n        total_spent += order.total;\n        nb_orders += 1;\n\n        if (first_order >= order.createdAt) {\n            first_order = order.createdAt;\n        }\n        if (last_order <= order.createdAt) {\n            last_order = order.createdAt;\n        }\n    }\n    return { total_spent, nb_orders, first_order, last_order };\n}\n\nexport const cancelOrder = async orderData => {\n    const { pageId, userId } = orderData;\n\n    await Order.findOneAndRemove({ pageId: pageId, userId: userId, status: ORDERSTATUS_PENDING },\n        async (err, res) => {\n            if (!err) {\n                if (res) {\n                    const orderId = res.id;\n                    await cancelItems(pageId, orderId);\n                } else {\n                    console.error('Items from this order shall be deleted manually');\n                    console.info(res);\n                }\n            } else {\n                console.error('Order.findOneAndDelete');\n                console.error(err);\n            }\n        });\n}\n\nconst sendNotification = (whatsAppId, userId, message) => {\n    emitEventWhats(whatsAppId, 'notify', { userId: userId, message: message })\n}\n\n/**\n * Trying to reduce the number of calls to getFlavors and getSizes.\n * @param {*} flavors\n * @param {*} sizes\n * @param {*} orderData\n */\n// const getPerformaticItems = async (flavors, sizes, orderData) => {\n//     orderData.completeItems = false;\n//     let items = await getItems(orderData);\n//     for (let i = 0; i < items.length; i++) {\n//         let item = items[i];\n//         if (flavors[item.flavorId]) {\n//             item.flavor = flavors[item.flavorId];\n//         } else {\n//             const flavor = await getFlavor(orderData.pageId, item.flavorId);\n//             if (flavor) {\n//                 item.flavor = flavors[flavor.id] = flavor.flavor;\n//             }\n//         }\n//         if (sizes[item.sizeId]) {\n//             item.size = sizes[item.sizeId];\n//         } else {\n//             const size = await getSize(orderData.pageId, item.sizeId);\n//             if (size) {\n//                 item.size = sizes[size.id] = size.size;\n//             }\n//         }\n//     }\n//     return items;\n// }\n\n"],"file":"ordersController.js"}