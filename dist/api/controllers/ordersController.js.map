{"version":3,"sources":["../../../src/api/controllers/ordersController.js"],"names":["ORDERSTATUS_PENDING","ORDERSTATUS_CONFIRMED","ORDERSTATUS_VIEWED","ORDERSTATUS_ACCEPTED","ORDERSTATUS_PRINTED","ORDERSTATUS_DELIVERED","ORDERSTATUS_REJECTED","ORDERSTATUS_CANCELLED","order_get_all","req","res","sortObj","query","sort","rangeObj","range","filterObj","filter","queryParam","currentUser","activePage","$gte","filterField","length","i","value","filterValues","Array","isArray","dateIni","DateTime","fromISO","set","hour","minute","second","setZone","dateEnd","invalid","toISO","$lt","$in","date","endsWith","replace","rezonedIni","rezonedEnd","plus","days","Object","values","Order","find","exec","findError","result","console","error","status","json","message","_rangeIni","_rangeEnd","offset","limit","_totalCount","ordersArray","asideTotalAmount","asideTotalItems","order","total","pageId","store","orderId","id","completeItems","items","distanceFromStore","location_lat","location_long","formattedDistance","toFixed","deliverAt","deliver_time","fromJSDate","confirmed_at","minutes","jsonOrder","customerId","userId","phone","deliver_type","address","status2","status3","qty_total","createdAt","deliverd_at","delivered_at","payment_type","payment_change","comments","delivery_fee","surcharge_percent","surcharge_amount","push","setHeader","util","format","orderGetAllErr","order_get_one","params","getOrderJson","orderGetOneError","order_update","body","operation","findOne","doc","rejectionExplanation","sent_reject_notification","local","rejection_reason","source","sent_shipping_notification","info","save","deleteManyOrders","pageID","deleteMany","customer","jsonItems","forEach","item","jsonItem","flavorId","sizeId","beverageId","beverage","price","qty","split","flavor","size","customerName","first_name","last_name","getOrderJsonErr","Error","updateOrder","orderData","deliverType","deliverTime","location","user","addrData","completeItem","confirmOrder","waitingForAddress","waitingFor","waitingForData","undo","currentItem","calcTotal","originalSplit","currentItemSplit","eraseSplit","noBeverage","paymentType","paymentChange","backToConfirmation","categoryId","storeAddress","customerID","customerData","profile_pic","calcDistance","calc","lat","long","location_url","url","formattedAddress","storeData","distance_from_store","delivery_fees","currentItemSize","store_address","item_complete","no_beverage","currentItemCategory","select","resultLastId","record","updateOrderError","getOrderPending","isComplete","_order","_items","completeOrder","headerOrder","getLastOrder","getLastPendingOrders","orders","getOrdersCustomerStat","total_spent","nb_orders","first_order","Date","now","last_order","cancelOrder","findOneAndRemove","err"],"mappings":"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","sourcesContent":["import Order from '../models/orders';\nimport util from \"util\";\nimport { updateItem, getItems, getItemsTotal, cancelItems } from './itemsController';\nimport { updateCustomer, getCustomerById } from './customersController';\nimport { getStoreData, calcDeliveryFee } from './storesController';\nimport {\n    configSortQuery, configRangeQueryNew,\n    configFilterQueryMultiple, distanceBetweenCoordinates,\n} from '../util/util';\nimport { DateTime } from 'luxon';\n// import { Bot, Elements } from 'facebook-messenger-bot';\n// import { getOnePageToken } from './pagesController';\nimport { sendShippingNotification, sendRejectionNotification } from '../bot/botController';\nexport const ORDERSTATUS_PENDING = 0;\nexport const ORDERSTATUS_CONFIRMED = 1;\nexport const ORDERSTATUS_VIEWED = 2;\nexport const ORDERSTATUS_ACCEPTED = 3;\nexport const ORDERSTATUS_PRINTED = 4;\nexport const ORDERSTATUS_DELIVERED = 5;\nexport const ORDERSTATUS_REJECTED = 8;\nexport const ORDERSTATUS_CANCELLED = 9;\n\n// List all orders\n// TODO: use filters in the query req.query\nexport const order_get_all = async (req, res) => {\n    try {\n        const sortObj = configSortQuery(req.query.sort);\n        const rangeObj = configRangeQueryNew(req.query.range);\n        const filterObj = configFilterQueryMultiple(req.query.filter);\n\n        let queryParam = {};\n        if (req.currentUser.activePage) {\n            queryParam['pageId'] = req.currentUser.activePage;\n        }\n\n        queryParam['status'] = { $gte: ORDERSTATUS_CONFIRMED };\n\n        if (!sortObj) {\n            sortObj['createdAt'] = 'DESC';\n        }\n\n        if (filterObj && filterObj.filterField && filterObj.filterField.length) {\n            for (let i = 0; i < filterObj.filterField.length; i++) {\n                let filter = filterObj.filterField[i];\n                const value = filterObj.filterValues[i];\n                if (Array.isArray(value)) {\n                    if (value.length === 2) {\n                        const dateIni = DateTime.fromISO(value[0]).set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                        const dateEnd = DateTime.fromISO(value[1]).set({ hour: 23, minute: 59, second: 59 }).setZone('UTC');\n\n                        if (!dateIni.invalid && !dateEnd.invalid)// is date\n                            queryParam[filter] = { $gte: dateIni.toISO(), $lt: dateEnd.toISO() };\n                        else\n                            queryParam[filter] = { $in: value };\n                    } else\n                        queryParam[filter] = { $in: value };\n                } else {\n                    const date = DateTime.fromISO(value);\n                    if (!date.invalid) { // is a date\n                        // date comes with the current time, so, I am setting it to midnight.\n                        // Mongoose stores data on GMT timezone\n                        if (filter.endsWith('_rangestart')) {\n                            filter = filter.replace('_rangestart', '');\n                            const rezonedIni = date.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                            queryParam[filter] = { $gte: rezonedIni.toISO() };\n                        } else if (filter.endsWith('_rangeend')) {\n                            filter = filter.replace('_rangeend', '');\n                            const rezonedIni = date.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                            const rezonedEnd = rezonedIni.plus({ days: 1 });\n                            if (queryParam[filter])\n                                queryParam[filter] = { $gte: Object.values(queryParam[filter])[0], $lt: rezonedEnd.toISO() };\n                            else\n                                queryParam[filter] = { $lt: rezonedEnd.toISO() };\n                        } else {\n                            const rezonedIni = date.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                            const rezonedEnd = rezonedIni.plus({ days: 1 });\n                            queryParam[filter] = { $gte: rezonedIni.toISO(), $lt: rezonedEnd.toISO() };\n\n                        }\n                    } else\n                        queryParam[filter] = value;\n                }\n            }\n        }\n\n        Order.find(queryParam).sort(sortObj).exec(async (findError, result) => {\n            if (findError) {\n                console.error({ findError });\n                res.status(500).json({ message: findError.message });\n            } else {\n                let _rangeIni = 0;\n                let _rangeEnd = result.length;\n                if (rangeObj) {\n                    _rangeIni = rangeObj.offset <= result.length ? rangeObj.offset : result.length;\n                    _rangeEnd = (rangeObj.offset + rangeObj.limit) <= result.length ? rangeObj.offset + rangeObj.limit : result.length;\n                }\n                let _totalCount = result.length;\n                let ordersArray = [];\n                if (result && result.length && result.length > 0) {\n\n                    // workaround to show totalamount and totalitems in the frontend, because\n                    // I am only sending part of the list (pagination)\n                    let asideTotalAmount = 0;\n                    let asideTotalItems = result.length;\n                    for (const order of result) {\n                        asideTotalAmount = asideTotalAmount + order.total;\n                    }\n                    // workaround end: all orders will receive these values.\n\n                    const store = await getStoreData(result[0].pageId);\n                    for (let i = _rangeIni; i < _rangeEnd; i++) {\n                        const order = result[i];\n                        const items = await getItems({ orderId: order.id, pageId: order.pageId, completeItems: false });\n                        const distanceFromStore = distanceBetweenCoordinates(store.location_lat, store.location_long, order.location_lat, order.location_long);\n                        let formattedDistance;\n                        if (distanceFromStore < 1) {\n                            formattedDistance = (distanceFromStore * 100).toFixed(2) + ' m';\n                        } else {\n                            formattedDistance = distanceFromStore.toFixed(2) + ' km';\n                        }\n                        const deliverAt = order.deliver_time\n                            ? DateTime.fromJSDate(order.confirmed_at).plus({ minutes: order.deliver_time })\n                            : order.confirmed_at;\n\n                        let jsonOrder = {\n                            id: order.id,\n                            pageId: order.pageId,\n                            customerId: order.customerId,\n                            userId: order.userId,\n                            phone: order.phone,\n                            deliverAt: deliverAt,\n                            deliver_type: order.deliver_type,\n                            deliver_time: order.deliver_time,\n                            address: order.address,\n                            status: order.status,\n                            status2: order.status2,\n                            status3: order.status3,\n                            qty_total: order.qty_total,\n                            total: order.total,\n                            createdAt: order.createdAt,\n                            items: items,\n                            distanceFromStore: formattedDistance,\n                            location_lat: order.location_lat,\n                            location_long: order.location_long,\n                            confirmed_at: order.confirmed_at,\n                            deliverd_at: order.delivered_at,\n                            payment_type: order.payment_type,\n                            payment_change: order.payment_change,\n                            comments: order.comments,\n                            delivery_fee: order.delivery_fee,\n                            surcharge_percent: order.surcharge_percent,\n                            surcharge_amount: order.surcharge_amount,\n                            asideTotalAmount: asideTotalAmount,\n                            asideTotalItems: asideTotalItems,\n                        }\n                        ordersArray.push(jsonOrder);\n                    }\n                }\n                res.setHeader('Content-Range',\n                    util.format('orders %d-%d/%d',\n                        _rangeIni, _rangeEnd, _totalCount));\n                res.status(200).json(ordersArray);\n            }\n        });\n    } catch (orderGetAllErr) {\n        console.error({ orderGetAllErr })\n        res.status(500).json({ message: orderGetAllErr.message });\n    }\n};\n\n// List one record by filtering by ID\nexport const order_get_one = async (req, res) => {\n    if (req.params && req.params.id) {\n        try {\n            const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n            const jsonOrder = await getOrderJson(pageId, req.params.id);\n            res.status(200).json(jsonOrder);\n        } catch (orderGetOneError) {\n            console.error({ orderGetOneError });\n            res.status(500).json({ message: orderGetOneError.message });\n        }\n    }\n}\n\n// UPDATE\nexport const order_update = async (req, res) => {\n    if (req.body && req.body.id) {\n        try {\n            const { id, operation } = req.body;\n            const pageId = req.currentUser.activePage;\n            const doc = await Order.findOne({ pageId: pageId, id: id });\n\n            if (operation === 'REJECT') {\n                const { rejectionExplanation } = req.body;\n\n                doc.status = ORDERSTATUS_REJECTED;\n                doc.sent_reject_notification = DateTime.local();\n                doc.rejection_reason = rejectionExplanation;\n                sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            } else if (operation === 'VIEW') {\n                doc.status = ORDERSTATUS_VIEWED;\n                // sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            } else if (operation === 'ACCEPT') {\n                doc.status = ORDERSTATUS_ACCEPTED;\n                // sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            } else if (operation === 'PRINT') {\n                doc.status = ORDERSTATUS_PRINTED;\n                // sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            } else if (operation === 'DELIVER') {\n                doc.status = ORDERSTATUS_DELIVERED;\n                if (doc.source !== 'whatsapp') {\n                    if (!doc.sent_shipping_notification) {\n                        await sendShippingNotification(doc.pageId, doc.userId, doc.id);\n                        doc.sent_shipping_notification = DateTime.local();\n                    }\n                }\n            } else {\n                if (req.body.status2 === 'ordered') {\n                    doc.status = ORDERSTATUS_CONFIRMED;\n                } else if (req.body.status2 === 'delivered') {\n                    doc.status = ORDERSTATUS_DELIVERED;\n                    doc.delivered_at = DateTime.local();\n                } else if (req.body.status2 === 'cancelled') {\n                    doc.status = ORDERSTATUS_DELIVERED;\n                }\n\n                if (doc.status === ORDERSTATUS_DELIVERED) {\n                    if (doc.source !== 'whatsapp') {\n                        if (!doc.sent_shipping_notification) {\n                            console.info(\"I am going to send to \" + doc.userId + \", about the order number:\" + doc.id + \" a shipping notification\");\n                            await sendShippingNotification(doc.pageId, doc.userId, doc.id);\n                            doc.sent_shipping_notification = DateTime.local();\n                        }\n                    }\n                }\n            }\n            await doc.save();\n            const jsonOrder = await getOrderJson(pageId, doc.id);\n            res.status(200).json(jsonOrder);\n        }\n        catch (orderUpdateErr) {\n            console.error(orderUpdateErr);\n            res.status(500).json({ message: orderUpdateErr.message });\n        }\n    }\n}\n\n/**\n * Delete all records from a pageID\n * @param {*} pageID \n */\nexport const deleteManyOrders = async (pageID) => {\n    return await Order.deleteMany({ pageId: pageID }).exec();\n}\n\n// export const sendShippingNotification = async order => {\n//     const { accessToken } = await getOnePageToken(order.pageId);\n\n//     const _txt = 'O seu pedido número ' + order.id + ' acabou de sair para entrega. Bom apetite!';\n\n//     const out = new Elements();\n//     out.add({ text: _txt });\n//     await Bot.send_message_tag(accessToken, order.userId, out);\n// }\n\n// List one record by filtering by ID\nexport const getOrderJson = async (pageId, orderId) => {\n    try {\n        const order = await Order.findOne({ pageId: pageId, id: orderId });\n        const customer = await getCustomerById(pageId, order.customerId);\n        const items = await getItems({ pageId: pageId, orderId: orderId, completeItems: true });\n        const store = await getStoreData(order.pageId);\n        const distanceFromStore = distanceBetweenCoordinates(store.location_lat, store.location_long, order.location_lat, order.location_long);\n        const deliverAt = order.deliver_time\n            ? DateTime.fromJSDate(order.confirmed_at).plus({ minutes: order.deliver_time })\n            : order.confirmed_at;\n        let jsonItems = [];\n        items.forEach(item => {\n            let jsonItem = {\n                id: item.id,\n                flavorId: item.flavorId,\n                sizeId: item.sizeId,\n                beverageId: item.beverageId,\n                beverage: item.beverage,\n                price: item.price,\n                qty: item.qty,\n                split: item.split,\n                flavor: item.flavor,\n                size: item.size,\n            }\n            jsonItems.push(jsonItem);\n        });\n        let jsonOrder = {\n            id: order.id,\n            customerId: order.customerId,\n            customerName: customer.first_name + ' ' + customer.last_name,\n            createdAt: order.createdAt,\n            deliverAt: deliverAt,\n            deliver_type: order.deliver_type,\n            deliver_time: order.deliver_time,\n            qty_total: order.qty_total,\n            status: order.status,\n            status2: order.status2,\n            status3: order.status3,\n            phone: order.phone,\n            address: order.address,\n            total: order.total,\n            items: jsonItems,\n            distanceFromStore: distanceFromStore,\n            location_lat: order.location_lat,\n            location_long: order.location_long,\n            confirmed_at: order.confirmed_at,\n            deliverd_at: order.delivered_at,\n            payment_type: order.payment_type,\n            payment_change: order.payment_change,\n            comments: order.comments,\n            delivery_fee: order.delivery_fee,\n            surcharge_percent: order.surcharge_percent,\n            surcharge_amount: order.surcharge_amount,\n        }\n        return jsonOrder;\n    } catch (getOrderJsonErr) {\n        console.error({ getOrderJsonErr });\n        throw new Error(getOrderJsonErr.message);\n    }\n}\n\n\nexport const updateOrder = async orderData => {\n    try {\n        const { pageId, userId, source, deliverType, deliverTime, qty, qty_total, location, user,\n            phone, addrData, completeItem, confirmOrder,\n            waitingForAddress, waitingFor, waitingForData, undo, currentItem, sizeId, calcTotal,\n            originalSplit, split, currentItemSplit, eraseSplit, noBeverage,\n            paymentType, paymentChange, backToConfirmation, comments,\n            categoryId, surcharge_percent, surcharge_amount,\n            storeAddress } = orderData;\n\n        let customerID = 0;\n        let customerData = {}\n        customerData.pageId = pageId;\n        customerData.userId = userId;\n        if (user) {\n            const { first_name, last_name, profile_pic } = user;\n            customerData.first_name = first_name;\n            customerData.last_name = last_name;\n            customerData.profile_pic = profile_pic;\n        }\n        customerData.phone = phone;\n        customerData.location = location;\n        customerData.addrData = addrData;\n        customerID = await updateCustomer(customerData);\n        const order = await Order.findOne({ pageId: pageId, userId: userId, status: ORDERSTATUS_PENDING }).exec();\n\n        if (order) {\n            orderData.orderId = order.id;\n\n            let updateOrder = false;\n\n            let calcDistance = {\n                calc: false,\n                lat: 0,\n                long: 0,\n            }\n\n            if (location) {\n                order.location_lat = location.lat;\n                order.location_long = location.long;\n                order.location_url = location.url;\n                updateOrder = true;\n\n                calcDistance.calc = true;\n                calcDistance.lat = location.lat;\n                calcDistance.long = location.long;\n            }\n\n            if (addrData) {\n                order.address = addrData.formattedAddress;\n                if (addrData.location_lat && addrData.location_long) {\n                    order.location_lat = addrData.location_lat;\n                    order.location_long = addrData.location_long;\n\n                    calcDistance.calc = true;\n                    calcDistance.lat = addrData.location_lat;\n                    calcDistance.long = addrData.location_long;\n                }\n                updateOrder = true;\n            }\n\n            if (calcDistance.calc) {\n                const storeData = await getStoreData(pageId);\n                if (storeData.location_lat && storeData.location_long) {\n                    const distanceFromStore = distanceBetweenCoordinates(storeData.location_lat, storeData.location_long, calcDistance.lat, calcDistance.long)\n                    order.distance_from_store = distanceFromStore;\n                    order.delivery_fee = calcDeliveryFee(storeData.delivery_fees, distanceFromStore);\n                }\n            }\n\n            if (currentItem) {\n                order.currentItem = currentItem;\n                updateOrder = true;\n            }\n\n            if (source) {\n                order.source = source;\n                updateOrder = true;\n            }\n\n            if (qty) {\n                order.qty = qty;\n                updateOrder = true;\n\n                // order has total quantity.\n                // items are always 1. this variable will be passed to updateItem\n                orderData.qty = 1;\n            }\n\n            if (deliverType) {\n                order.deliver_type = deliverType;\n                updateOrder = true;\n            }\n\n            if (deliverTime) {\n                order.deliver_time = deliverTime;\n                updateOrder = true;\n            }\n\n            if (qty_total) {\n                order.qty_total = qty_total;\n                updateOrder = true;\n            }\n\n            if (originalSplit) {\n                // split increments the items number (+originalSplit)\n                //  and removes 1 (that was the original quantity asked by the user)\n                order.qty_total = order.qty_total + originalSplit - 1;\n                // saving the originalSplit in the order and...\n                order.originalSplit = originalSplit;\n                // ...always saving the split as originalSplit in item.\n                // because the split in the order will be decreased until 1\n                orderData.split = originalSplit;\n                updateOrder = true;\n            }\n\n            // starts from 1 until originalSplit\n            if (currentItemSplit) {\n                order.currentItemSplit = currentItemSplit;\n                updateOrder = true;\n            }\n\n            // originalSplit is passed as parameter only once: when user choose the\n            // split division. split is passed as the same value as originalSplit, so, here\n            // I am changing the quantity to assure the item will receive correct data.\n            // originalSplit changes the quantity, so, it can't be passed more than once.\n            if (split) {\n                orderData.sizeId = order.currentItemSize;\n                orderData.qty = 1;\n            }\n\n            // eraseSplit is sent when I am gonna ask the user\n            // about the next pizza.\n            if (eraseSplit) {\n                order.originalSplit = null;\n                order.currentItemSplit = null;\n                updateOrder = true;\n            }\n\n            if (customerID > 0) {\n                order.customerId = customerID;\n                updateOrder = true;\n            }\n\n            if (phone) {\n                order.phone = phone;\n                updateOrder = true;\n            }\n\n            if (sizeId) {\n                order.currentItemSize = sizeId;\n                updateOrder = true;\n            }\n\n            if (surcharge_percent) {\n                order.surcharge_percent = surcharge_percent / 100;\n                updateOrder = true;\n            }\n\n            if (surcharge_amount) {\n                order.surcharge_amount = surcharge_amount;\n                updateOrder = true;\n            }\n\n            if (storeAddress) {\n                order.store_address = storeAddress;\n                updateOrder = true;\n            }\n\n            /** EraseSize only in the item, because, user can navigate through categories\n             * of the same size.\n             */\n            // if (eraseSize) {\n            //     order.currentItemSize = null;\n            // }\n\n            if (completeItem) {\n                if (order.item_complete) order.item_complete = order.item_complete + 1;\n                else order.item_complete = 1;\n                updateOrder = true;\n            }\n\n            if (confirmOrder) {\n                order.status = ORDERSTATUS_CONFIRMED;\n                order.confirmed_at = DateTime.local();\n                updateOrder = true;\n            } else {\n                // when updateorder with flavor, I dont have neither split nor originalSplit\n                // but, if the order has an originalSplit, I am going to send it to the item.\n                // This code should run only if I am not confirming the order.\n                if (order.originalSplit && order.originalSplit > 1) {\n                    orderData.split = order.originalSplit;\n                    updateOrder = true;\n                }\n            }\n\n            if (typeof waitingForAddress === 'boolean') {\n                order.waitingForAddress = waitingForAddress;\n                updateOrder = true;\n            }\n\n            if (waitingFor) {\n                order.waitingFor = waitingFor;\n                updateOrder = true;\n\n                if (!undo)\n                    order.undo = null;\n            }\n\n            if (waitingForData) {\n                order.waitingForData = waitingForData;\n                updateOrder = true;\n            }\n\n            if (undo) {\n                order.undo = undo;\n                updateOrder = true;\n            }\n\n            if (backToConfirmation) {\n                order.backToConfirmation = backToConfirmation;\n                updateOrder = true;\n            }\n\n            if (comments) {\n                order.comments = comments;\n                updateOrder = true;\n            }\n\n\n            if (typeof calcTotal === 'boolean') {\n                let total = await getItemsTotal({ orderId: order.id, pageId: order.pageId });\n                if (order.delivery_fee > 0) total += order.delivery_fee;\n                if (order.surcharge_percent > 0) total += total * order.surcharge_percent;\n                if (order.surcharge_amount > 0) total += order.surcharge_amount;\n\n                if (total > 0 && total !== order.total) {\n                    order.total = total;\n                    updateOrder = true;\n                }\n            }\n\n            if (typeof noBeverage === 'boolean') {\n                order.no_beverage = noBeverage;\n                updateOrder = true;\n            }\n\n            if (paymentType) {\n                order.payment_type = paymentType;\n                updateOrder = true;\n            }\n\n            if (paymentChange) {\n                order.payment_change = paymentChange;\n                updateOrder = true;\n            }\n\n            if (categoryId) {\n                order.currentItemCategory = categoryId;\n                updateOrder = true;\n            }\n\n            if (updateOrder)\n                await order.save();\n\n            await updateItem(orderData);\n        } else {\n            // const count = await Order.find({ pageId: pageId }).count().exec();\n            // let orderId = 1;\n            // if (count) orderId = count + 1;\n\n            const resultLastId = await Order.find({ pageId: pageId }).select('id').sort('-id').limit(1).exec();\n            let orderId = 1;\n            if (resultLastId && resultLastId.length) orderId = resultLastId[0].id + 1;\n\n            const record = new Order({\n                id: orderId,\n                pageId: pageId,\n                userId: userId,\n                qty_total: qty || 0,\n                location_lat: location ? location.lat : null,\n                location_long: location ? location.long : null,\n                location_url: location ? location.url : null,\n                waitingForAddress: typeof waitingForAddress === 'boolean' ? waitingForAddress : false,\n                deliver_type: deliverType,\n                status: ORDERSTATUS_PENDING,\n            });\n            await record.save();\n            orderData.orderId = record.id;\n            await updateItem(orderData);\n        }\n    } catch (updateOrderError) {\n        console.error({ updateOrderError });\n        throw updateOrderError;\n    }\n}\n\nexport const getOrderPending = async orderData => {\n    const { userId, pageId, isComplete } = orderData;\n\n    const _order = await Order.findOne({\n        userId: userId, pageId: pageId,\n        status: ORDERSTATUS_PENDING,\n    }).exec();\n    if (_order) {\n        if (isComplete && isComplete === true) {\n            const _items = await getItems({ orderId: _order.id, pageId: pageId, completeItems: isComplete });\n\n            const completeOrder = {\n                order: _order,\n                items: _items,\n            };\n\n            return completeOrder;\n        } else {\n            const headerOrder = {\n                order: _order,\n            }\n            return headerOrder;\n        }\n    } else return null;\n}\n\nexport const getLastOrder = async pageID => {\n    const resultLastId = await Order.find({ pageId: pageID, status: { $gte: ORDERSTATUS_CONFIRMED } }).select('id').sort('-confirmed_at').limit(1).exec();\n    if (resultLastId && resultLastId.length)\n        return resultLastId[0].id;\n    else return 0;\n}\n\nexport const getLastPendingOrders = async pageID => {\n    const orders = await Order.find({ pageId: pageID, status: ORDERSTATUS_CONFIRMED })\n        .select('id confirmed_at')\n        .sort('-confirmed_at')\n        .exec();\n\n    if (orders && orders.length)\n        return orders;\n    else return [];\n}\n\n\nexport const getOrdersCustomerStat = async orderData => {\n    const { pageId, customerId } = orderData;\n\n    const orders = await Order.find({ pageId: pageId, customerId: customerId }).select('createdAt total').sort('createdAt').exec();\n    let total_spent = 0;\n    let nb_orders = 0;\n    let first_order = Date.now();\n    let last_order = null;\n    for (const order of orders) {\n        total_spent += order.total;\n        nb_orders += 1;\n\n        if (first_order >= order.createdAt) {\n            first_order = order.createdAt;\n        }\n        if (last_order <= order.createdAt) {\n            last_order = order.createdAt;\n        }\n    }\n    return { total_spent, nb_orders, first_order, last_order };\n}\n\nexport const cancelOrder = async orderData => {\n    const { pageId, userId } = orderData;\n\n    await Order.findOneAndRemove({ pageId: pageId, userId: userId, status: ORDERSTATUS_PENDING },\n        async (err, res) => {\n            if (!err) {\n                if (res) {\n                    const orderId = res.id;\n                    await cancelItems(pageId, orderId);\n                } else {\n                    console.error('Items from this order shall be deleted manually');\n                    console.info(res);\n                }\n            } else {\n                console.error('Order.findOneAndDelete');\n                console.error(err);\n            }\n        });\n}\n\n\n/**\n * Trying to reduce the number of calls to getFlavors and getSizes.\n * @param {*} flavors\n * @param {*} sizes\n * @param {*} orderData\n */\n// const getPerformaticItems = async (flavors, sizes, orderData) => {\n//     orderData.completeItems = false;\n//     let items = await getItems(orderData);\n//     for (let i = 0; i < items.length; i++) {\n//         let item = items[i];\n//         if (flavors[item.flavorId]) {\n//             item.flavor = flavors[item.flavorId];\n//         } else {\n//             const flavor = await getFlavor(orderData.pageId, item.flavorId);\n//             if (flavor) {\n//                 item.flavor = flavors[flavor.id] = flavor.flavor;\n//             }\n//         }\n//         if (sizes[item.sizeId]) {\n//             item.size = sizes[item.sizeId];\n//         } else {\n//             const size = await getSize(orderData.pageId, item.sizeId);\n//             if (size) {\n//                 item.size = sizes[size.id] = size.size;\n//             }\n//         }\n//     }\n//     return items;\n// }\n\n"],"file":"ordersController.js"}