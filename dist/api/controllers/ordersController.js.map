{"version":3,"sources":["../../../src/api/controllers/ordersController.js"],"names":["ORDERSTATUS_PENDING","ORDERSTATUS_CONFIRMED","ORDERSTATUS_ACCEPTED","ORDERSTATUS_PRINTED","ORDERSTATUS_DELIVERED","ORDERSTATUS_REJECTED","ORDERSTATUS_CANCELLED","order_get_all","req","res","sortObj","query","sort","rangeObj","range","filterObj","filter","queryParam","currentUser","activePage","filterField","length","i","value","filterValues","Array","isArray","dateIni","DateTime","fromISO","dateEnd","invalid","$gte","toISO","$lt","$in","date","nextDay","plus","days","toISODate","console","info","Order","find","exec","findError","result","error","status","json","message","_rangeIni","_rangeEnd","offset","limit","_totalCount","ordersArray","pageId","store","order","orderId","id","completeItems","items","distanceFromStore","location_lat","location_long","formattedDistance","toFixed","jsonOrder","customerId","userId","phone","address","status2","status3","qty_total","total","createdAt","confirmed_at","deliverd_at","delivered_at","payment_type","payment_change","comments","push","setHeader","util","format","orderGetAllErr","order_get_one","params","getOrderJson","orderGetOneError","order_update","body","operation","findOne","doc","rejectionExplanation","sent_reject_notification","local","rejection_reason","sent_shipping_notification","save","deleteManyOrders","pageID","deleteMany","jsonItems","forEach","item","jsonItem","flavorId","sizeId","beverageId","beverage","price","qty","split","flavor","size","getOrderJsonErr","Error","updateOrder","orderData","location","user","addrData","completeItem","confirmOrder","waitingForAddress","waitingFor","currentItem","calcTotal","originalSplit","eraseSplit","noBeverage","paymentType","paymentChange","customerID","customerData","first_name","last_name","profile_pic","lat","long","location_url","url","currentItemSplit","currentItemSize","formattedAddress","item_complete","no_beverage","select","resultLastId","record","updateOrderError","getOrderPending","isComplete","_order","_items","completeOrder","headerOrder","getOrdersCustomerStat","orders","total_spent","nb_orders","first_order","Date","now","last_order"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;;;;;;;AACA,IAAMA,mBAAmB,GAAG,CAA5B;AACA,IAAMC,qBAAqB,GAAG,CAA9B;AACA,IAAMC,oBAAoB,GAAG,CAA7B;AACA,IAAMC,mBAAmB,GAAG,CAA5B;AACA,IAAMC,qBAAqB,GAAG,CAA9B;AACA,IAAMC,oBAAoB,GAAG,CAA7B;AACA,IAAMC,qBAAqB,GAAG,CAA9B,C,CAEA;AACA;;AACO,IAAMC,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACzB,gBAAI;AACMC,cAAAA,OADN,GACgB,4BAAgBF,GAAG,CAACG,KAAJ,CAAUC,IAA1B,CADhB;AAEMC,cAAAA,QAFN,GAEiB,gCAAoBL,GAAG,CAACG,KAAJ,CAAUG,KAA9B,CAFjB;AAGMC,cAAAA,SAHN,GAGkB,sCAA0BP,GAAG,CAACG,KAAJ,CAAUK,MAApC,CAHlB;AAKIC,cAAAA,UALJ,GAKiB,EALjB;;AAMA,kBAAIT,GAAG,CAACU,WAAJ,CAAgBC,UAApB,EAAgC;AAC5BF,gBAAAA,UAAU,CAAC,QAAD,CAAV,GAAuBT,GAAG,CAACU,WAAJ,CAAgBC,UAAvC;AACH;;AAED,kBAAI,CAACT,OAAL,EAAc;AACVA,gBAAAA,OAAO,CAAC,WAAD,CAAP,GAAuB,MAAvB;AACH;;AAED,kBAAIK,SAAS,IAAIA,SAAS,CAACK,WAAvB,IAAsCL,SAAS,CAACK,WAAV,CAAsBC,MAAhE,EAAwE;AACpE,qBAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGP,SAAS,CAACK,WAAV,CAAsBC,MAA1C,EAAkDC,CAAC,EAAnD,EAAuD;AAC7CN,kBAAAA,MAD6C,GACpCD,SAAS,CAACK,WAAV,CAAsBE,CAAtB,CADoC;AAE7CC,kBAAAA,KAF6C,GAErCR,SAAS,CAACS,YAAV,CAAuBF,CAAvB,CAFqC;;AAGnD,sBAAIG,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACtB,wBAAIA,KAAK,CAACF,MAAN,KAAiB,CAArB,EAAwB;AACdM,sBAAAA,OADc,GACJC,gBAASC,OAAT,CAAiBN,KAAK,CAAC,CAAD,CAAtB,CADI;AAEdO,sBAAAA,OAFc,GAEJF,gBAASC,OAAT,CAAiBN,KAAK,CAAC,CAAD,CAAtB,CAFI;AAIpB,0BAAI,CAACI,OAAO,CAACI,OAAT,IAAoB,CAACD,OAAO,CAACC,OAAjC,EAAyC;AACrCd,wBAAAA,UAAU,CAACD,MAAD,CAAV,GAAqB;AAAEgB,0BAAAA,IAAI,EAAEL,OAAO,CAACM,KAAR,EAAR;AAAyBC,0BAAAA,GAAG,EAAEJ,OAAO,CAACG,KAAR;AAA9B,yBAArB,CADJ,KAGIhB,UAAU,CAACD,MAAD,CAAV,GAAqB;AAAEmB,wBAAAA,GAAG,EAAEZ;AAAP,uBAArB;AACP,qBARD,MASIN,UAAU,CAACD,MAAD,CAAV,GAAqB;AAAEmB,sBAAAA,GAAG,EAAEZ;AAAP,qBAArB;AACP,mBAXD,MAWO;AACGa,oBAAAA,IADH,GACUR,gBAASC,OAAT,CAAiBN,KAAjB,CADV;;AAEH,wBAAI,CAACa,IAAI,CAACL,OAAV,EAAmB;AAAE;AACXM,sBAAAA,OADS,GACCD,IAAI,CAACE,IAAL,CAAU;AAAEC,wBAAAA,IAAI,EAAE;AAAR,uBAAV,CADD;AAEftB,sBAAAA,UAAU,CAACD,MAAD,CAAV,GAAqB;AAAEgB,wBAAAA,IAAI,EAAEI,IAAI,CAACI,SAAL,EAAR;AAA0BN,wBAAAA,GAAG,EAAEG,OAAO,CAACG,SAAR;AAA/B,uBAArB;AACH,qBAHD,MAIIvB,UAAU,CAACD,MAAD,CAAV,GAAqBO,KAArB;AACP;AACJ;AACJ;;AAEDkB,cAAAA,OAAO,CAACC,IAAR,CAAa,4BAAb,EAA2CzB,UAA3C,EAAuDF,SAAvD;;AAEA4B,8BAAMC,IAAN,CAAW3B,UAAX,EAAuBL,IAAvB,CAA4BF,OAA5B,EAAqCmC,IAArC;AAAA;AAAA;AAAA;AAAA;AAAA,wCAA0C,iBAAOC,SAAP,EAAkBC,MAAlB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,+BAClCD,SADkC;AAAA;AAAA;AAAA;;AAElCL,0BAAAA,OAAO,CAACO,KAAR,CAAc;AAAEF,4BAAAA,SAAS,EAATA;AAAF,2BAAd;AACArC,0BAAAA,GAAG,CAACwC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,4BAAAA,OAAO,EAAEL,SAAS,CAACK;AAArB,2BAArB;AAHkC;AAAA;;AAAA;AAK9BC,0BAAAA,SAL8B,GAKlB,CALkB;AAM9BC,0BAAAA,SAN8B,GAMlBN,MAAM,CAAC1B,MANW;;AAOlC,8BAAIR,QAAJ,EAAc;AACVuC,4BAAAA,SAAS,GAAGvC,QAAQ,CAACyC,MAAT,IAAmBP,MAAM,CAAC1B,MAA1B,GAAmCR,QAAQ,CAACyC,MAA5C,GAAqDP,MAAM,CAAC1B,MAAxE;AACAgC,4BAAAA,SAAS,GAAIxC,QAAQ,CAACyC,MAAT,GAAkBzC,QAAQ,CAAC0C,KAA5B,IAAsCR,MAAM,CAAC1B,MAA7C,GAAsDR,QAAQ,CAACyC,MAAT,GAAkBzC,QAAQ,CAAC0C,KAAjF,GAAyFR,MAAM,CAAC1B,MAA5G;AACH;;AACGmC,0BAAAA,WAX8B,GAWhBT,MAAM,CAAC1B,MAXS;AAY9BoC,0BAAAA,WAZ8B,GAYhB,IAAIhC,KAAJ,EAZgB;;AAAA,gCAa9BsB,MAAM,IAAIA,MAAM,CAAC1B,MAAjB,IAA2B0B,MAAM,CAAC1B,MAAP,GAAgB,CAbb;AAAA;AAAA;AAAA;;AAAA;AAAA,iCAcV,oCAAa0B,MAAM,CAAC,CAAD,CAAN,CAAUW,MAAvB,CAdU;;AAAA;AAcxBC,0BAAAA,KAdwB;AAerBrC,0BAAAA,EAfqB,GAejB8B,SAfiB;;AAAA;AAAA,gCAeN9B,EAAC,GAAG+B,SAfE;AAAA;AAAA;AAAA;;AAgBpBO,0BAAAA,KAhBoB,GAgBZb,MAAM,CAACzB,EAAD,CAhBM;AAAA;AAAA,iCAiBN,+BAAS;AAAEuC,4BAAAA,OAAO,EAAED,KAAK,CAACE,EAAjB;AAAqBJ,4BAAAA,MAAM,EAAEE,KAAK,CAACF,MAAnC;AAA2CK,4BAAAA,aAAa,EAAE;AAA1D,2BAAT,CAjBM;;AAAA;AAiBpBC,0BAAAA,KAjBoB;AAkBpBC,0BAAAA,iBAlBoB,GAkBA,uCAA2BN,KAAK,CAACO,YAAjC,EAA+CP,KAAK,CAACQ,aAArD,EAAoEP,KAAK,CAACM,YAA1E,EAAwFN,KAAK,CAACO,aAA9F,CAlBA;AAmBtBC,0BAAAA,iBAnBsB;;AAoB1B,8BAAIH,iBAAiB,GAAG,CAAxB,EAA2B;AACvBG,4BAAAA,iBAAiB,GAAG,CAACH,iBAAiB,GAAG,GAArB,EAA0BI,OAA1B,CAAkC,CAAlC,IAAuC,IAA3D;AACH,2BAFD,MAEO;AACHD,4BAAAA,iBAAiB,GAAGH,iBAAiB,CAACI,OAAlB,CAA0B,CAA1B,IAA+B,KAAnD;AACH;;AACGC,0BAAAA,SAzBsB,GAyBV;AACZR,4BAAAA,EAAE,EAAEF,KAAK,CAACE,EADE;AAEZJ,4BAAAA,MAAM,EAAEE,KAAK,CAACF,MAFF;AAGZa,4BAAAA,UAAU,EAAEX,KAAK,CAACW,UAHN;AAIZC,4BAAAA,MAAM,EAAEZ,KAAK,CAACY,MAJF;AAKZC,4BAAAA,KAAK,EAAEb,KAAK,CAACa,KALD;AAMZC,4BAAAA,OAAO,EAAEd,KAAK,CAACc,OANH;AAOZzB,4BAAAA,MAAM,EAAEW,KAAK,CAACX,MAPF;AAQZ0B,4BAAAA,OAAO,EAAEf,KAAK,CAACe,OARH;AASZC,4BAAAA,OAAO,EAAEhB,KAAK,CAACgB,OATH;AAUZC,4BAAAA,SAAS,EAAEjB,KAAK,CAACiB,SAVL;AAWZC,4BAAAA,KAAK,EAAElB,KAAK,CAACkB,KAXD;AAYZC,4BAAAA,SAAS,EAAEnB,KAAK,CAACmB,SAZL;AAaZf,4BAAAA,KAAK,EAAEA,KAbK;AAcZC,4BAAAA,iBAAiB,EAAEG,iBAdP;AAeZF,4BAAAA,YAAY,EAAEN,KAAK,CAACM,YAfR;AAgBZC,4BAAAA,aAAa,EAAEP,KAAK,CAACO,aAhBT;AAiBZa,4BAAAA,YAAY,EAAEpB,KAAK,CAACoB,YAjBR;AAkBZC,4BAAAA,WAAW,EAAErB,KAAK,CAACsB,YAlBP;AAmBZC,4BAAAA,YAAY,EAAEvB,KAAK,CAACuB,YAnBR;AAoBZC,4BAAAA,cAAc,EAAExB,KAAK,CAACwB,cApBV;AAqBZC,4BAAAA,QAAQ,EAAEzB,KAAK,CAACyB;AArBJ,2BAzBU;AAgD1B5B,0BAAAA,WAAW,CAAC6B,IAAZ,CAAiBhB,SAAjB;;AAhD0B;AAeShD,0BAAAA,EAAC,EAfV;AAAA;AAAA;;AAAA;AAmDlCb,0BAAAA,GAAG,CAAC8E,SAAJ,CAAc,eAAd,EAA+BC,cAAKC,MAAL,CAAY,iBAAZ,EAA+BrC,SAA/B,EAA0CC,SAA1C,EAAqDG,WAArD,CAA/B;AACA/C,0BAAAA,GAAG,CAACwC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBO,WAArB;;AApDkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA1C;;AAAA;AAAA;AAAA;AAAA;AAuDH,aAjGD,CAiGE,OAAOiC,cAAP,EAAuB;AACrBjD,cAAAA,OAAO,CAACO,KAAR,CAAc;AAAE0C,gBAAAA,cAAc,EAAdA;AAAF,eAAd;AACAjF,cAAAA,GAAG,CAACwC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,gBAAAA,OAAO,EAAEuC,cAAc,CAACvC;AAA1B,eAArB;AACH;;AArGwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAb5C,aAAa;AAAA;AAAA;AAAA,GAAnB,C,CAwGP;;;;;AACO,IAAMoF,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOnF,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACrBD,GAAG,CAACoF,MAAJ,IAAcpF,GAAG,CAACoF,MAAJ,CAAW9B,EADJ;AAAA;AAAA;AAAA;;AAAA;AAGXJ,YAAAA,MAHW,GAGFlD,GAAG,CAACU,WAAJ,CAAgBC,UAAhB,GAA6BX,GAAG,CAACU,WAAJ,CAAgBC,UAA7C,GAA0D,IAHxD;AAAA;AAAA,mBAIO0E,YAAY,CAACnC,MAAD,EAASlD,GAAG,CAACoF,MAAJ,CAAW9B,EAApB,CAJnB;;AAAA;AAIXQ,YAAAA,SAJW;AAKjB7D,YAAAA,GAAG,CAACwC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBoB,SAArB;AALiB;AAAA;;AAAA;AAAA;AAAA;AAOjB7B,YAAAA,OAAO,CAACO,KAAR,CAAc;AAAE8C,cAAAA,gBAAgB;AAAlB,aAAd;AACArF,YAAAA,GAAG,CAACwC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,aAAiBA;AAA5B,aAArB;;AARiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbwC,aAAa;AAAA;AAAA;AAAA,GAAnB,C,CAaP;;;;;AACO,IAAMI,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOvF,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBACpBD,GAAG,CAACwF,IAAJ,IAAYxF,GAAG,CAACwF,IAAJ,CAASlC,EADD;AAAA;AAAA;AAAA;;AAAA;AAAA,wBAGUtD,GAAG,CAACwF,IAHd,EAGRlC,EAHQ,aAGRA,EAHQ,EAGJmC,SAHI,aAGJA,SAHI;AAIVvC,YAAAA,MAJU,GAIDlD,GAAG,CAACU,WAAJ,CAAgBC,UAJf;AAAA;AAAA,mBAKEwB,gBAAMuD,OAAN,CAAc;AAAExC,cAAAA,MAAM,EAAEA,MAAV;AAAkBI,cAAAA,EAAE,EAAEA;AAAtB,aAAd,CALF;;AAAA;AAKVqC,YAAAA,GALU;;AAAA,kBAOZF,SAAS,KAAK,QAPF;AAAA;AAAA;AAAA;;AAQJG,YAAAA,oBARI,GAQqB5F,GAAG,CAACwF,IARzB,CAQJI,oBARI;AAUZD,YAAAA,GAAG,CAAClD,MAAJ,GAAa5C,oBAAb;AACA8F,YAAAA,GAAG,CAACE,wBAAJ,GAA+BzE,gBAAS0E,KAAT,EAA/B;AACAH,YAAAA,GAAG,CAACI,gBAAJ,GAAuBH,oBAAvB;AACA,0DAA0BD,GAAG,CAACzC,MAA9B,EAAsCyC,GAAG,CAAC3B,MAA1C,EAAkD2B,GAAG,CAACrC,EAAtD,EAA0DsC,oBAA1D;AAbY;AAAA;;AAAA;AAAA,kBAePH,SAAS,KAAK,QAfP;AAAA;AAAA;AAAA;;AAgBZE,YAAAA,GAAG,CAAClD,MAAJ,GAAa/C,oBAAb,CAhBY,CAiBZ;;AAjBY;AAAA;;AAAA;AAAA,kBAmBP+F,SAAS,KAAK,OAnBP;AAAA;AAAA;AAAA;;AAoBZE,YAAAA,GAAG,CAAClD,MAAJ,GAAa9C,mBAAb,CApBY,CAqBZ;;AArBY;AAAA;;AAAA;AAAA,kBAuBP8F,SAAS,KAAK,SAvBP;AAAA;AAAA;AAAA;;AAwBZE,YAAAA,GAAG,CAAClD,MAAJ,GAAa7C,qBAAb;;AAxBY,gBAyBP+F,GAAG,CAACK,0BAzBG;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA0BF,6CAAyBL,GAAG,CAACzC,MAA7B,EAAqCyC,GAAG,CAAC3B,MAAzC,EAAiD2B,GAAG,CAACrC,EAArD,CA1BE;;AAAA;AA2BRqC,YAAAA,GAAG,CAACK,0BAAJ,GAAiC5E,gBAAS0E,KAAT,EAAjC;;AA3BQ;AAAA;AAAA;;AAAA;AA+BZ,gBAAI9F,GAAG,CAACwF,IAAJ,CAASrB,OAAT,KAAqB,SAAzB,EAAoC;AAChCwB,cAAAA,GAAG,CAAClD,MAAJ,GAAahD,qBAAb;AACH,aAFD,MAEO,IAAIO,GAAG,CAACwF,IAAJ,CAASrB,OAAT,KAAqB,WAAzB,EAAsC;AACzCwB,cAAAA,GAAG,CAAClD,MAAJ,GAAa7C,qBAAb;AACA+F,cAAAA,GAAG,CAACjB,YAAJ,GAAmBtD,gBAAS0E,KAAT,EAAnB;AACH,aAHM,MAGA,IAAI9F,GAAG,CAACwF,IAAJ,CAASrB,OAAT,KAAqB,WAAzB,EAAsC;AACzCwB,cAAAA,GAAG,CAAClD,MAAJ,GAAa7C,qBAAb;AACH;;AAtCW,kBAwCR+F,GAAG,CAAClD,MAAJ,KAAe7C,qBAxCP;AAAA;AAAA;AAAA;;AAAA,gBAyCH+F,GAAG,CAACK,0BAzCD;AAAA;AAAA;AAAA;;AA0CJ/D,YAAAA,OAAO,CAACC,IAAR,CAAa,2BAA2ByD,GAAG,CAAC3B,MAA/B,GAAwC,2BAAxC,GAAsE2B,GAAG,CAACrC,EAA1E,GAA+E,0BAA5F;AA1CI;AAAA,mBA2CE,6CAAyBqC,GAAG,CAACzC,MAA7B,EAAqCyC,GAAG,CAAC3B,MAAzC,EAAiD2B,GAAG,CAACrC,EAArD,CA3CF;;AAAA;AA4CJqC,YAAAA,GAAG,CAACK,0BAAJ,GAAiC5E,gBAAS0E,KAAT,EAAjC;;AA5CI;AAAA;AAAA,mBAgDVH,GAAG,CAACM,IAAJ,EAhDU;;AAAA;AAAA;AAAA,mBAiDQZ,YAAY,CAACnC,MAAD,EAASyC,GAAG,CAACrC,EAAb,CAjDpB;;AAAA;AAiDVQ,YAAAA,SAjDU;AAkDhB7D,YAAAA,GAAG,CAACwC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBoB,SAArB;AAlDgB;AAAA;;AAAA;AAAA;AAAA;AAqDhB7B,YAAAA,OAAO,CAACO,KAAR;AACAvC,YAAAA,GAAG,CAACwC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,aAAeA;AAA1B,aAArB;;AAtDgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZ4C,YAAY;AAAA;AAAA;AAAA,GAAlB;AA2DP;;;;;;;;AAIO,IAAMW,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACfhE,gBAAMiE,UAAN,CAAiB;AAAElD,cAAAA,MAAM,EAAEiD;AAAV,aAAjB,EAAqC9D,IAArC,EADe;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhB6D,gBAAgB;AAAA;AAAA;AAAA,GAAtB,C,CAIP;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;;;;AACO,IAAMb,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOnC,MAAP,EAAeG,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEAlB,gBAAMuD,OAAN,CAAc;AAAExC,cAAAA,MAAM,EAAEA,MAAV;AAAkBI,cAAAA,EAAE,EAAED;AAAtB,aAAd,CAFA;;AAAA;AAEdD,YAAAA,KAFc;AAAA;AAAA,mBAGA,+BAAS;AAAEF,cAAAA,MAAM,EAAEA,MAAV;AAAkBG,cAAAA,OAAO,EAAEA;AAA3B,aAAT,CAHA;;AAAA;AAGdG,YAAAA,KAHc;AAAA;AAAA,mBAIA,oCAAaJ,KAAK,CAACF,MAAnB,CAJA;;AAAA;AAIdC,YAAAA,KAJc;AAKdM,YAAAA,iBALc,GAKM,uCAA2BN,KAAK,CAACO,YAAjC,EAA+CP,KAAK,CAACQ,aAArD,EAAoEP,KAAK,CAACM,YAA1E,EAAwFN,KAAK,CAACO,aAA9F,CALN;AAMhB0C,YAAAA,SANgB,GAMJ,EANI;AAOpB7C,YAAAA,KAAK,CAAC8C,OAAN,CAAc,UAAAC,IAAI,EAAI;AAClB,kBAAIC,QAAQ,GAAG;AACXlD,gBAAAA,EAAE,EAAEiD,IAAI,CAACjD,EADE;AAEXmD,gBAAAA,QAAQ,EAAEF,IAAI,CAACE,QAFJ;AAGXC,gBAAAA,MAAM,EAAEH,IAAI,CAACG,MAHF;AAIXC,gBAAAA,UAAU,EAAEJ,IAAI,CAACI,UAJN;AAKXC,gBAAAA,QAAQ,EAAEL,IAAI,CAACK,QALJ;AAMXC,gBAAAA,KAAK,EAAEN,IAAI,CAACM,KAND;AAOXC,gBAAAA,GAAG,EAAEP,IAAI,CAACO,GAPC;AAQXC,gBAAAA,KAAK,EAAER,IAAI,CAACQ,KARD;AASXC,gBAAAA,MAAM,EAAET,IAAI,CAACS,MATF;AAUXC,gBAAAA,IAAI,EAAEV,IAAI,CAACU;AAVA,eAAf;AAYAZ,cAAAA,SAAS,CAACvB,IAAV,CAAe0B,QAAf;AACH,aAdD;AAeI1C,YAAAA,SAtBgB,GAsBJ;AACZR,cAAAA,EAAE,EAAEF,KAAK,CAACE,EADE;AAEZS,cAAAA,UAAU,EAAEX,KAAK,CAACW,UAFN;AAGZQ,cAAAA,SAAS,EAAEnB,KAAK,CAACmB,SAHL;AAIZF,cAAAA,SAAS,EAAEjB,KAAK,CAACiB,SAJL;AAKZ5B,cAAAA,MAAM,EAAEW,KAAK,CAACX,MALF;AAMZ0B,cAAAA,OAAO,EAAEf,KAAK,CAACe,OANH;AAOZC,cAAAA,OAAO,EAAEhB,KAAK,CAACgB,OAPH;AAQZH,cAAAA,KAAK,EAAEb,KAAK,CAACa,KARD;AASZC,cAAAA,OAAO,EAAEd,KAAK,CAACc,OATH;AAUZI,cAAAA,KAAK,EAAElB,KAAK,CAACkB,KAVD;AAWZd,cAAAA,KAAK,EAAE6C,SAXK;AAYZ5C,cAAAA,iBAAiB,EAAEA,iBAZP;AAaZC,cAAAA,YAAY,EAAEN,KAAK,CAACM,YAbR;AAcZC,cAAAA,aAAa,EAAEP,KAAK,CAACO,aAdT;AAeZa,cAAAA,YAAY,EAAEpB,KAAK,CAACoB,YAfR;AAgBZC,cAAAA,WAAW,EAAErB,KAAK,CAACsB,YAhBP;AAiBZC,cAAAA,YAAY,EAAEvB,KAAK,CAACuB,YAjBR;AAkBZC,cAAAA,cAAc,EAAExB,KAAK,CAACwB,cAlBV;AAmBZC,cAAAA,QAAQ,EAAEzB,KAAK,CAACyB;AAnBJ,aAtBI;AAAA,8CA2Cbf,SA3Ca;;AAAA;AAAA;AAAA;AA6CpB7B,YAAAA,OAAO,CAACO,KAAR,CAAc;AAAE0E,cAAAA,eAAe;AAAjB,aAAd;AA7CoB,kBA8Cd,IAAIC,KAAJ,CAAU,aAAgBxE,OAA1B,CA9Cc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZ0C,YAAY;AAAA;AAAA;AAAA,GAAlB;;;;AAmDA,IAAM+B,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAMC,SAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEXnE,YAAAA,MAFW,GAMgBmE,SANhB,CAEXnE,MAFW,EAEHc,MAFG,GAMgBqD,SANhB,CAEHrD,MAFG,EAEK8C,GAFL,GAMgBO,SANhB,CAEKP,GAFL,EAEUQ,QAFV,GAMgBD,SANhB,CAEUC,QAFV,EAEoBC,IAFpB,GAMgBF,SANhB,CAEoBE,IAFpB,EAGftD,KAHe,GAMgBoD,SANhB,CAGfpD,KAHe,EAGRuD,QAHQ,GAMgBH,SANhB,CAGRG,QAHQ,EAGEC,YAHF,GAMgBJ,SANhB,CAGEI,YAHF,EAGgBC,YAHhB,GAMgBL,SANhB,CAGgBK,YAHhB,EAIfC,iBAJe,GAMgBN,SANhB,CAIfM,iBAJe,EAIIC,UAJJ,GAMgBP,SANhB,CAIIO,UAJJ,EAIgBC,WAJhB,GAMgBR,SANhB,CAIgBQ,WAJhB,EAI6BnB,MAJ7B,GAMgBW,SANhB,CAI6BX,MAJ7B,EAIqCoB,SAJrC,GAMgBT,SANhB,CAIqCS,SAJrC,EAKff,KALe,GAMgBM,SANhB,CAKfN,KALe,EAKRgB,aALQ,GAMgBV,SANhB,CAKRU,aALQ,EAKOC,UALP,GAMgBX,SANhB,CAKOW,UALP,EAKmBC,UALnB,GAMgBZ,SANhB,CAKmBY,UALnB,EAMfC,WANe,GAMgBb,SANhB,CAMfa,WANe,EAMFC,aANE,GAMgBd,SANhB,CAMFc,aANE;AAQfC,YAAAA,UARe,GAQF,CARE;AASfC,YAAAA,YATe,GASA,EATA;AAUnBA,YAAAA,YAAY,CAACnF,MAAb,GAAsBA,MAAtB;AACAmF,YAAAA,YAAY,CAACrE,MAAb,GAAsBA,MAAtB;;AACA,gBAAIuD,IAAJ,EAAU;AACEe,cAAAA,UADF,GACyCf,IADzC,CACEe,UADF,EACcC,SADd,GACyChB,IADzC,CACcgB,SADd,EACyBC,WADzB,GACyCjB,IADzC,CACyBiB,WADzB;AAENH,cAAAA,YAAY,CAACC,UAAb,GAA0BA,UAA1B;AACAD,cAAAA,YAAY,CAACE,SAAb,GAAyBA,SAAzB;AACAF,cAAAA,YAAY,CAACG,WAAb,GAA2BA,WAA3B;AACH;;AACDH,YAAAA,YAAY,CAACpE,KAAb,GAAqBA,KAArB;AACAoE,YAAAA,YAAY,CAACf,QAAb,GAAwBA,QAAxB;AACAe,YAAAA,YAAY,CAACb,QAAb,GAAwBA,QAAxB;AApBmB;AAAA,mBAqBA,0CAAgBa,YAAhB,CArBA;;AAAA;AAqBnBD,YAAAA,UArBmB;AAAA;AAAA,mBAsBCjG,gBAAMuD,OAAN,CAAc;AAAExC,cAAAA,MAAM,EAAEA,MAAV;AAAkBc,cAAAA,MAAM,EAAEA,MAA1B;AAAkCvB,cAAAA,MAAM,EAAEjD;AAA1C,aAAd,EAA+E6C,IAA/E,EAtBD;;AAAA;AAsBbe,YAAAA,KAtBa;;AAAA,iBAwBfA,KAxBe;AAAA;AAAA;AAAA;;AAyBfiE,YAAAA,SAAS,CAAChE,OAAV,GAAoBD,KAAK,CAACE,EAA1B;AAEI8D,YAAAA,YA3BW,GA2BG,KA3BH;;AA4Bf,gBAAIE,QAAJ,EAAc;AACVlE,cAAAA,KAAK,CAACM,YAAN,GAAqB4D,QAAQ,CAACmB,GAA9B;AACArF,cAAAA,KAAK,CAACO,aAAN,GAAsB2D,QAAQ,CAACoB,IAA/B;AACAtF,cAAAA,KAAK,CAACuF,YAAN,GAAqBrB,QAAQ,CAACsB,GAA9B;AACAxB,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIS,WAAJ,EAAiB;AACbzE,cAAAA,KAAK,CAACyE,WAAN,GAAoBA,WAApB;AACAT,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIN,GAAJ,EAAS;AACL1D,cAAAA,KAAK,CAACiB,SAAN,GAAkByC,GAAlB;AACAM,cAAAA,YAAW,GAAG,IAAd,CAFK,CAIL;AACA;;AACAC,cAAAA,SAAS,CAACP,GAAV,GAAgB,CAAhB;AACH,aA/Cc,CAiDf;;;AACA,gBAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC3B3D,cAAAA,KAAK,CAACyF,gBAAN,GAAyB9B,KAAzB;AACAM,cAAAA,SAAS,CAACX,MAAV,GAAmBtD,KAAK,CAAC0F,eAAzB;AACAzB,cAAAA,SAAS,CAACP,GAAV,GAAgB,CAAhB;AAEAM,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIW,aAAJ,EAAmB;AACf;AACA;AACA3E,cAAAA,KAAK,CAACiB,SAAN,GAAkBjB,KAAK,CAACiB,SAAN,GAAkB0D,aAAlB,GAAkC,CAApD,CAHe,CAIf;;AACA3E,cAAAA,KAAK,CAAC2E,aAAN,GAAsBA,aAAtB,CALe,CAMf;AACA;;AACAV,cAAAA,SAAS,CAACN,KAAV,GAAkBgB,aAAlB;AACAX,cAAAA,YAAW,GAAG,IAAd;AACH,aApEc,CAsEf;AACA;;;AACA,gBAAIY,UAAJ,EAAgB;AACZ5E,cAAAA,KAAK,CAAC2E,aAAN,GAAsB,IAAtB;AACA3E,cAAAA,KAAK,CAACyF,gBAAN,GAAyB,IAAzB;AACAzB,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIgB,UAAU,GAAG,CAAjB,EAAoB;AAChBhF,cAAAA,KAAK,CAACW,UAAN,GAAmBqE,UAAnB;AACAhB,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAInD,KAAJ,EAAW;AACPb,cAAAA,KAAK,CAACa,KAAN,GAAcA,KAAd;AACAmD,cAAAA,YAAW,GAAG,IAAd;AACH;;AACD,gBAAII,QAAJ,EAAc;AACVpE,cAAAA,KAAK,CAACc,OAAN,GAAgBsD,QAAQ,CAACuB,gBAAzB;;AACA,kBAAIvB,QAAQ,CAAC9D,YAAT,IAAyB8D,QAAQ,CAAC7D,aAAtC,EAAqD;AACjDP,gBAAAA,KAAK,CAACM,YAAN,GAAqB8D,QAAQ,CAAC9D,YAA9B;AACAN,gBAAAA,KAAK,CAACO,aAAN,GAAsB6D,QAAQ,CAAC7D,aAA/B;AACH;;AACDyD,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIV,MAAJ,EAAY;AACRtD,cAAAA,KAAK,CAAC0F,eAAN,GAAwBpC,MAAxB;AACAU,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIK,YAAJ,EAAkB;AACd,kBAAIrE,KAAK,CAAC4F,aAAV,EAAyB5F,KAAK,CAAC4F,aAAN,GAAsB5F,KAAK,CAAC4F,aAAN,GAAsB,CAA5C,CAAzB,KACK5F,KAAK,CAAC4F,aAAN,GAAsB,CAAtB;AACL5B,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIM,YAAJ,EAAkB;AACdtE,cAAAA,KAAK,CAACX,MAAN,GAAehD,qBAAf;AACA2D,cAAAA,KAAK,CAACoB,YAAN,GAAqBpD,gBAAS0E,KAAT,EAArB;AACAsB,cAAAA,YAAW,GAAG,IAAd;AACH,aAJD,MAIO;AACH;AACA;AACA;AACA,kBAAIhE,KAAK,CAAC2E,aAAN,IAAuB3E,KAAK,CAAC2E,aAAN,GAAsB,CAAjD,EAAoD;AAChDV,gBAAAA,SAAS,CAACN,KAAV,GAAkB3D,KAAK,CAAC2E,aAAxB;AACAX,gBAAAA,YAAW,GAAG,IAAd;AACH;AACJ;;AAED,gBAAI,OAAOO,iBAAP,KAA6B,SAAjC,EAA4C;AACxCvE,cAAAA,KAAK,CAACuE,iBAAN,GAA0BA,iBAA1B;AACAP,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIQ,UAAJ,EAAgB;AACZxE,cAAAA,KAAK,CAACwE,UAAN,GAAmBA,UAAnB;AACAR,cAAAA,YAAW,GAAG,IAAd;AACH;;AAjIc,kBAmIX,OAAOU,SAAP,KAAqB,SAnIV;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAoIS,oCAAc;AAAEzE,cAAAA,OAAO,EAAED,KAAK,CAACE,EAAjB;AAAqBJ,cAAAA,MAAM,EAAEE,KAAK,CAACF;AAAnC,aAAd,CApIT;;AAAA;AAoILoB,YAAAA,KApIK;;AAqIX,gBAAIA,KAAK,GAAG,CAAR,IAAaA,KAAK,KAAKlB,KAAK,CAACkB,KAAjC,EAAwC;AACpClB,cAAAA,KAAK,CAACkB,KAAN,GAAcA,KAAd;AACA8C,cAAAA,YAAW,GAAG,IAAd;AACH;;AAxIU;AA2If,gBAAI,OAAOa,UAAP,KAAsB,SAA1B,EAAqC;AACjC7E,cAAAA,KAAK,CAAC6F,WAAN,GAAoBhB,UAApB;AACAb,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIc,WAAJ,EAAiB;AACb9E,cAAAA,KAAK,CAACuB,YAAN,GAAqBuD,WAArB;AACAd,cAAAA,YAAW,GAAG,IAAd;AACH;;AAED,gBAAIe,aAAJ,EAAmB;AACf/E,cAAAA,KAAK,CAACwB,cAAN,GAAuBuD,aAAvB;AACAf,cAAAA,YAAW,GAAG,IAAd;AACH;;AAxJc,iBA0JXA,YA1JW;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA2JLhE,KAAK,CAAC6C,IAAN,EA3JK;;AAAA;AAAA;AAAA,mBA6JT,iCAAWoB,SAAX,CA7JS;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAmKYlF,gBAAMC,IAAN,CAAW;AAAEc,cAAAA,MAAM,EAAEA;AAAV,aAAX,EAA+BgG,MAA/B,CAAsC,IAAtC,EAA4C9I,IAA5C,CAAiD,KAAjD,EAAwD2C,KAAxD,CAA8D,CAA9D,EAAiEV,IAAjE,EAnKZ;;AAAA;AAmKT8G,YAAAA,YAnKS;AAoKX9F,YAAAA,OApKW,GAoKD,CApKC;AAqKf,gBAAI8F,YAAY,IAAIA,YAAY,CAACtI,MAAjC,EAAyCwC,OAAO,GAAG8F,YAAY,CAAC,CAAD,CAAZ,CAAgB7F,EAAhB,GAAqB,CAA/B;AAEnC8F,YAAAA,MAvKS,GAuKA,IAAIjH,eAAJ,CAAU;AACrBmB,cAAAA,EAAE,EAAED,OADiB;AAErBH,cAAAA,MAAM,EAAEA,MAFa;AAGrBc,cAAAA,MAAM,EAAEA,MAHa;AAIrBK,cAAAA,SAAS,EAAEyC,GAAG,GAAGA,GAAH,GAAS,CAJF;AAKrBpD,cAAAA,YAAY,EAAE4D,QAAQ,GAAGA,QAAQ,CAACmB,GAAZ,GAAkB,IALnB;AAMrB9E,cAAAA,aAAa,EAAE2D,QAAQ,GAAGA,QAAQ,CAACoB,IAAZ,GAAmB,IANrB;AAOrBC,cAAAA,YAAY,EAAErB,QAAQ,GAAGA,QAAQ,CAACsB,GAAZ,GAAkB,IAPnB;AAQrBjB,cAAAA,iBAAiB,EAAE,OAAOA,iBAAP,KAA6B,SAA7B,GAAyCA,iBAAzC,GAA6D,KAR3D;AASrBlF,cAAAA,MAAM,EAAEjD;AATa,aAAV,CAvKA;AAAA;AAAA,mBAkLT4J,MAAM,CAACnD,IAAP,EAlLS;;AAAA;AAmLfoB,YAAAA,SAAS,CAAChE,OAAV,GAAoB+F,MAAM,CAAC9F,EAA3B;AAnLe;AAAA,mBAoLT,iCAAW+D,SAAX,CApLS;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuLnBpF,YAAAA,OAAO,CAACO,KAAR,CAAc;AAAE6G,cAAAA,gBAAgB;AAAlB,aAAd;AAvLmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXjC,WAAW;AAAA;AAAA;AAAA,GAAjB;;;;AA4LA,IAAMkC,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAMjC,SAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnBrD,YAAAA,MADmB,GACYqD,SADZ,CACnBrD,MADmB,EACXd,MADW,GACYmE,SADZ,CACXnE,MADW,EACHqG,UADG,GACYlC,SADZ,CACHkC,UADG;AAAA;AAAA,mBAGNpH,gBAAMuD,OAAN,CAAc;AAAE1B,cAAAA,MAAM,EAAEA,MAAV;AAAkBd,cAAAA,MAAM,EAAEA,MAA1B;AAAkCT,cAAAA,MAAM,EAAEjD;AAA1C,aAAd,EAA+E6C,IAA/E,EAHM;;AAAA;AAGrBmH,YAAAA,MAHqB;;AAAA,iBAIvBA,MAJuB;AAAA;AAAA;AAAA;;AAAA,kBAKnBD,UAAU,IAAIA,UAAU,KAAK,IALV;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAME,+BAAS;AAAElG,cAAAA,OAAO,EAAEmG,MAAM,CAAClG,EAAlB;AAAsBJ,cAAAA,MAAM,EAAEA;AAA9B,aAAT,CANF;;AAAA;AAMbuG,YAAAA,MANa;AAQbC,YAAAA,aARa,GAQG;AAClBtG,cAAAA,KAAK,EAAEoG,MADW;AAElBhG,cAAAA,KAAK,EAAEiG;AAFW,aARH;AAAA,8CAaZC,aAbY;;AAAA;AAebC,YAAAA,WAfa,GAeC;AAChBvG,cAAAA,KAAK,EAAEoG;AADS,aAfD;AAAA,8CAkBZG,WAlBY;;AAAA;AAAA;AAAA;;AAAA;AAAA,8CAoBb,IApBa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfL,eAAe;AAAA;AAAA;AAAA,GAArB;;;;AAuBA,IAAMM,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAMvC,SAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACzBnE,YAAAA,MADyB,GACFmE,SADE,CACzBnE,MADyB,EACjBa,UADiB,GACFsD,SADE,CACjBtD,UADiB;AAAA;AAAA,mBAGZ5B,gBAAMC,IAAN,CAAW;AAAEc,cAAAA,MAAM,EAAEA,MAAV;AAAkBa,cAAAA,UAAU,EAAEA;AAA9B,aAAX,EAAuDmF,MAAvD,CAA8D,iBAA9D,EAAiF9I,IAAjF,CAAsF,WAAtF,EAAmGiC,IAAnG,EAHY;;AAAA;AAG3BwH,YAAAA,MAH2B;AAI7BC,YAAAA,WAJ6B,GAIf,CAJe;AAK7BC,YAAAA,SAL6B,GAKjB,CALiB;AAM7BC,YAAAA,WAN6B,GAMfC,IAAI,CAACC,GAAL,EANe;AAO7BC,YAAAA,UAP6B,GAOhB,IAPgB;AAAA;AAAA;AAAA;AAAA;;AAQjC,6BAAoBN,MAApB,uHAA4B;AAAjBzG,cAAAA,KAAiB;AACxB0G,cAAAA,WAAW,IAAI1G,KAAK,CAACkB,KAArB;AACAyF,cAAAA,SAAS,IAAI,CAAb;;AAEA,kBAAIC,WAAW,IAAI5G,KAAK,CAACmB,SAAzB,EAAoC;AAChCyF,gBAAAA,WAAW,GAAG5G,KAAK,CAACmB,SAApB;AACH;;AACD,kBAAI4F,UAAU,IAAI/G,KAAK,CAACmB,SAAxB,EAAmC;AAC/B4F,gBAAAA,UAAU,GAAG/G,KAAK,CAACmB,SAAnB;AACH;AACJ;;AAlBgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,8CAmB1B;AAAEuF,cAAAA,WAAW,EAAXA,WAAF;AAAeC,cAAAA,SAAS,EAATA,SAAf;AAA0BC,cAAAA,WAAW,EAAXA,WAA1B;AAAuCG,cAAAA,UAAU,EAAVA;AAAvC,aAnB0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAArBP,qBAAqB;AAAA;AAAA;AAAA,GAA3B;AAsBP;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import Order from '../models/orders';\nimport util from \"util\";\nimport { updateItem, getItems, getItemsTotal } from './itemsController';\nimport { customer_update } from './customersController';\nimport { getStoreData } from './storesController';\nimport { configSortQuery, configRangeQueryNew, configFilterQueryMultiple, distanceBetweenCoordinates } from '../util/util';\nimport { DateTime } from 'luxon';\n// import { Bot, Elements } from 'facebook-messenger-bot';\n// import { getOnePageToken } from './pagesController';\nimport { sendShippingNotification, sendRejectionNotification } from '../bot/botController';\nconst ORDERSTATUS_PENDING = 0;\nconst ORDERSTATUS_CONFIRMED = 1;\nconst ORDERSTATUS_ACCEPTED = 2;\nconst ORDERSTATUS_PRINTED = 3;\nconst ORDERSTATUS_DELIVERED = 4;\nconst ORDERSTATUS_REJECTED = 8;\nconst ORDERSTATUS_CANCELLED = 9;\n\n// List all orders\n// TODO: use filters in the query req.query\nexport const order_get_all = async (req, res) => {\n    try {\n        const sortObj = configSortQuery(req.query.sort);\n        const rangeObj = configRangeQueryNew(req.query.range);\n        const filterObj = configFilterQueryMultiple(req.query.filter);\n\n        let queryParam = {};\n        if (req.currentUser.activePage) {\n            queryParam['pageId'] = req.currentUser.activePage;\n        }\n\n        if (!sortObj) {\n            sortObj['createdAt'] = \"DESC\";\n        }\n\n        if (filterObj && filterObj.filterField && filterObj.filterField.length) {\n            for (let i = 0; i < filterObj.filterField.length; i++) {\n                const filter = filterObj.filterField[i];\n                const value = filterObj.filterValues[i];\n                if (Array.isArray(value)) {\n                    if (value.length === 2) {\n                        const dateIni = DateTime.fromISO(value[0]);\n                        const dateEnd = DateTime.fromISO(value[1]);\n\n                        if (!dateIni.invalid && !dateEnd.invalid)// is date\n                            queryParam[filter] = { $gte: dateIni.toISO(), $lt: dateEnd.toISO() };\n                        else\n                            queryParam[filter] = { $in: value };\n                    } else\n                        queryParam[filter] = { $in: value };\n                } else {\n                    const date = DateTime.fromISO(value);\n                    if (!date.invalid) { // is a date\n                        const nextDay = date.plus({ days: 1 });\n                        queryParam[filter] = { $gte: date.toISODate(), $lt: nextDay.toISODate() };\n                    } else\n                        queryParam[filter] = value;\n                }\n            }\n        }\n\n        console.info('orders get_all queryParam:', queryParam, filterObj);\n\n        Order.find(queryParam).sort(sortObj).exec(async (findError, result) => {\n            if (findError) {\n                console.error({ findError });\n                res.status(500).json({ message: findError.message });\n            } else {\n                let _rangeIni = 0;\n                let _rangeEnd = result.length;\n                if (rangeObj) {\n                    _rangeIni = rangeObj.offset <= result.length ? rangeObj.offset : result.length;\n                    _rangeEnd = (rangeObj.offset + rangeObj.limit) <= result.length ? rangeObj.offset + rangeObj.limit : result.length;\n                }\n                let _totalCount = result.length;\n                let ordersArray = new Array();\n                if (result && result.length && result.length > 0) {\n                    const store = await getStoreData(result[0].pageId);\n                    for (let i = _rangeIni; i < _rangeEnd; i++) {\n                        const order = result[i];\n                        const items = await getItems({ orderId: order.id, pageId: order.pageId, completeItems: false });\n                        const distanceFromStore = distanceBetweenCoordinates(store.location_lat, store.location_long, order.location_lat, order.location_long);\n                        let formattedDistance;\n                        if (distanceFromStore < 1) {\n                            formattedDistance = (distanceFromStore * 100).toFixed(2) + ' m';\n                        } else {\n                            formattedDistance = distanceFromStore.toFixed(2) + ' km';\n                        }\n                        let jsonOrder = {\n                            id: order.id,\n                            pageId: order.pageId,\n                            customerId: order.customerId,\n                            userId: order.userId,\n                            phone: order.phone,\n                            address: order.address,\n                            status: order.status,\n                            status2: order.status2,\n                            status3: order.status3,\n                            qty_total: order.qty_total,\n                            total: order.total,\n                            createdAt: order.createdAt,\n                            items: items,\n                            distanceFromStore: formattedDistance,\n                            location_lat: order.location_lat,\n                            location_long: order.location_long,\n                            confirmed_at: order.confirmed_at,\n                            deliverd_at: order.delivered_at,\n                            payment_type: order.payment_type,\n                            payment_change: order.payment_change,\n                            comments: order.comments,\n                        }\n                        ordersArray.push(jsonOrder);\n                    }\n                }\n                res.setHeader('Content-Range', util.format(\"orders %d-%d/%d\", _rangeIni, _rangeEnd, _totalCount));\n                res.status(200).json(ordersArray);\n            }\n        });\n    } catch (orderGetAllErr) {\n        console.error({ orderGetAllErr })\n        res.status(500).json({ message: orderGetAllErr.message });\n    }\n};\n\n// List one record by filtering by ID\nexport const order_get_one = async (req, res) => {\n    if (req.params && req.params.id) {\n        try {\n            const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n            const jsonOrder = await getOrderJson(pageId, req.params.id);\n            res.status(200).json(jsonOrder);\n        } catch (orderGetOneError) {\n            console.error({ orderGetOneError });\n            res.status(500).json({ message: orderGetOneError.message });\n        }\n    }\n}\n\n// UPDATE\nexport const order_update = async (req, res) => {\n    if (req.body && req.body.id) {\n        try {\n            const { id, operation } = req.body;\n            const pageId = req.currentUser.activePage;\n            const doc = await Order.findOne({ pageId: pageId, id: id });\n\n            if (operation === 'REJECT') {\n                const { rejectionExplanation } = req.body;\n\n                doc.status = ORDERSTATUS_REJECTED;\n                doc.sent_reject_notification = DateTime.local();\n                doc.rejection_reason = rejectionExplanation;\n                sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            }\n            else if (operation === 'ACCEPT') {\n                doc.status = ORDERSTATUS_ACCEPTED;\n                // sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            }\n            else if (operation === 'PRINT') {\n                doc.status = ORDERSTATUS_PRINTED;\n                // sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            }\n            else if (operation === 'DELIVER') {\n                doc.status = ORDERSTATUS_DELIVERED;\n                if (!doc.sent_shipping_notification) {\n                    await sendShippingNotification(doc.pageId, doc.userId, doc.id);\n                    doc.sent_shipping_notification = DateTime.local();\n                }\n            }\n            else {\n                if (req.body.status2 === 'ordered') {\n                    doc.status = ORDERSTATUS_CONFIRMED;\n                } else if (req.body.status2 === 'delivered') {\n                    doc.status = ORDERSTATUS_DELIVERED;\n                    doc.delivered_at = DateTime.local();\n                } else if (req.body.status2 === 'cancelled') {\n                    doc.status = ORDERSTATUS_DELIVERED;\n                }\n\n                if (doc.status === ORDERSTATUS_DELIVERED) {\n                    if (!doc.sent_shipping_notification) {\n                        console.info(\"I am going to send to \" + doc.userId + \", about the order number:\" + doc.id + \" a shipping notification\");\n                        await sendShippingNotification(doc.pageId, doc.userId, doc.id);\n                        doc.sent_shipping_notification = DateTime.local();\n                    }\n                }\n            }\n            await doc.save();\n            const jsonOrder = await getOrderJson(pageId, doc.id);\n            res.status(200).json(jsonOrder);\n        }\n        catch (orderUpdateErr) {\n            console.error(orderUpdateErr);\n            res.status(500).json({ message: orderUpdateErr.message });\n        }\n    }\n}\n\n/**\n * Delete all records from a pageID\n * @param {*} pageID \n */\nexport const deleteManyOrders = async (pageID) => {\n    return await Order.deleteMany({ pageId: pageID }).exec();\n}\n\n// export const sendShippingNotification = async order => {\n//     const { accessToken } = await getOnePageToken(order.pageId);\n\n//     const _txt = 'O seu pedido número ' + order.id + ' acabou de sair para entrega. Bom apetite!';\n\n//     const out = new Elements();\n//     out.add({ text: _txt });\n//     await Bot.send_message_tag(accessToken, order.userId, out);\n// }\n\n// List one record by filtering by ID\nexport const getOrderJson = async (pageId, orderId) => {\n    try {\n        const order = await Order.findOne({ pageId: pageId, id: orderId });\n        const items = await getItems({ pageId: pageId, orderId: orderId });\n        const store = await getStoreData(order.pageId);\n        const distanceFromStore = distanceBetweenCoordinates(store.location_lat, store.location_long, order.location_lat, order.location_long);\n        let jsonItems = [];\n        items.forEach(item => {\n            let jsonItem = {\n                id: item.id,\n                flavorId: item.flavorId,\n                sizeId: item.sizeId,\n                beverageId: item.beverageId,\n                beverage: item.beverage,\n                price: item.price,\n                qty: item.qty,\n                split: item.split,\n                flavor: item.flavor,\n                size: item.size,\n            }\n            jsonItems.push(jsonItem);\n        });\n        let jsonOrder = {\n            id: order.id,\n            customerId: order.customerId,\n            createdAt: order.createdAt,\n            qty_total: order.qty_total,\n            status: order.status,\n            status2: order.status2,\n            status3: order.status3,\n            phone: order.phone,\n            address: order.address,\n            total: order.total,\n            items: jsonItems,\n            distanceFromStore: distanceFromStore,\n            location_lat: order.location_lat,\n            location_long: order.location_long,\n            confirmed_at: order.confirmed_at,\n            deliverd_at: order.delivered_at,\n            payment_type: order.payment_type,\n            payment_change: order.payment_change,\n            comments: order.comments,\n        }\n        return jsonOrder;\n    } catch (getOrderJsonErr) {\n        console.error({ getOrderJsonErr });\n        throw new Error(getOrderJsonErr.message);\n    }\n}\n\n\nexport const updateOrder = async orderData => {\n    try {\n        const { pageId, userId, qty, location, user,\n            phone, addrData, completeItem, confirmOrder,\n            waitingForAddress, waitingFor, currentItem, sizeId, calcTotal,\n            split, originalSplit, eraseSplit, noBeverage,\n            paymentType, paymentChange } = orderData;\n\n        let customerID = 0;\n        let customerData = {}\n        customerData.pageId = pageId;\n        customerData.userId = userId;\n        if (user) {\n            const { first_name, last_name, profile_pic } = user;\n            customerData.first_name = first_name;\n            customerData.last_name = last_name;\n            customerData.profile_pic = profile_pic;\n        }\n        customerData.phone = phone;\n        customerData.location = location;\n        customerData.addrData = addrData;\n        customerID = await customer_update(customerData);\n        const order = await Order.findOne({ pageId: pageId, userId: userId, status: ORDERSTATUS_PENDING }).exec();\n\n        if (order) {\n            orderData.orderId = order.id;\n\n            let updateOrder = false;\n            if (location) {\n                order.location_lat = location.lat;\n                order.location_long = location.long;\n                order.location_url = location.url;\n                updateOrder = true;\n            }\n\n            if (currentItem) {\n                order.currentItem = currentItem;\n                updateOrder = true;\n            }\n\n            if (qty) {\n                order.qty_total = qty;\n                updateOrder = true;\n\n                // order has total quantity.\n                // items are always 1. this variable will be passed to updateItem\n                orderData.qty = 1;\n            }\n\n            // when I have a split, I am forcing size and qty\n            if (typeof split === 'number') {\n                order.currentItemSplit = split;\n                orderData.sizeId = order.currentItemSize;\n                orderData.qty = 1;\n\n                updateOrder = true;\n            }\n\n            if (originalSplit) {\n                // split increments the items number (+originalSplit)\n                //  and removes 1 (that was the original quantity asked by the user)\n                order.qty_total = order.qty_total + originalSplit - 1;\n                // saving the originalSplit in the order and... \n                order.originalSplit = originalSplit;\n                // ...always saving the split as originalSplit in item.\n                // because the split in the order will be decreased until 1\n                orderData.split = originalSplit;\n                updateOrder = true;\n            }\n\n            // eraseSplit is sent when I am gonna ask the user\n            // about the next pizza.\n            if (eraseSplit) {\n                order.originalSplit = null;\n                order.currentItemSplit = null;\n                updateOrder = true;\n            }\n\n            if (customerID > 0) {\n                order.customerId = customerID;\n                updateOrder = true;\n            }\n\n            if (phone) {\n                order.phone = phone;\n                updateOrder = true;\n            }\n            if (addrData) {\n                order.address = addrData.formattedAddress;\n                if (addrData.location_lat && addrData.location_long) {\n                    order.location_lat = addrData.location_lat;\n                    order.location_long = addrData.location_long;\n                }\n                updateOrder = true;\n            }\n\n            if (sizeId) {\n                order.currentItemSize = sizeId;\n                updateOrder = true;\n            }\n\n            if (completeItem) {\n                if (order.item_complete) order.item_complete = order.item_complete + 1;\n                else order.item_complete = 1;\n                updateOrder = true;\n            }\n\n            if (confirmOrder) {\n                order.status = ORDERSTATUS_CONFIRMED;\n                order.confirmed_at = DateTime.local();\n                updateOrder = true;\n            } else {\n                // when updateorder with flavor, I dont have neither split nor originalSplit\n                // but, if the order has an originalSplit, I am going to send it to the item.\n                // This code should run only if I am not confirming the order.\n                if (order.originalSplit && order.originalSplit > 1) {\n                    orderData.split = order.originalSplit;\n                    updateOrder = true;\n                }\n            }\n\n            if (typeof waitingForAddress === 'boolean') {\n                order.waitingForAddress = waitingForAddress;\n                updateOrder = true;\n            }\n\n            if (waitingFor) {\n                order.waitingFor = waitingFor;\n                updateOrder = true;\n            }\n\n            if (typeof calcTotal === 'boolean') {\n                const total = await getItemsTotal({ orderId: order.id, pageId: order.pageId });\n                if (total > 0 && total !== order.total) {\n                    order.total = total;\n                    updateOrder = true;\n                }\n            }\n\n            if (typeof noBeverage === 'boolean') {\n                order.no_beverage = noBeverage;\n                updateOrder = true;\n            }\n\n            if (paymentType) {\n                order.payment_type = paymentType;\n                updateOrder = true;\n            }\n\n            if (paymentChange) {\n                order.payment_change = paymentChange;\n                updateOrder = true;\n            }\n\n            if (updateOrder)\n                await order.save();\n\n            await updateItem(orderData);\n        } else {\n            // const count = await Order.find({ pageId: pageId }).count().exec();\n            // let orderId = 1;\n            // if (count) orderId = count + 1;\n\n            const resultLastId = await Order.find({ pageId: pageId }).select('id').sort('-id').limit(1).exec();\n            let orderId = 1;\n            if (resultLastId && resultLastId.length) orderId = resultLastId[0].id + 1;\n\n            const record = new Order({\n                id: orderId,\n                pageId: pageId,\n                userId: userId,\n                qty_total: qty ? qty : 0,\n                location_lat: location ? location.lat : null,\n                location_long: location ? location.long : null,\n                location_url: location ? location.url : null,\n                waitingForAddress: typeof waitingForAddress === 'boolean' ? waitingForAddress : false,\n                status: ORDERSTATUS_PENDING,\n            });\n            await record.save();\n            orderData.orderId = record.id;\n            await updateItem(orderData);\n        }\n    } catch (updateOrderError) {\n        console.error({ updateOrderError });\n        throw updateOrderError;\n    }\n}\n\nexport const getOrderPending = async orderData => {\n    const { userId, pageId, isComplete } = orderData;\n\n    const _order = await Order.findOne({ userId: userId, pageId: pageId, status: ORDERSTATUS_PENDING }).exec();\n    if (_order) {\n        if (isComplete && isComplete === true) {\n            const _items = await getItems({ orderId: _order.id, pageId: pageId });\n\n            const completeOrder = {\n                order: _order,\n                items: _items,\n            };\n\n            return completeOrder;\n        } else {\n            const headerOrder = {\n                order: _order,\n            }\n            return headerOrder;\n        }\n    } else return null;\n}\n\nexport const getOrdersCustomerStat = async orderData => {\n    const { pageId, customerId } = orderData;\n\n    const orders = await Order.find({ pageId: pageId, customerId: customerId }).select('createdAt total').sort('createdAt').exec();\n    let total_spent = 0;\n    let nb_orders = 0;\n    let first_order = Date.now();\n    let last_order = null;\n    for (const order of orders) {\n        total_spent += order.total;\n        nb_orders += 1;\n\n        if (first_order >= order.createdAt) {\n            first_order = order.createdAt;\n        }\n        if (last_order <= order.createdAt) {\n            last_order = order.createdAt;\n        }\n    }\n    return { total_spent, nb_orders, first_order, last_order };\n}\n\n/**\n * Trying to reduce the number of calls to getFlavors and getSizes.\n * @param {*} flavors\n * @param {*} sizes\n * @param {*} orderData\n */\n// const getPerformaticItems = async (flavors, sizes, orderData) => {\n//     orderData.completeItems = false;\n//     let items = await getItems(orderData);\n//     for (let i = 0; i < items.length; i++) {\n//         let item = items[i];\n//         if (flavors[item.flavorId]) {\n//             item.flavor = flavors[item.flavorId];\n//         } else {\n//             const flavor = await getFlavor(orderData.pageId, item.flavorId);\n//             if (flavor) {\n//                 item.flavor = flavors[flavor.id] = flavor.flavor;\n//             }\n//         }\n//         if (sizes[item.sizeId]) {\n//             item.size = sizes[item.sizeId];\n//         } else {\n//             const size = await getSize(orderData.pageId, item.sizeId);\n//             if (size) {\n//                 item.size = sizes[size.id] = size.size;\n//             }\n//         }\n//     }\n//     return items;\n// }\n\n"],"file":"ordersController.js"}