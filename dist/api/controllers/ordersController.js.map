{"version":3,"sources":["../../../src/api/controllers/ordersController.js"],"names":["ORDERSTATUS_PENDING","ORDERSTATUS_CONFIRMED","ORDERSTATUS_CANCELLED","ORDERSTATUS_DELIVERED","updateOrder","orderData","pageId","userId","qty","location","user","phone","addrData","completeItem","confirmOrder","waitingForAddress","waitingFor","sizeId","first_name","last_name","profile_pic","Order","findOne","status","exec","order","orderId","id","location_lat","lat","location_long","long","location_url","url","qty_total","address","formattedAddress","currentItemSize","item_complete","save","find","select","sort","limit","resultLastId","length","console","info","record","saved","error","getOrderPending","isComplete","_order","_items","completeOrder","items","headerOrder"],"mappings":"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","sourcesContent":["import Order from '../models/orders';\nimport { updateItem, getItems } from './itemsController';\nimport { customer_update } from './customersController';\nimport { throwError } from 'rxjs';\n\nconst ORDERSTATUS_PENDING = 0;\nconst ORDERSTATUS_CONFIRMED = 1;\nconst ORDERSTATUS_CANCELLED = 2;\nconst ORDERSTATUS_DELIVERED = 3;\n\nexport const updateOrder = async orderData => {\n    try {\n        const { pageId, userId, qty, location, user, phone, addrData, completeItem, confirmOrder, waitingForAddress, waitingFor, sizeId } = orderData;\n\n        if (user) {\n            const { first_name, last_name, profile_pic } = user;\n            await customer_update({ pageId, userId, first_name, last_name, profile_pic })\n        } else if (phone) {\n            await customer_update({ pageId, userId, phone })\n        } else if (location) {\n            await customer_update({ pageId, userId, location })\n        } else if (addrData) {\n            await customer_update({ pageId, userId, addrData })\n        }\n\n        const order = await Order.findOne({ pageId: pageId, userId: userId, status: ORDERSTATUS_PENDING }).exec();\n\n        if (order) {\n            orderData.orderId = order.id;\n\n            let updateOrder = false;\n            if (location) {\n                order.location_lat = location.lat;\n                order.location_long = location.long;\n                order.location_url = location.url;\n                updateOrder = true;\n            }\n            if (qty) {\n                order.qty_total = qty;\n                updateOrder = true;\n\n                // order has total quantity.\n                // items are always 1. this variable will be passed to updateItem\n                orderData.qty = 1;\n            }\n            if (phone) {\n                order.phone = phone;\n                updateOrder = true;\n            }\n            if (addrData) {\n                order.address = addrData.formattedAddress;\n                updateOrder = true;\n            }\n\n            if (sizeId) {\n                order.currentItemSize = sizeId;\n                updateOrder = true;\n            }\n\n            if (completeItem) {\n                if (order.item_complete) order.item_complete = order.item_complete + 1;\n                else order.item_complete = 1;\n                updateOrder = true;\n            }\n\n            if (confirmOrder) {\n                order.status = ORDERSTATUS_CONFIRMED;\n                updateOrder = true;\n            }\n\n            if (typeof waitingForAddress === 'boolean') {\n                order.waitingForAddress = waitingForAddress;\n                updateOrder = true;\n            }\n\n            if (waitingFor) {\n                order.waitingFor = waitingFor;\n                updateOrder = true;\n            }\n\n            if (updateOrder)\n                await order.save();\n\n            await updateItem(orderData);\n        } else {\n            // const count = await Order.find({ pageId: pageId }).count().exec();\n            // let orderId = 1;\n            // if (count) orderId = count + 1;\n\n            const resultLastId = await Order.find({ pageId: pageId }).select('id').sort('-id').limit(1).exec();\n            let orderId = 1;\n            if (resultLastId && resultLastId.length) orderId = resultLastId[0].id + 1;\n\n            console.info({ resultLastId });\n\n            const record = new Order({\n                id: orderId,\n                pageId: pageId,\n                userId: userId,\n                qty_total: qty ? qty : 0,\n                location_lat: location ? location.lat : null,\n                location_long: location ? location.long : null,\n                location_url: location ? location.url : null,\n                waitingForAddress: typeof waitingForAddress === 'boolean' ? waitingForAddress : false,\n                status: ORDERSTATUS_PENDING,\n            });\n            const saved = await record.save();\n            orderData.orderId = saved.id;\n            await updateItem(orderData);\n        }\n    } catch (error) {\n        console.error(\"Error while updating order\");\n        console.error(error);\n        throwError(error);\n    }\n}\n\nexport const getOrderPending = async orderData => {\n    const { userId, pageId, isComplete } = orderData;\n\n    const _order = await Order.findOne({ userId: userId, pageId: pageId, status: ORDERSTATUS_PENDING }).exec();\n    if (_order) {\n        if (isComplete && isComplete === true) {\n            const _items = await getItems({ orderId: _order.id, pageId: pageId });\n\n            const completeOrder = {\n                order: _order,\n                items: _items,\n            };\n\n            return completeOrder;\n        } else {\n            const headerOrder = {\n                order: _order,\n            }\n            return headerOrder;\n        }\n    } else return null;\n}\n"],"file":"ordersController.js"}