{"version":3,"sources":["../../../src/api/controllers/pagesController.js"],"names":["page_resources_get_all","req","res","sortObj","query","sort","rangeObj","range","options","offset","limit","lean","leanWithId","currentUser","activePage","Page","find","id","paginate","err","result","status","json","message","errmsg","setHeader","util","format","total","docs","page_resources_get_one","params","findOne","doc","errMsg","page_resources_delete","findOneAndRemove","then","catch","page_update","console","log","body","pageId","isNew","record","greetingText","firstResponseText","access_token","accessToken","userID","name","save","subscribedApps","response","errorMessage","error","data","User","docFind","docSave","setFacebookFields","facebookUrl","axios","post","getOnePage","pageID","Promise","resolve","reject","getOnePageData","exec","getAllPages","pageArray","map","Object","keys","length","_greeting","headers","get_started","payload","greeting","locale","text","persistent_menu","composer_input_disabled","call_to_actions","title","type","JSON","stringify","event"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA;AACA;AACO,IAAMA,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAClC;AACIC,YAAAA,OAF8B,GAEpB,4BAAgBF,GAAG,CAACG,KAAJ,CAAUC,IAA1B,CAFoB,EAGlC;;AACIC,YAAAA,QAJ8B,GAInB,6BAAiBL,GAAG,CAACG,KAAJ,CAAUG,KAA3B,CAJmB;AAM9BC,YAAAA,OAN8B,GAMpB;AACVC,cAAAA,MAAM,EAAEH,QAAQ,CAAC,QAAD,CADN;AAEVI,cAAAA,KAAK,EAAEJ,QAAQ,CAAC,OAAD,CAFL;AAGVD,cAAAA,IAAI,EAAEF,OAHI;AAIVQ,cAAAA,IAAI,EAAE,IAJI;AAKVC,cAAAA,UAAU,EAAE;AALF,aANoB;AAc9BR,YAAAA,KAd8B,GActB,EAdsB;;AAgBlC,gBAAIH,GAAG,CAACY,WAAJ,CAAgBC,UAApB,EAAgC;AAC5BV,cAAAA,KAAK,GAAGW,eAAKC,IAAL,CAAU;AAAEC,gBAAAA,EAAE,EAAEhB,GAAG,CAACY,WAAJ,CAAgBC;AAAtB,eAAV,CAAR;AACH;;AAEDC,2BAAKG,QAAL,CAAcd,KAAd,EAAqBI,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA,sCAA8B,iBAAOW,GAAP,EAAYC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAC1B,4BAAID,GAAJ,EAAS;AACLjB,0BAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,4BAAAA,OAAO,EAAEJ,GAAG,CAACK;AAAf,2BAArB;AACH,yBAFD,MAEO;AACHtB,0BAAAA,GAAG,CAACuB,SAAJ,CAAc,eAAd,EAA+BC,cAAKC,MAAL,CAAY,gBAAZ,EAA8BrB,QAAQ,CAAC,QAAD,CAAtC,EAAkDA,QAAQ,CAAC,OAAD,CAA1D,EAAqEc,MAAM,CAACQ,KAA5E,CAA/B;AACA1B,0BAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,MAAM,CAACS,IAA5B;AACH;;AANyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA9B;;AAAA;AAAA;AAAA;AAAA;;AApBkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAtB7B,sBAAsB;AAAA;AAAA;AAAA,GAA5B,C,CA8BP;;;;;AACO,IAAM8B,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAC7B,GAAD,EAAMC,GAAN,EAAc;AAChD,MAAID,GAAG,CAAC8B,MAAJ,IAAc9B,GAAG,CAAC8B,MAAJ,CAAWd,EAA7B,EAAiC;AAE7BF,mBAAKiB,OAAL,CAAa;AAAEf,MAAAA,EAAE,EAAEhB,GAAG,CAAC8B,MAAJ,CAAWd;AAAjB,KAAb,EAAoC,UAACE,GAAD,EAAMc,GAAN,EAAc;AAC9C,UAAId,GAAJ,EAAS;AACLjB,QAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAEJ,GAAG,CAACe;AAAf,SAArB;AACH,OAFD,MAGK;AACDhC,QAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBW,GAArB;AACH;AACJ,KAPD;AAQH;AACJ,CAZM,C,CAcP;;;;;AACO,IAAME,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAClC,GAAD,EAAMC,GAAN,EAAc;AAC/Ca,iBAAKqB,gBAAL,CAAsB;AAAEnB,IAAAA,EAAE,EAAEhB,GAAG,CAAC8B,MAAJ,CAAWd;AAAjB,GAAtB,EACKoB,IADL,CACU,UAACjB,MAAD,EAAY;AACdlB,IAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,MAArB;AACH,GAHL,EAIKkB,KAJL,CAIW,UAACnB,GAAD,EAAS;AACZjB,IAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAEJ,GAAG,CAACK;AAAf,KAArB;AACH,GANL;AAOH,CARM,C,CAWP;;;;;AACO,IAAMe,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOtC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAEvBsC,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAYxC,GAAG,CAACyC,IAAhB;AAEMC,YAAAA,MALiB,GAKR1C,GAAG,CAACyC,IAAJ,CAASzB,EALD,EAOvB;;AAPuB;AAAA,mBAQjBF,eAAKiB,OAAL,CAAa;AAAEf,cAAAA,EAAE,EAAE0B;AAAN,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA,sCAA6B,kBAAOxB,GAAP,EAAYc,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAC3Bd,GAD2B;AAAA;AAAA;AAAA;;AACpB;AACPjB,wBAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,0BAAAA,OAAO,EAAEJ,GAAG,CAACK;AAAf,yBAArB;AAF2B;;AAAA;AAM3BoB,wBAAAA,KAN2B,GAMnB,KANmB;;AAQ/B,4BAAIX,GAAJ,EAAS;AACLY,0BAAAA,MAAM,GAAGZ,GAAT;AACA,8BAAIhC,GAAG,CAACyC,IAAJ,CAASI,YAAb,EACID,MAAM,CAACC,YAAP,GAAsB7C,GAAG,CAACyC,IAAJ,CAASI,YAA/B;AACJ,8BAAI7C,GAAG,CAACyC,IAAJ,CAASK,iBAAb,EACIF,MAAM,CAACE,iBAAP,GAA2B9C,GAAG,CAACyC,IAAJ,CAASK,iBAApC;AACJ,8BAAI9C,GAAG,CAACyC,IAAJ,CAASM,YAAb,EACIH,MAAM,CAACI,WAAP,GAAqBhD,GAAG,CAACyC,IAAJ,CAASM,YAA9B;AACJH,0BAAAA,MAAM,CAACK,MAAP,GAAgBjD,GAAG,CAACY,WAAJ,CAAgBqC,MAAhC;AACH,yBATD,MASO;AACHL,0BAAAA,MAAM,GAAG,IAAI9B,cAAJ,CAAS;AACdE,4BAAAA,EAAE,EAAE0B,MADU;AAEdQ,4BAAAA,IAAI,EAAElD,GAAG,CAACyC,IAAJ,CAASS,IAFD;AAGdF,4BAAAA,WAAW,EAAEhD,GAAG,CAACyC,IAAJ,CAASM,YAHR;AAIdE,4BAAAA,MAAM,EAAEjD,GAAG,CAACY,WAAJ,CAAgBqC;AAJV,2BAAT,CAAT;AAMAN,0BAAAA,KAAK,GAAG,IAAR;AACH;;AAzB8B;AAAA,+BA0BzBC,MAAM,CAACO,IAAP,CAAY,UAACjC,GAAD,EAAMC,MAAN,EAAiB;AAC/B,8BAAID,GAAJ,EAAS;AACLjB,4BAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,8BAAAA,OAAO,EAAEJ,GAAG,CAACK;AAAf,6BAArB;AACH,2BAFD,MAEO;AACH6B,4BAAAA,cAAc,CAACjC,MAAM,CAACH,EAAR,EAAYG,MAAM,CAAC6B,WAAnB,CAAd,CACKZ,IADL,CACU,UAAAiB,QAAQ,EAAI;AACdpD,8BAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,MAArB;AACH,6BAHL,EAGOkB,KAHP,CAGa,UAACnB,GAAD,EAAS;AACd,kCAAIoC,YAAJ;AACA,kCAAIpC,GAAG,CAACqC,KAAR,EAAeD,YAAY,GAAGpC,GAAG,CAACqC,KAAnB;AACf,kCAAIrC,GAAG,CAACmC,QAAJ,CAAaG,IAAjB,EACI,IAAItC,GAAG,CAACmC,QAAJ,CAAaG,IAAb,CAAkBD,KAAtB,EACID,YAAY,GAAGpC,GAAG,CAACmC,QAAJ,CAAaG,IAAb,CAAkBD,KAAlB,CAAwBjC,OAAvC;AACRiB,8BAAAA,OAAO,CAACC,GAAR,sCAA0Cc,YAA1C;AACArD,8BAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,gCAAAA,OAAO,EAAEgC;AAAX,+BAArB;AACH,6BAXL;AAYH;AACJ,yBAjBK,CA1ByB;;AAAA;AAAA,6BA8C3BtD,GAAG,CAACY,WA9CuB;AAAA;AAAA;AAAA;;AAAA;AAAA,+BA+CrB6C,eAAK1B,OAAL,CAAa;AAAEkB,0BAAAA,MAAM,EAAEjD,GAAG,CAACY,WAAJ,CAAgBqC;AAA1B,yBAAb,EAAiD,UAAC/B,GAAD,EAAMwC,OAAN,EAAkB;AACrE,8BAAIxC,GAAJ,EAAS;AACLjB,4BAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,8BAAAA,OAAO,EAAEJ,GAAG,CAACK;AAAf,6BAArB;AACA;AACH;;AAED,8BAAImC,OAAJ,EAAa;AACTA,4BAAAA,OAAO,CAAC7C,UAAR,GAAqB6B,MAArB;AACAgB,4BAAAA,OAAO,CAACP,IAAR,CAAa,UAACjC,GAAD,EAAMyC,OAAN,EAAkB;AAC3B,kCAAIzC,GAAJ,EAAS;AACLjB,gCAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,kCAAAA,OAAO,EAAEJ,GAAG,CAACK;AAAf,iCAArB;AACH;AACJ,6BAJD;AAKH;AACJ,yBAdK,CA/CqB;;AAAA;AAgE/B,4BAAIvB,GAAG,CAACyC,IAAJ,CAASI,YAAT,IAAyBD,MAAzB,IAAmCA,MAAM,CAACI,WAA9C,EAA2D;AACvDY,0BAAAA,iBAAiB,CAAChB,MAAM,CAAC5B,EAAR,EAAY4B,MAAM,CAACI,WAAnB,EAAgChD,GAAG,CAACyC,IAAJ,CAASI,YAAzC,CAAjB,CAAwET,IAAxE,CAA6E,UAAAiB,QAAQ,EAAI;AACrFd,4BAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0Da,QAAQ,CAAClC,MAAnE;AACH,2BAFD,EAEGkB,KAFH,CAES,UAAAnB,GAAG,EAAI;AACZ,gCAAIA,GAAG,CAACmC,QAAJ,IAAgBnC,GAAG,CAACmC,QAAJ,CAAaG,IAA7B,IAAqCtC,GAAG,CAACmC,QAAJ,CAAaG,IAAb,CAAkBD,KAA3D,EACIhB,OAAO,CAACC,GAAR,mDAAuDtB,GAAG,CAACmC,QAAJ,CAAaG,IAAb,CAAkBD,KAAlB,CAAwBjC,OAA/E,GADJ,KAEK,IAAIJ,GAAG,CAACmC,QAAR,EACDd,OAAO,CAACC,GAAR,CAAYtB,GAAG,CAACmC,QAAhB;AACP,2BAPD;AAQH;;AAzE8B,6BA2E3BV,KA3E2B;AAAA;AAAA;AAAA;;AAAA;AAAA,+BA4ErB,oCAAaD,MAAb,CA5EqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA7B;;AAAA;AAAA;AAAA;AAAA,gBARiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXJ,WAAW;AAAA;AAAA;AAAA,GAAjB;;;;AA0FA,IAAMc,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOV,MAAP,EAAeM,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAE1B;AACMa,YAAAA,WAHoB,6CAG6BnB,MAH7B,2CAGoEM,WAHpE;AAAA;AAAA,mBAKbc,eAAMC,IAAN,CAAWF,WAAX,CALa;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdT,cAAc;AAAA;AAAA;AAAA,GAApB,C,CAQP;;;;;AACO,IAAMY,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBjB,YAAAA,WADkB,GACJ,EADI;AAAA;AAAA,mBAEhBlC,eAAKiB,OAAL,CAAa;AAAEf,cAAAA,EAAE,EAAEiD;AAAN,aAAb,EAA6B,UAAC/C,GAAD,EAAMC,MAAN,EAAiB;AAChD,kBAAID,GAAJ,EAAS,CAER,CAFD,MAGK;AACD8B,gBAAAA,WAAW,GAAG7B,MAAM,CAAC6B,WAArB;AACH;AACJ,aAPK,CAFgB;;AAAA;AAAA,kBAUlBA,WAAW,KAAK,EAVE;AAAA;AAAA;AAAA;;AAAA,8CAWXkB,OAAO,CAACC,OAAR,CAAgBnB,WAAhB,CAXW;;AAAA;AAAA,8CAYVkB,OAAO,CAACE,MAAR,EAZU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVJ,UAAU;AAAA;AAAA;AAAA,GAAhB;AAeP;;;;;;;;;AAKO,IAAMK,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOJ,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACbnD,eAAKiB,OAAL,CAAa;AAAEf,cAAAA,EAAE,EAAEiD;AAAN,aAAb,EAA6BK,IAA7B,EADa;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdD,cAAc;AAAA;AAAA;AAAA,GAApB;;;;AAKA,IAAME,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBC,YAAAA,SADmB,GACP,EADO;AAAA;AAAA,mBAEjB1D,eAAKC,IAAL,CAAU,EAAV,EAAc,UAACG,GAAD,EAAMC,MAAN,EAAiB;AACjCqD,cAAAA,SAAS,GAAGrD,MAAM,CAACsD,GAAP,CAAW,UAAAzC,GAAG,EAAI;AAAE,uBAAO;AAAE,4BAAUA,GAAG,CAAChB,EAAhB;AAAoB,iCAAegB,GAAG,CAACgB,WAAvC;AAAoD,0BAAQhB,GAAG,CAACkB;AAAhE,iBAAP;AAA+E,eAAnG,CAAZ;AACH,aAFK,CAFiB;;AAAA;AAKvBX,YAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCkC,MAAM,CAACC,IAAP,CAAYH,SAAZ,EAAuBI,MAAzD;AALuB,8CAMhBV,OAAO,CAACC,OAAR,CAAgBK,SAAhB,CANgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXD,WAAW;AAAA;AAAA;AAAA,GAAjB;;;;AASP,IAAMX,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOlB,MAAP,EAAeM,WAAf,EAA4B6B,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBhB,YAAAA,WADgB,+EACmEb,WADnE;AAAA;AAAA,mBAETc,eAAMC,IAAN,CAAWF,WAAX,EAAwB;AACjCiB,cAAAA,OAAO,EAAE;AAAE,gCAAgB;AAAlB,eADwB;AAEjCC,cAAAA,WAAW,EAAE;AAAEC,gBAAAA,OAAO,EAAE;AAAX,eAFoB;AAGjCC,cAAAA,QAAQ,EAAE,CACN;AAAEC,gBAAAA,MAAM,EAAE,SAAV;AAAqBC,gBAAAA,IAAI,EAAEN;AAA3B,eADM,EAEN;AAAEK,gBAAAA,MAAM,EAAE,OAAV;AAAmBC,gBAAAA,IAAI,EAAEN;AAAzB,eAFM,EAGN;AAAEK,gBAAAA,MAAM,EAAE,OAAV;AAAmBC,gBAAAA,IAAI,EAAEN;AAAzB,eAHM,CAHuB;AAQjCO,cAAAA,eAAe,EAAE,CACb;AACIF,gBAAAA,MAAM,EAAE,SADZ;AAEIG,gBAAAA,uBAAuB,EAAE,KAF7B;AAGIC,gBAAAA,eAAe,EAAE,CACb;AACIC,kBAAAA,KAAK,EAAE,UADX;AAEIC,kBAAAA,IAAI,EAAE,UAFV;AAGIR,kBAAAA,OAAO,EAAES,IAAI,CAACC,SAAL,CAAe;AAAElC,oBAAAA,IAAI,EAAE,kBAAR;AAA4BmC,oBAAAA,KAAK,EAAE;AAAnC,mBAAf;AAHb,iBADa,EAMb;AACIJ,kBAAAA,KAAK,EAAE,UADX;AAEIC,kBAAAA,IAAI,EAAE,UAFV;AAGIR,kBAAAA,OAAO,EAAES,IAAI,CAACC,SAAL,CAAe;AAAElC,oBAAAA,IAAI,EAAE,iBAAR;AAA2BmC,oBAAAA,KAAK,EAAE;AAAlC,mBAAf;AAHb,iBANa,EAWb;AACIJ,kBAAAA,KAAK,EAAE,cADX;AAEIC,kBAAAA,IAAI,EAAE,UAFV;AAGIR,kBAAAA,OAAO,EAAES,IAAI,CAACC,SAAL,CAAe;AAAElC,oBAAAA,IAAI,EAAE,gBAAR;AAA0BmC,oBAAAA,KAAK,EAAE;AAAjC,mBAAf;AAHb,iBAXa;AAHrB,eADa;AARgB,aAAxB,CAFS;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjB/B,iBAAiB;AAAA;AAAA;AAAA,GAAvB","sourcesContent":["\nimport Page from \"../models/pages\";\nimport User from \"../models/users\";\nimport axios from 'axios';\nimport util from 'util';\nimport { configSortQuery, configRangeQuery } from '../util/util';\nimport { initialSetup } from \"./systemController\";\n\n// List all flavors\n// TODO: use filters in the query req.query\nexport const page_resources_get_all = async (req, res) => {\n    // Getting the sort from the requisition\n    var sortObj = configSortQuery(req.query.sort);\n    // Getting the range from the requisition\n    var rangeObj = configRangeQuery(req.query.range);\n\n    let options = {\n        offset: rangeObj['offset'],\n        limit: rangeObj['limit'],\n        sort: sortObj,\n        lean: true,\n        leanWithId: false,\n    };\n\n    var query = {};\n\n    if (req.currentUser.activePage) {\n        query = Page.find({ id: req.currentUser.activePage });\n    }\n\n    Page.paginate(query, options, async (err, result) => {\n        if (err) {\n            res.status(500).json({ message: err.errmsg });\n        } else {\n            res.setHeader('Content-Range', util.format(\"pages %d-%d/%d\", rangeObj['offset'], rangeObj['limit'], result.total));\n            res.status(200).json(result.docs);\n        }\n    });\n};\n\n// List one record by filtering by ID\nexport const page_resources_get_one = (req, res) => {\n    if (req.params && req.params.id) {\n\n        Page.findOne({ id: req.params.id }, (err, doc) => {\n            if (err) {\n                res.status(500).json({ message: err.errMsg });\n            }\n            else {\n                res.status(200).json(doc);\n            }\n        });\n    }\n}\n\n// DELETE\nexport const page_resources_delete = (req, res) => {\n    Page.findOneAndRemove({ id: req.params.id })\n        .then((result) => {\n            res.status(200).json(result);\n        })\n        .catch((err) => {\n            res.status(500).json({ message: err.errmsg });\n        });\n};\n\n\n// Update or create a new page\nexport const page_update = async (req, res) => {\n\n    console.log(\"page_update\");\n    console.log(req.body);\n\n    const pageId = req.body.id;\n\n    // Find a page by id\n    await Page.findOne({ id: pageId }, async (err, doc) => {\n        if (err) { // err !== null\n            res.status(500).json({ message: err.errmsg });\n            return;\n        }\n        let record;\n        let isNew = false;\n\n        if (doc) {\n            record = doc;\n            if (req.body.greetingText)\n                record.greetingText = req.body.greetingText;\n            if (req.body.firstResponseText)\n                record.firstResponseText = req.body.firstResponseText;\n            if (req.body.access_token)\n                record.accessToken = req.body.access_token;\n            record.userID = req.currentUser.userID;\n        } else {\n            record = new Page({\n                id: pageId,\n                name: req.body.name,\n                accessToken: req.body.access_token,\n                userID: req.currentUser.userID,\n            });\n            isNew = true;\n        }\n        await record.save((err, result) => {\n            if (err) {\n                res.status(500).json({ message: err.errmsg });\n            } else {\n                subscribedApps(result.id, result.accessToken)\n                    .then(response => {\n                        res.status(200).json(result);\n                    }).catch((err) => {\n                        var errorMessage;\n                        if (err.error) errorMessage = err.error;\n                        if (err.response.data)\n                            if (err.response.data.error)\n                                errorMessage = err.response.data.error.message;\n                        console.log(`subscribed_apps catch err: ${errorMessage}`);\n                        res.status(500).json({ message: errorMessage });\n                    });\n            }\n        });\n\n        // update ActivePage for the current user\n        if (req.currentUser) {\n            await User.findOne({ userID: req.currentUser.userID }, (err, docFind) => {\n                if (err) {\n                    res.status(500).json({ message: err.errmsg });\n                    return;\n                }\n\n                if (docFind) {\n                    docFind.activePage = pageId;\n                    docFind.save((err, docSave) => {\n                        if (err) {\n                            res.status(500).json({ message: err.errmsg });\n                        }\n                    })\n                }\n            });\n        }\n\n        if (req.body.greetingText && record && record.accessToken) {\n            setFacebookFields(record.id, record.accessToken, req.body.greetingText).then(response => {\n                console.log('PagesController, response from set fields:', response.result);\n            }).catch(err => {\n                if (err.response && err.response.data && err.response.data.error)\n                    console.log(`PagesController, error from set fields: ${err.response.data.error.message}`);\n                else if (err.response)\n                    console.log(err.response);\n            });\n        }\n\n        if (isNew) {\n            await initialSetup(pageId);\n        }\n\n    });\n}\n\nexport const subscribedApps = async (pageId, accessToken) => {\n\n    // https://graph.facebook.com/v3.1/{page-id}/subscribed_apps?access_token={}\n    const facebookUrl = `https://graph.facebook.com/v3.1/${pageId}/subscribed_apps?access_token=${accessToken}`\n\n    return await axios.post(facebookUrl);\n}\n\n// used in botController.js\nexport const getOnePage = async (pageID) => {\n    let accessToken = '';\n    await Page.findOne({ id: pageID }, (err, result) => {\n        if (err) {\n\n        }\n        else {\n            accessToken = result.accessToken;\n        }\n    });\n    if (accessToken !== '')\n        return Promise.resolve(accessToken);\n    else return Promise.reject();\n}\n\n/**\n * \n * @param {*} pageID \n * @return Page\n */\nexport const getOnePageData = async (pageID) => {\n    return await Page.findOne({ id: pageID }).exec();\n}\n\n\nexport const getAllPages = async () => {\n    let pageArray = [];\n    await Page.find({}, (err, result) => {\n        pageArray = result.map(doc => { return { 'pageID': doc.id, 'accessToken': doc.accessToken, 'name': doc.name } });\n    });\n    console.log(\"into getAllPages: \", Object.keys(pageArray).length);\n    return Promise.resolve(pageArray);\n}\n\nconst setFacebookFields = async (pageId, accessToken, _greeting) => {\n    const facebookUrl = `https://graph.facebook.com/v2.6/me/messenger_profile?access_token=${accessToken}`;\n    return await axios.post(facebookUrl, {\n        headers: { 'Content-Type': 'application/json' },\n        get_started: { payload: 'GET_STARTED' },\n        greeting: [\n            { locale: 'default', text: _greeting },\n            { locale: 'pt_BR', text: _greeting },\n            { locale: 'en_US', text: _greeting },\n        ],\n        persistent_menu: [\n            {\n                locale: 'default',\n                composer_input_disabled: false,\n                call_to_actions: [\n                    {\n                        title: 'Cardápio',\n                        type: 'postback',\n                        payload: JSON.stringify({ data: 'CARDAPIO_PAYLOAD', event: 'MAIN-MENU' })\n                    },\n                    {\n                        title: 'Horários',\n                        type: 'postback',\n                        payload: JSON.stringify({ data: 'HORARIO_PAYLOAD', event: 'MAIN-MENU' })\n                    },\n                    {\n                        title: 'Fazer Pedido',\n                        type: 'postback',\n                        payload: JSON.stringify({ data: 'PEDIDO_PAYLOAD', event: 'MAIN-MENU' })\n                    }\n                ]\n            }\n        ]\n    });\n}\n\n\n"],"file":"pagesController.js"}