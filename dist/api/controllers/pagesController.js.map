{"version":3,"sources":["../../../src/api/controllers/pagesController.js"],"names":["page_resources_get_all","req","res","sortObj","query","sort","rangeObj","range","options","offset","limit","lean","leanWithId","currentUser","activePage","Page","find","id","paginate","err","result","status","json","message","errmsg","setHeader","util","format","total","docs","Array","page_resources_get_one","params","findOne","doc","errMsg","page_resources_delete","console","info","pageID","getOnePageToken","accessToken","deleteFacebookFields","unsubscribedApps","result2","userID","result3","error","findOneAndDelete","exec","page_update","body","operation","page","setFacebookFields","greetingText","subscribedApps","activeBot","save","isNew","name","access_token","firstResponseText","User","user","pageUpdateError","pageId","facebookUrl","axios","post","delete","debugToken","get","Promise","resolve","reject","getOnePageData","getAllPages","pageArray","map","log","Object","keys","length","_greeting","headers","get_started","payload","greeting","locale","text","persistent_menu","composer_input_disabled","call_to_actions","title","type","JSON","stringify","data","event","fields"],"mappings":"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","sourcesContent":["\nimport Page from \"../models/pages\";\nimport User from \"../models/users\";\nimport axios from 'axios';\nimport util from 'util';\nimport { configSortQuery, configRangeQuery } from '../util/util';\nimport { initialSetup } from \"./systemController\";\nimport { deleteManyFlavors } from './flavorsController';\nimport { deleteManyBeverages } from './beveragesController';\nimport { deleteManyCustomers } from './customersController';\nimport { deleteManyExtras } from './extrasController';\nimport { deleteManyItems } from './itemsController';\nimport { deleteManyOrders } from './ordersController';\nimport { deleteManyPricings } from './pricingsController';\nimport { deleteManySizes } from './sizesController';\nimport { deleteManyStores } from './storesController';\nimport { removeUserActivePage } from \"./usersController\";\n\n// List all flavors\n// TODO: use filters in the query req.query\nexport const page_resources_get_all = async (req, res) => {\n    // Getting the sort from the requisition\n    var sortObj = configSortQuery(req.query.sort);\n    // Getting the range from the requisition\n    var rangeObj = configRangeQuery(req.query.range);\n\n    let options = {\n        offset: rangeObj['offset'],\n        limit: rangeObj['limit'],\n        sort: sortObj,\n        lean: true,\n        leanWithId: false,\n    };\n\n    var query = {};\n\n    if (req.currentUser.activePage) {\n        query = Page.find({ id: req.currentUser.activePage });\n        Page.paginate(query, options, async (err, result) => {\n            if (err) {\n                res.status(500).json({ message: err.errmsg });\n            } else {\n                res.setHeader('Content-Range', util.format(\"pages %d-%d/%d\", rangeObj['offset'], rangeObj['limit'], result.total));\n                res.status(200).json(result.docs);\n            }\n        });\n    }\n    else {\n        res.setHeader('Content-Range', util.format(\"pages %d-%d/%d\", 0, 0, 0));\n        res.status(200).json(new Array());\n    }\n};\n\n// List one record by filtering by ID\nexport const page_resources_get_one = (req, res) => {\n    if (req.params && req.params.id) {\n\n        Page.findOne({ id: req.params.id }, (err, doc) => {\n            if (err) {\n                res.status(500).json({ message: err.errMsg });\n            }\n            else {\n                res.status(200).json(doc);\n            }\n        });\n    }\n}\n\n/**\n * Deactivate Bot and delete all related records\n * @param {*} req \n * @param {*} res \n */\nexport const page_resources_delete = async (req, res) => {\n    try {\n        console.info(\"page_resources_delete:\", req.params);\n\n        const pageID = req.params.id;\n        const { accessToken } = await getOnePageToken(pageID);\n\n        await deleteFacebookFields(pageID, accessToken);\n\n        await deleteManyBeverages(pageID);\n        await deleteManyCustomers(pageID);\n        await deleteManyExtras(pageID);\n        await deleteManyFlavors(pageID);\n        await deleteManyItems(pageID);\n        await deleteManyOrders(pageID);\n        await deleteManyPricings(pageID);\n        await deleteManySizes(pageID);\n        await deleteManyStores(pageID);\n\n        const result2 = await unsubscribedApps(pageID, accessToken);\n        console.info('unsubscribedApps', result2);\n        const result3 = await removeUserActivePage(req.currentUser.userID);\n        if (!result3) {\n            console.error(`User ${userID} was not found and removeUserActivePage failed`);\n        }\n        const result = await Page.findOneAndDelete({ id: pageID }).exec();\n        console.info('Page.findOneAndRemove: ', result);\n        res.status(200).json(result);\n    } catch (pageDeleteErr) {\n        console.error(pageDeleteErr);\n        res.status(500).json({ message: pageDeleteErr.message });\n    }\n}\n\n\n// Update or create a new page\nexport const page_update = async (req, res) => {\n    try {\n        console.info(\"page_update: \", req.body.operation, req.body.id);\n        const pageID = req.body.id;\n        const operation = req.body.operation;\n        let page = await Page.findOne({ id: pageID }).exec();\n\n        if (page && operation === 'ACTIVATE') { // only deactivating the bot in the page\n            await setFacebookFields(pageID, page.accessToken, page.greetingText);\n            await subscribedApps(pageID, page.accessToken);\n            page.activeBot = true;\n            await page.save();\n            res.status(200).json(page);\n        }\n        else if (page && operation === 'DEACTIVATE') { // only deactivating the bot in the page\n            await deleteFacebookFields(pageID, page.accessToken);\n            await unsubscribedApps(pageID, page.accessToken);\n            page.activeBot = false;\n            await page.save();\n            res.status(200).json(page);\n        } else {\n            let isNew = false;\n            if (!page) {\n                page = new Page({\n                    id: pageID,\n                    name: req.body.name,\n                    userID: req.currentUser.userID,\n                });\n                isNew = true;\n            }\n            if (req.body.access_token)\n                page.accessToken = req.body.access_token;\n            if (req.body.greetingText)\n                page.greetingText = req.body.greetingText;\n            if (req.body.firstResponseText)\n                page.firstResponseText = req.body.firstResponseText;\n\n            // update ActivePage for the current user\n            if (req.currentUser) {\n                page.userID = req.currentUser.userID;\n                const user = await User.findOne({ userID: req.currentUser.userID }).exec();\n                if (user) {\n                    user.activePage = pageID;\n                    await user.save();\n                }\n            }\n\n            await page.save();\n\n            if (isNew) {\n                page = await initialSetup(pageID);\n            }\n            res.status(200).json(page);\n        }\n    } catch (pageUpdateError) {\n        console.error({ pageUpdateError });\n        res.status(500).json({ message: pageUpdateError.message });\n    }\n}\n\n/**\n * Subscribe the app to the page\n * @param {*} pageId \n * @param {*} accessToken \n */\nexport const subscribedApps = async (pageId, accessToken) => {\n\n    // https://graph.facebook.com/v3.1/{page-id}/subscribed_apps?access_token={}\n    const facebookUrl = `https://graph.facebook.com/v3.1/${pageId}/subscribed_apps?access_token=${accessToken}`\n\n    return await axios.post(facebookUrl);\n}\n\n/**\n * \n * @param {*} pageId \n * @param {*} accessToken \n */\nexport const unsubscribedApps = async (pageId, accessToken) => {\n\n    // https://graph.facebook.com/v3.1/{page-id}/subscribed_apps?access_token={}\n    const facebookUrl = `https://graph.facebook.com/v3.1/${pageId}/subscribed_apps?access_token=${accessToken}`\n\n    return await axios.delete(facebookUrl);\n}\n\n\nexport const debugToken = async accessToken => {\n    const facebookUrl = `https://graph.facebook.com/v3.1/debug_token?input_token=${accessToken}`\n    return await axios.get(facebookUrl);\n}\n\n\n// used in botController.js\nexport const getOnePageToken = async (pageID) => {\n    const page = await Page.findOne({ id: pageID }).exec();\n    if (page && page.accessToken)\n        return Promise.resolve({ accessToken: page.accessToken, name: page.name });\n    else return Promise.reject();\n}\n\n/**\n * \n * @param {*} pageID \n * @return Page\n */\nexport const getOnePageData = async (pageID) => {\n    return await Page.findOne({ id: pageID }).exec();\n}\n\n\nexport const getAllPages = async () => {\n    let pageArray = [];\n    await Page.find({}, (err, result) => {\n        pageArray = result.map(doc => { return { 'pageID': doc.id, 'accessToken': doc.accessToken, 'name': doc.name } });\n    });\n    console.log(\"into getAllPages: \", Object.keys(pageArray).length);\n    return Promise.resolve(pageArray);\n}\n\nconst setFacebookFields = async (pageId, accessToken, _greeting) => {\n    const facebookUrl = `https://graph.facebook.com/v2.6/me/messenger_profile?access_token=${accessToken}`;\n    return await axios.post(facebookUrl, {\n        headers: { 'Content-Type': 'application/json' },\n        get_started: { payload: 'GET_STARTED' },\n        greeting: [\n            { locale: 'default', text: _greeting },\n            { locale: 'pt_BR', text: _greeting },\n            { locale: 'en_US', text: _greeting },\n        ],\n        persistent_menu: [\n            {\n                locale: 'default',\n                composer_input_disabled: false,\n                call_to_actions: [\n                    {\n                        title: 'Cardápio',\n                        type: 'postback',\n                        payload: JSON.stringify({ data: 'CARDAPIO_PAYLOAD', event: 'MAIN-MENU' })\n                    },\n                    {\n                        title: 'Horários',\n                        type: 'postback',\n                        payload: JSON.stringify({ data: 'HORARIO_PAYLOAD', event: 'MAIN-MENU' })\n                    },\n                    {\n                        title: 'Fazer Pedido',\n                        type: 'postback',\n                        payload: JSON.stringify({ data: 'PEDIDO_PAYLOAD', event: 'MAIN-MENU' })\n                    }\n                ]\n            }\n        ]\n    });\n}\n\nconst deleteFacebookFields = async (pageId, accessToken) => {\n    const facebookUrl = `https://graph.facebook.com/v2.6/me/messenger_profile?access_token=${accessToken}`;\n    return await axios.delete(facebookUrl, {\n        headers: { 'Content-Type': 'application/json' },\n        params: {\n            fields: [\"get_started\", \"persistent_menu\", \"greeting\"]\n        }\n    });\n}\n\n// export const page_update = async (req, res) => {\n\n//     console.info(\"page_update\");\n\n//     const pageId = req.body.id;\n\n//     const record = await Page.findOne({ id: pageId }).exec();\n//     if (!record) {\n//         record = new Page({\n//             id: pageId,\n//             name: req.body.name,\n//             accessToken: req.body.access_token,\n//             userID: req.currentUser.userID,\n//         });\n//         isNew = true;\n//     }\n\n//     // Find a page by id\n//     await Page.findOne({ id: pageId }, async (err, doc) => {\n//         if (err) { // err !== null\n//             res.status(500).json({ message: err.errmsg });\n//             return;\n//         }\n//         let record;\n//         let isNew = false;\n\n//         if (doc) {\n//             record = doc;\n//             if (req.body.greetingText)\n//                 record.greetingText = req.body.greetingText;\n//             if (req.body.firstResponseText)\n//                 record.firstResponseText = req.body.firstResponseText;\n//             if (req.body.access_token)\n//                 record.accessToken = req.body.access_token;\n//             record.userID = req.currentUser.userID;\n//         } else {\n//             record = new Page({\n//                 id: pageId,\n//                 name: req.body.name,\n//                 accessToken: req.body.access_token,\n//                 userID: req.currentUser.userID,\n//             });\n//             isNew = true;\n//         }\n\n//         await record.save();\n//         const response = await subscribedApps(record.id, record.accessToken);\n\n//         // await record.save((err, result) => {\n//         //     if (err) {\n//         //         res.status(500).json({ message: err.errmsg });\n//         //     } else {\n//         //         subscribedApps(result.id, result.accessToken)\n//         //             .then(response => {\n//         //                 res.status(200).json(result);\n//         //             }).catch((err) => {\n//         //                 var errorMessage;\n//         //                 if (err.error) errorMessage = err.error;\n//         //                 if (err.response.data)\n//         //                     if (err.response.data.error)\n//         //                         errorMessage = err.response.data.error.message;\n//         //                 console.log(`subscribed_apps catch err: ${errorMessage}`);\n//         //                 res.status(500).json({ message: errorMessage });\n//         //             });\n\n//         //     }\n//     });\n\n//     // update ActivePage for the current user\n//     if (req.currentUser) {\n//         await User.findOne({ userID: req.currentUser.userID }, (err, docFind) => {\n//             if (err) {\n//                 res.status(500).json({ message: err.errmsg });\n//                 return;\n//             }\n\n//             if (docFind) {\n//                 docFind.activePage = pageId;\n//                 docFind.save((err, docSave) => {\n//                     if (err) {\n//                         res.status(500).json({ message: err.errmsg });\n//                     }\n//                 })\n//             }\n//         });\n//     }\n\n//     if (isNew) {\n//         record = await initialSetup(pageId);\n//         req.body.greetingText = record.greetingText\n//     }\n\n//     if (req.body.greetingText && record && record.accessToken) {\n//         setFacebookFields(record.id, record.accessToken, req.body.greetingText).then(response => {\n//             console.log('PagesController, response from set fields:', response.result);\n//         }).catch(err => {\n//             if (err.response && err.response.data && err.response.data.error)\n//                 console.log(`PagesController, error from set fields: ${err.response.data.error.message}`);\n//             else if (err.response)\n//                 console.log(err.response);\n//         });\n//     }\n\n//     const responseDebug = await debugToken(record.accessToken);\n//     console.info('debugToken', responseDebug);\n// });\n// }\n\n\n\n"],"file":"pagesController.js"}