{"version":3,"sources":["../../../src/api/controllers/pagesController.js"],"names":["page_resources_get_all","req","res","sortObj","query","sort","rangeObj","range","options","offset","limit","lean","leanWithId","currentUser","activePage","Page","find","id","paginate","err","result","status","json","message","errmsg","setHeader","util","format","total","docs","page_resources_get_one","params","findOne","doc","errMsg","page_resources_delete","findOneAndRemove","then","catch","page_update","console","info","pageId","body","isNew","exec","page","name","userID","access_token","accessToken","greetingText","firstResponseText","User","user","save","subscribedApps","response","setFacebookFields","response2","error","pageUpdateError","facebookUrl","axios","post","debugToken","get","getOnePageToken","pageID","Promise","resolve","reject","getOnePageData","getAllPages","pageArray","map","log","Object","keys","length","_greeting","headers","get_started","payload","greeting","locale","text","persistent_menu","composer_input_disabled","call_to_actions","title","type","JSON","stringify","data","event"],"mappings":"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AGIR,kBAAAA,OAAO,EAAES,IAAI,CAACC,SAAL,CAAe;AAAEC,oBAAAA,IAAI,EAAE,iBAAR;AAA2BC,oBAAAA,KAAK,EAAE;AAAlC,mBAAf;AAHb,iBANa,EAWb;AACIL,kBAAAA,KAAK,EAAE,cADX;AAEIC,kBAAAA,IAAI,EAAE,UAFV;AAGIR,kBAAAA,OAAO,EAAES,IAAI,CAACC,SAAL,CAAe;AAAEC,oBAAAA,IAAI,EAAE,gBAAR;AAA0BC,oBAAAA,KAAK,EAAE;AAAjC,mBAAf;AAHb,iBAXa;AAHrB,eADa;AARgB,aAAxB,CAFS;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBrC,iBAAiB;AAAA;AAAA;AAAA,GAAvB,C,CAoCA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["\nimport Page from \"../models/pages\";\nimport User from \"../models/users\";\nimport axios from 'axios';\nimport util from 'util';\nimport { configSortQuery, configRangeQuery } from '../util/util';\nimport { initialSetup } from \"./systemController\";\n\n// List all flavors\n// TODO: use filters in the query req.query\nexport const page_resources_get_all = async (req, res) => {\n    // Getting the sort from the requisition\n    var sortObj = configSortQuery(req.query.sort);\n    // Getting the range from the requisition\n    var rangeObj = configRangeQuery(req.query.range);\n\n    let options = {\n        offset: rangeObj['offset'],\n        limit: rangeObj['limit'],\n        sort: sortObj,\n        lean: true,\n        leanWithId: false,\n    };\n\n    var query = {};\n\n    if (req.currentUser.activePage) {\n        query = Page.find({ id: req.currentUser.activePage });\n    }\n\n    Page.paginate(query, options, async (err, result) => {\n        if (err) {\n            res.status(500).json({ message: err.errmsg });\n        } else {\n            res.setHeader('Content-Range', util.format(\"pages %d-%d/%d\", rangeObj['offset'], rangeObj['limit'], result.total));\n            res.status(200).json(result.docs);\n        }\n    });\n};\n\n// List one record by filtering by ID\nexport const page_resources_get_one = (req, res) => {\n    if (req.params && req.params.id) {\n\n        Page.findOne({ id: req.params.id }, (err, doc) => {\n            if (err) {\n                res.status(500).json({ message: err.errMsg });\n            }\n            else {\n                res.status(200).json(doc);\n            }\n        });\n    }\n}\n\n// DELETE\nexport const page_resources_delete = (req, res) => {\n    Page.findOneAndRemove({ id: req.params.id })\n        .then((result) => {\n            res.status(200).json(result);\n        })\n        .catch((err) => {\n            res.status(500).json({ message: err.errmsg });\n        });\n};\n\n\n// Update or create a new page\nexport const page_update = async (req, res) => {\n    try {\n        console.info(\"page_update\");\n        const pageId = req.body.id;\n        let isNew = false;\n        let page = await Page.findOne({ id: pageId }).exec();\n        if (!page) {\n            page = new Page({\n                id: pageId,\n                name: req.body.name,\n                userID: req.currentUser.userID,\n            });\n            isNew = true;\n        }\n        if (req.body.access_token)\n            page.accessToken = req.body.access_token;\n        if (req.body.greetingText)\n            page.greetingText = req.body.greetingText;\n        if (req.body.firstResponseText)\n            page.firstResponseText = req.body.firstResponseText;\n\n        // update ActivePage for the current user\n        if (req.currentUser) {\n            page.userID = req.currentUser.userID;\n            const user = await User.findOne({ userID: req.currentUser.userID }).exec();\n            if (user) {\n                user.activePage = pageId;\n                await user.save();\n            }\n        }\n\n        await page.save();\n\n        const response = await subscribedApps(page.id, page.accessToken);\n\n        if (isNew) {\n            page = await initialSetup(pageId);\n            req.body.greetingText = page.greetingText\n        }\n\n        if (page && page.greetingText && page.accessToken) {\n            const response2 = await setFacebookFields(page.id, page.accessToken, page.greetingText);\n        }\n        res.status(200).json(page);\n    } catch (pageUpdateError) {\n        console.error({ pageUpdateError });\n        res.status(500).json({ message: pageUpdateError.message });\n    }\n}\n\nexport const subscribedApps = async (pageId, accessToken) => {\n\n    // https://graph.facebook.com/v3.1/{page-id}/subscribed_apps?access_token={}\n    const facebookUrl = `https://graph.facebook.com/v3.1/${pageId}/subscribed_apps?access_token=${accessToken}`\n\n    return await axios.post(facebookUrl);\n}\n\nexport const debugToken = async accessToken => {\n    const facebookUrl = `https://graph.facebook.com/v3.1/debug_token?input_token=${accessToken}`\n    return await axios.get(facebookUrl);\n}\n\n\n// used in botController.js\nexport const getOnePageToken = async (pageID) => {\n    const page = await Page.findOne({ id: pageID }).exec();\n    if (page && page.accessToken)\n        return Promise.resolve(page.accessToken);\n    else return Promise.reject();\n}\n\n/**\n * \n * @param {*} pageID \n * @return Page\n */\nexport const getOnePageData = async (pageID) => {\n    return await Page.findOne({ id: pageID }).exec();\n}\n\n\nexport const getAllPages = async () => {\n    let pageArray = [];\n    await Page.find({}, (err, result) => {\n        pageArray = result.map(doc => { return { 'pageID': doc.id, 'accessToken': doc.accessToken, 'name': doc.name } });\n    });\n    console.log(\"into getAllPages: \", Object.keys(pageArray).length);\n    return Promise.resolve(pageArray);\n}\n\nconst setFacebookFields = async (pageId, accessToken, _greeting) => {\n    const facebookUrl = `https://graph.facebook.com/v2.6/me/messenger_profile?access_token=${accessToken}`;\n    return await axios.post(facebookUrl, {\n        headers: { 'Content-Type': 'application/json' },\n        get_started: { payload: 'GET_STARTED' },\n        greeting: [\n            { locale: 'default', text: _greeting },\n            { locale: 'pt_BR', text: _greeting },\n            { locale: 'en_US', text: _greeting },\n        ],\n        persistent_menu: [\n            {\n                locale: 'default',\n                composer_input_disabled: false,\n                call_to_actions: [\n                    {\n                        title: 'Cardápio',\n                        type: 'postback',\n                        payload: JSON.stringify({ data: 'CARDAPIO_PAYLOAD', event: 'MAIN-MENU' })\n                    },\n                    {\n                        title: 'Horários',\n                        type: 'postback',\n                        payload: JSON.stringify({ data: 'HORARIO_PAYLOAD', event: 'MAIN-MENU' })\n                    },\n                    {\n                        title: 'Fazer Pedido',\n                        type: 'postback',\n                        payload: JSON.stringify({ data: 'PEDIDO_PAYLOAD', event: 'MAIN-MENU' })\n                    }\n                ]\n            }\n        ]\n    });\n}\n\n// export const page_update = async (req, res) => {\n\n//     console.info(\"page_update\");\n\n//     const pageId = req.body.id;\n\n//     const record = await Page.findOne({ id: pageId }).exec();\n//     if (!record) {\n//         record = new Page({\n//             id: pageId,\n//             name: req.body.name,\n//             accessToken: req.body.access_token,\n//             userID: req.currentUser.userID,\n//         });\n//         isNew = true;\n//     }\n\n//     // Find a page by id\n//     await Page.findOne({ id: pageId }, async (err, doc) => {\n//         if (err) { // err !== null\n//             res.status(500).json({ message: err.errmsg });\n//             return;\n//         }\n//         let record;\n//         let isNew = false;\n\n//         if (doc) {\n//             record = doc;\n//             if (req.body.greetingText)\n//                 record.greetingText = req.body.greetingText;\n//             if (req.body.firstResponseText)\n//                 record.firstResponseText = req.body.firstResponseText;\n//             if (req.body.access_token)\n//                 record.accessToken = req.body.access_token;\n//             record.userID = req.currentUser.userID;\n//         } else {\n//             record = new Page({\n//                 id: pageId,\n//                 name: req.body.name,\n//                 accessToken: req.body.access_token,\n//                 userID: req.currentUser.userID,\n//             });\n//             isNew = true;\n//         }\n\n//         await record.save();\n//         const response = await subscribedApps(record.id, record.accessToken);\n\n//         // await record.save((err, result) => {\n//         //     if (err) {\n//         //         res.status(500).json({ message: err.errmsg });\n//         //     } else {\n//         //         subscribedApps(result.id, result.accessToken)\n//         //             .then(response => {\n//         //                 res.status(200).json(result);\n//         //             }).catch((err) => {\n//         //                 var errorMessage;\n//         //                 if (err.error) errorMessage = err.error;\n//         //                 if (err.response.data)\n//         //                     if (err.response.data.error)\n//         //                         errorMessage = err.response.data.error.message;\n//         //                 console.log(`subscribed_apps catch err: ${errorMessage}`);\n//         //                 res.status(500).json({ message: errorMessage });\n//         //             });\n\n//         //     }\n//     });\n\n//     // update ActivePage for the current user\n//     if (req.currentUser) {\n//         await User.findOne({ userID: req.currentUser.userID }, (err, docFind) => {\n//             if (err) {\n//                 res.status(500).json({ message: err.errmsg });\n//                 return;\n//             }\n\n//             if (docFind) {\n//                 docFind.activePage = pageId;\n//                 docFind.save((err, docSave) => {\n//                     if (err) {\n//                         res.status(500).json({ message: err.errmsg });\n//                     }\n//                 })\n//             }\n//         });\n//     }\n\n//     if (isNew) {\n//         record = await initialSetup(pageId);\n//         req.body.greetingText = record.greetingText\n//     }\n\n//     if (req.body.greetingText && record && record.accessToken) {\n//         setFacebookFields(record.id, record.accessToken, req.body.greetingText).then(response => {\n//             console.log('PagesController, response from set fields:', response.result);\n//         }).catch(err => {\n//             if (err.response && err.response.data && err.response.data.error)\n//                 console.log(`PagesController, error from set fields: ${err.response.data.error.message}`);\n//             else if (err.response)\n//                 console.log(err.response);\n//         });\n//     }\n\n//     const responseDebug = await debugToken(record.accessToken);\n//     console.info('debugToken', responseDebug);\n// });\n// }\n\n\n\n"],"file":"pagesController.js"}