{"version":3,"sources":["../../../src/api/controllers/plansController.js"],"names":["topping_get_all","req","res","sortObj","query","sort","plan","rangeObj","range","queryObj","filter","filterObj","filterField","length","i","value","filterValues","Array","isArray","$in","Plan","find","exec","err","result","status","json","message","errmsg","_rangeIni","_rangeEnd","offset","limit","_totalCount","plansArray","push","setHeader","util","format","plan_get_one","params","id","findOne","doc","plan_create","body","newRecord","amount","interval","currency","save","then","code","plan_update","ammount","plan_delete","findOneAndRemove"],"mappings":"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","sourcesContent":["import Plan from '../models/plans';\nimport util from 'util';\nimport stringCapitalizeName from 'string-capitalize-name';\nimport { configSortQuery, configRangeQuery, configFilterQueryMultiple } from '../util/util';\n\n\n// List all toppings\nexport const topping_get_all = async (req, res) => {\n    // Getting the sort from the requisition\n    let sortObj = req.query.sort ? configSortQuery(req.query.sort) : { plan: 'ASC' };\n    // Getting the range from the requisition\n    let rangeObj = configRangeQuery(req.query.range);\n\n    let queryObj = {};\n    if (req.query.filter) {\n        const filterObj = configFilterQueryMultiple(req.query.filter);\n\n        if (filterObj && filterObj.filterField && filterObj.filterField.length) {\n            for (let i = 0; i < filterObj.filterField.length; i++) {\n                const filter = filterObj.filterField[i];\n                const value = filterObj.filterValues[i];\n                if (Array.isArray(value)) {\n                    queryObj[filter] = { $in: value };\n                } else\n                    queryObj[filter] = value;\n            }\n        }\n    }\n\n    Plan.find(queryObj).sort(sortObj).exec((err, result) => {\n        if (err) {\n            res.status(500).json({ message: err.errmsg });\n        } else {\n            let _rangeIni = 0;\n            let _rangeEnd = result.length;\n            if (rangeObj) {\n                _rangeIni = rangeObj.offset <= result.length ? rangeObj.offset : result.length;\n                _rangeEnd = (rangeObj.offset + rangeObj.limit) <= result.length ? rangeObj.offset + rangeObj.limit : result.length;\n            }\n            let _totalCount = result.length;\n            let plansArray = [];\n            for (let i = _rangeIni; i < _rangeEnd; i++) {\n                plansArray.push(result[i])\n            }\n            res.setHeader('Content-Range', util.format('plans %d-%d/%d', _rangeIni, _rangeEnd, _totalCount));\n            res.status(200).json(plansArray);\n        }\n    });\n}\n\n// List one record by filtering by ID\nexport const plan_get_one = (req, res) => {\n    if (req.params && req.params.id) {\n        Plan.findOne({ id: req.params.id }, (err, doc) => {\n            if (err) {\n                res.status(500).json({ message: err.errmsg });\n            } else {\n                res.status(200).json(doc);\n            }\n        });\n    }\n}\n\n// CREATE A NEW RECORD\nexport const plan_create = (req, res) => {\n    if (req.body) {\n        const newRecord = new Plan({\n            id: req.body.id,\n            plan: stringCapitalizeName(req.body.plan),\n            amount: req.body.amount,\n            interval: req.body.interval,\n            currency: req.body.currency,\n        });\n\n        newRecord.save()\n            .then((result) => {\n                res.status(200).json(result);\n            })\n            .catch((err) => {\n                if (err.code === 11000) {\n                    res.status(500).json({ message: 'pos.messages.duplicatedKey' });\n                } else {\n                    res.status(500).json({ message: err.errmsg });\n                }\n            });\n    }\n}\n\n// UPDATE\nexport const plan_update = (req, res) => {\n    Plan.findOne({ id: req.body.id }, (err, result) => {\n        if (!err) {\n            result.plan = stringCapitalizeName(req.body.plan);\n            result.ammount = req.body.ammount;\n            result.interval = req.body.interval;\n            result.currency = req.body.currency;\n            result.save((err, doc) => {\n                if (err) {\n                    res.status(500).json({ message: err.errmsg });\n                } else {\n                    res.status(200).json(doc);\n                }\n            });\n        } else {\n            res.status(500).json({ message: err.errmsg });\n        }\n    });\n\n\n}\n\n// DELETE\nexport const plan_delete = (req, res) => {\n    Plan.findOneAndRemove({ id: req.params.id })\n        .then((result) => {\n            res.status(200).json({\n                id: result.id,\n                plan: result.plan,\n            });\n        })\n        .catch((err) => {\n            res.status(500).json({ message: err.errmsg });\n        });\n};\n"],"file":"plansController.js"}