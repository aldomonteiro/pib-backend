{"version":3,"sources":["../../../src/api/controllers/pricingsController.js"],"names":["pricing_get_all","req","res","sortObj","query","sort","rangeObj","range","options","offset","limit","lean","leanWithId","currentUser","activePage","Pricing","find","pageId","paginate","err","result","status","json","message","errmsg","setHeader","util","format","total","docs","pricing_get_one","params","id","findOne","doc","pricing_create","body","select","exec","lastId","length","newRecord","categoryId","sizeId","price","save","then","catch","code","pricing_update","pricing_delete","findOneAndRemove","deleteManyPricings","pageID","deleteMany","getPricingSizing","categoryID","distinct","getPricings","getOnePricing","sizeID","getOnePricingByFlavor","flavorID","flavor","getPricingsWithSize","pricings","sizes","pricing","size"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA;AACA;AACO,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,GAAN,EAAc;AACzC;AACA,MAAIC,OAAO,GAAG,4BAAgBF,GAAG,CAACG,KAAJ,CAAUC,IAA1B,CAAd,CAFyC,CAGzC;;AACA,MAAIC,QAAQ,GAAG,6BAAiBL,GAAG,CAACG,KAAJ,CAAUG,KAA3B,CAAf;AAEA,MAAIC,OAAO,GAAG;AACVC,IAAAA,MAAM,EAAEH,QAAQ,CAAC,QAAD,CADN;AAEVI,IAAAA,KAAK,EAAEJ,QAAQ,CAAC,OAAD,CAFL;AAGVD,IAAAA,IAAI,EAAEF,OAHI;AAIVQ,IAAAA,IAAI,EAAE,IAJI;AAKVC,IAAAA,UAAU,EAAE;AALF,GAAd;AAQA,MAAIR,KAAK,GAAG,EAAZ;;AAEA,MAAIH,GAAG,CAACY,WAAJ,CAAgBC,UAApB,EAAgC;AAC5BV,IAAAA,KAAK,GAAGW,kBAAQC,IAAR,CAAa;AAAEC,MAAAA,MAAM,EAAEhB,GAAG,CAACY,WAAJ,CAAgBC;AAA1B,KAAb,CAAR;AACH;;AAEDC,oBAAQG,QAAR,CAAiBd,KAAjB,EAAwBI,OAAxB,EAAiC,UAACW,GAAD,EAAMC,MAAN,EAAiB;AAC9C,QAAID,GAAJ,EAAS;AACLjB,MAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,QAAAA,OAAO,EAAEJ,GAAG,CAACK;AAAf,OAArB;AACH,KAFD,MAEO;AACHtB,MAAAA,GAAG,CAACuB,SAAJ,CAAc,eAAd,EAA+BC,cAAKC,MAAL,CAAY,mBAAZ,EAAiCrB,QAAQ,CAAC,QAAD,CAAzC,EAAqDA,QAAQ,CAAC,OAAD,CAA7D,EAAwEc,MAAM,CAACQ,KAA/E,CAA/B;AACA1B,MAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,MAAM,CAACS,IAA5B;AACH;AACJ,GAPD;AAQH,CA5BM,C,CA8BP;;;;;AACO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAC7B,GAAD,EAAMC,GAAN,EAAc;AACzC,MAAID,GAAG,CAAC8B,MAAJ,IAAc9B,GAAG,CAAC8B,MAAJ,CAAWC,EAA7B,EAAiC;AAC7B;AACA,QAAMf,MAAM,GAAGhB,GAAG,CAACY,WAAJ,CAAgBC,UAA/B;;AAEAC,sBAAQkB,OAAR,CAAgB;AAAEhB,MAAAA,MAAM,EAAEA,MAAV;AAAkBe,MAAAA,EAAE,EAAE/B,GAAG,CAAC8B,MAAJ,CAAWC;AAAjC,KAAhB,EAAuD,UAACb,GAAD,EAAMe,GAAN,EAAc;AACjE,UAAIf,GAAJ,EAAS;AACLjB,QAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAEJ,GAAG,CAACK;AAAf,SAArB;AACH,OAFD,MAEO;AACHtB,QAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBY,GAArB;AACH;AACJ,KAND;AAOH;AACJ,CAbM,C,CAeP;;;;;AACO,IAAMC,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAOlC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACtBD,GAAG,CAACmC,IADkB;AAAA;AAAA;AAAA;;AAGhBnB,YAAAA,MAHgB,GAGPhB,GAAG,CAACY,WAAJ,CAAgBC,UAAhB,GAA6Bb,GAAG,CAACY,WAAJ,CAAgBC,UAA7C,GAA0D,IAHnD;AAKhBkB,YAAAA,EALgB,GAKT/B,GAAG,CAACmC,IALK,CAKhBJ,EALgB;;AAAA,kBAOlB,CAACA,EAAD,IAAOA,EAAE,KAAK,CAPI;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAQGjB,kBAAQC,IAAR,CAAa;AAAEC,cAAAA,MAAM,EAAEA;AAAV,aAAb,EAAiCoB,MAAjC,CAAwC,IAAxC,EAA8ChC,IAA9C,CAAmD,KAAnD,EAA0DK,KAA1D,CAAgE,CAAhE,EAAmE4B,IAAnE,EARH;;AAAA;AAQZC,YAAAA,MARY;AASlBP,YAAAA,EAAE,GAAG,CAAL;AACA,gBAAIO,MAAM,IAAIA,MAAM,CAACC,MAArB,EACIR,EAAE,GAAGO,MAAM,CAAC,CAAD,CAAN,CAAUP,EAAV,GAAe,CAApB;;AAXc;AAchBS,YAAAA,SAdgB,GAcJ,IAAI1B,iBAAJ,CAAY;AAC1BiB,cAAAA,EAAE,EAAEA,EADsB;AAE1BU,cAAAA,UAAU,EAAEzC,GAAG,CAACmC,IAAJ,CAASM,UAFK;AAG1BC,cAAAA,MAAM,EAAE1C,GAAG,CAACmC,IAAJ,CAASO,MAHS;AAI1BC,cAAAA,KAAK,EAAE3C,GAAG,CAACmC,IAAJ,CAASQ,KAJU;AAK1B3B,cAAAA,MAAM,EAAEA;AALkB,aAAZ,CAdI;AAsBtBwB,YAAAA,SAAS,CAACI,IAAV,GACKC,IADL,CACU,UAAC1B,MAAD,EAAY;AACdlB,cAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,MAArB;AACH,aAHL,EAIK2B,KAJL,CAIW,UAAC5B,GAAD,EAAS;AACZ,kBAAIA,GAAG,CAAC6B,IAAJ,KAAa,KAAjB,EAAwB;AACpB9C,gBAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,kBAAAA,OAAO,EAAE;AAAX,iBAArB;AACH,eAFD,MAEO;AACHrB,gBAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,kBAAAA,OAAO,EAAEJ,GAAG,CAACK;AAAf,iBAArB;AACH;AACJ,aAVL;;AAtBsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdW,cAAc;AAAA;AAAA;AAAA,GAApB,C,CAoCP;;;;;AACO,IAAMc,cAAc,GAAG,SAAjBA,cAAiB,CAAChD,GAAD,EAAMC,GAAN,EAAc;AACxC,MAAID,GAAG,CAACmC,IAAJ,IAAYnC,GAAG,CAACmC,IAAJ,CAASJ,EAAzB,EAA6B;AAEzB,QAAMf,MAAM,GAAGhB,GAAG,CAACY,WAAJ,CAAgBC,UAA/B;;AAEAC,sBAAQkB,OAAR,CAAgB;AAAEhB,MAAAA,MAAM,EAAEA,MAAV;AAAkBe,MAAAA,EAAE,EAAE/B,GAAG,CAACmC,IAAJ,CAASJ;AAA/B,KAAhB,EAAqD,UAACb,GAAD,EAAMe,GAAN,EAAc;AAC/D,UAAI,CAACf,GAAL,EAAU;AACNe,QAAAA,GAAG,CAACQ,UAAJ,GAAiBzC,GAAG,CAACmC,IAAJ,CAASM,UAA1B;AACAR,QAAAA,GAAG,CAACS,MAAJ,GAAa1C,GAAG,CAACmC,IAAJ,CAASO,MAAtB;AACAT,QAAAA,GAAG,CAACU,KAAJ,GAAY3C,GAAG,CAACmC,IAAJ,CAASQ,KAArB;AAEAV,QAAAA,GAAG,CAACW,IAAJ,CAAS,UAAC1B,GAAD,EAAMC,MAAN,EAAiB;AACtB,cAAID,GAAJ,EAAS;AACLjB,YAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAEJ,GAAG,CAACK;AAAf,aAArB;AACH,WAFD,MAEO;AACHtB,YAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,MAArB;AACH;AACJ,SAND;AAOH,OAZD,MAYO;AACHlB,QAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,OAAO,EAAEJ,GAAG,CAACK;AAAf,SAArB;AACH;AACJ,KAhBD;AAiBH;AACJ,CAvBM,C,CAyBP;;;;;AACO,IAAM0B,cAAc,GAAG,SAAjBA,cAAiB,CAACjD,GAAD,EAAMC,GAAN,EAAc;AAExC,MAAMe,MAAM,GAAGhB,GAAG,CAACY,WAAJ,CAAgBC,UAA/B;;AAEAC,oBAAQoC,gBAAR,CAAyB;AAAElC,IAAAA,MAAM,EAAEA,MAAV;AAAkBe,IAAAA,EAAE,EAAE/B,GAAG,CAAC8B,MAAJ,CAAWC;AAAjC,GAAzB,EACKc,IADL,CACU,UAAC1B,MAAD,EAAY;AACdlB,IAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBF,MAArB;AACH,GAHL,EAIK2B,KAJL,CAIW,UAAC5B,GAAD,EAAS;AACZjB,IAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAEJ,GAAG,CAACK;AAAf,KAArB;AACH,GANL;AAOH,CAXM;AAaP;;;;;;;;AAIO,IAAM4B,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACjBtC,kBAAQuC,UAAR,CAAmB;AAAErC,cAAAA,MAAM,EAAEoC;AAAV,aAAnB,EAAuCf,IAAvC,EADiB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBc,kBAAkB;AAAA;AAAA;AAAA,GAAxB;;;;AAIA,IAAMG,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOF,MAAP,EAAeG,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA,iBACxBA,UADwB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAEXzC,kBAAQ0C,QAAR,CAAiB,QAAjB,EAA2B;AAAExC,cAAAA,MAAM,EAAEoC,MAAV;AAAkBX,cAAAA,UAAU,EAAEc;AAA9B,aAA3B,EAAuElB,IAAvE,EAFW;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAIXvB,kBAAQ0C,QAAR,CAAiB,QAAjB,EAA2B;AAAExC,cAAAA,MAAM,EAAEoC;AAAV,aAA3B,EAA+Cf,IAA/C,EAJW;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBiB,gBAAgB;AAAA;AAAA;AAAA,GAAtB;;;;AAOA,IAAMG,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOL,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBjD,YAAAA,KADiB,GACTW,kBAAQC,IAAR,CAAa;AAAEC,cAAAA,MAAM,EAAEoC;AAAV,aAAb,CADS;AAAA;AAAA,mBAEVjD,KAAK,CAACkC,IAAN,EAFU;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXoB,WAAW;AAAA;AAAA;AAAA,GAAjB;;;;AAKA,IAAMC,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAON,MAAP,EAAeX,UAAf,EAA2BkB,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBxD,YAAAA,KADmB,GACXW,kBAAQkB,OAAR,CAAgB;AAAEhB,cAAAA,MAAM,EAAEoC,MAAV;AAAkBX,cAAAA,UAAU,EAAEA,UAA9B;AAA0CC,cAAAA,MAAM,EAAEiB;AAAlD,aAAhB,CADW;AAAA;AAAA,mBAEZxD,KAAK,CAACkC,IAAN,EAFY;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbqB,aAAa;AAAA;AAAA;AAAA,GAAnB;;;;AAKA,IAAME,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOR,MAAP,EAAeO,MAAf,EAAuBE,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACZ,kCAAUT,MAAV,EAAkBS,QAAlB,CADY;;AAAA;AAC3BC,YAAAA,MAD2B;;AAAA,iBAE7BA,MAF6B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGhBJ,aAAa,CAACN,MAAD,EAASU,MAAM,CAACrB,UAAhB,EAA4BkB,MAA5B,CAHG;;AAAA;AAAA;;AAAA;AAAA,8CAInB,IAJmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAArBC,qBAAqB;AAAA;AAAA;AAAA,GAA3B;;;;AAQA,IAAMG,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAMX,MAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACzBjD,YAAAA,KADyB,GACjBW,kBAAQC,IAAR,CAAa;AAAEC,cAAAA,MAAM,EAAEoC;AAAV,aAAb,CADiB;AAE/BjD,YAAAA,KAAK,CAACC,IAAN,CAAW,YAAX;AAF+B;AAAA,mBAGRD,KAAK,CAACkC,IAAN,EAHQ;;AAAA;AAGzB2B,YAAAA,QAHyB;AAAA;AAAA,mBAIX,+BAASZ,MAAT,CAJW;;AAAA;AAIzBa,YAAAA,KAJyB;AAAA;AAAA;AAAA;AAAA;AAAA,wBAKXD,QALW;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKtBE,YAAAA,OALsB;AAAA;AAAA;AAAA;AAAA;;AAM3B,8BAAiBD,KAAjB,2HAAwB;AAAfE,cAAAA,IAAe;;AACpB,kBAAIA,IAAI,CAACpC,EAAL,KAAYmC,OAAO,CAACxB,MAAxB,EAAgC;AAC5BwB,gBAAAA,OAAO,CAACC,IAAR,GAAeA,IAAI,CAACA,IAApB;AACH;AACJ;;AAV0B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,8CAYxBH,QAZwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBD,mBAAmB;AAAA;AAAA;AAAA,GAAzB","sourcesContent":["import Pricing from '../models/pricings';\nimport util from 'util';\nimport { configSortQuery, configRangeQuery } from '../util/util';\nimport { getSizes } from './sizesController';\nimport { getFlavor } from './flavorsController';\n\n// List all records\n// TODO: use filters in the query req.query\nexport const pricing_get_all = (req, res) => {\n    // Getting the sort from the requisition\n    var sortObj = configSortQuery(req.query.sort);\n    // Getting the range from the requisition\n    var rangeObj = configRangeQuery(req.query.range);\n\n    let options = {\n        offset: rangeObj['offset'],\n        limit: rangeObj['limit'],\n        sort: sortObj,\n        lean: true,\n        leanWithId: false,\n    };\n\n    var query = {};\n\n    if (req.currentUser.activePage) {\n        query = Pricing.find({ pageId: req.currentUser.activePage });\n    }\n\n    Pricing.paginate(query, options, (err, result) => {\n        if (err) {\n            res.status(500).json({ message: err.errmsg });\n        } else {\n            res.setHeader('Content-Range', util.format('pricings %d-%d/%d', rangeObj['offset'], rangeObj['limit'], result.total));\n            res.status(200).json(result.docs);\n        }\n    });\n};\n\n// List one record by filtering by ID\nexport const pricing_get_one = (req, res) => {\n    if (req.params && req.params.id) {\n        // Filter based on the currentUser\n        const pageId = req.currentUser.activePage;\n\n        Pricing.findOne({ pageId: pageId, id: req.params.id }, (err, doc) => {\n            if (err) {\n                res.status(500).json({ message: err.errmsg });\n            } else {\n                res.status(200).json(doc);\n            }\n        });\n    }\n}\n\n// CREATE A NEW RECORD\nexport const pricing_create = async (req, res) => {\n    if (req.body) {\n\n        const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n\n        let { id } = req.body;\n\n        if (!id || id === 0) {\n            const lastId = await Pricing.find({ pageId: pageId }).select('id').sort('-id').limit(1).exec();\n            id = 1;\n            if (lastId && lastId.length)\n                id = lastId[0].id + 1;\n        }\n\n        const newRecord = new Pricing({\n            id: id,\n            categoryId: req.body.categoryId,\n            sizeId: req.body.sizeId,\n            price: req.body.price,\n            pageId: pageId,\n        });\n\n        newRecord.save()\n            .then((result) => {\n                res.status(200).json(result);\n            })\n            .catch((err) => {\n                if (err.code === 11000) {\n                    res.status(500).json({ message: 'pos.messages.duplicatedKey' });\n                } else {\n                    res.status(500).json({ message: err.errmsg });\n                }\n            });\n    }\n}\n\n// UPDATE\nexport const pricing_update = (req, res) => {\n    if (req.body && req.body.id) {\n\n        const pageId = req.currentUser.activePage;\n\n        Pricing.findOne({ pageId: pageId, id: req.body.id }, (err, doc) => {\n            if (!err) {\n                doc.categoryId = req.body.categoryId;\n                doc.sizeId = req.body.sizeId;\n                doc.price = req.body.price;\n\n                doc.save((err, result) => {\n                    if (err) {\n                        res.status(500).json({ message: err.errmsg });\n                    } else {\n                        res.status(200).json(result);\n                    }\n                });\n            } else {\n                res.status(500).json({ message: err.errmsg });\n            }\n        });\n    }\n}\n\n// DELETE\nexport const pricing_delete = (req, res) => {\n\n    const pageId = req.currentUser.activePage;\n\n    Pricing.findOneAndRemove({ pageId: pageId, id: req.params.id })\n        .then((result) => {\n            res.status(200).json(result);\n        })\n        .catch((err) => {\n            res.status(500).json({ message: err.errmsg });\n        });\n};\n\n/**\n * Delete all records from a pageID\n * @param {*} pageID\n */\nexport const deleteManyPricings = async (pageID) => {\n    return await Pricing.deleteMany({ pageId: pageID }).exec();\n}\n\nexport const getPricingSizing = async (pageID, categoryID) => {\n    if (categoryID)\n        return await Pricing.distinct('sizeId', { pageId: pageID, categoryId: categoryID }).exec();\n    else\n        return await Pricing.distinct('sizeId', { pageId: pageID }).exec();\n}\n\nexport const getPricings = async (pageID) => {\n    const query = Pricing.find({ pageId: pageID });\n    return await query.exec();\n}\n\nexport const getOnePricing = async (pageID, categoryId, sizeID) => {\n    const query = Pricing.findOne({ pageId: pageID, categoryId: categoryId, sizeId: sizeID });\n    return await query.exec();\n}\n\nexport const getOnePricingByFlavor = async (pageID, sizeID, flavorID) => {\n    const flavor = await getFlavor(pageID, flavorID);\n    if (flavor) {\n        return await getOnePricing(pageID, flavor.categoryId, sizeID);\n    } else return null;\n}\n\n\nexport const getPricingsWithSize = async pageID => {\n    const query = Pricing.find({ pageId: pageID });\n    query.sort('categoryId');\n    const pricings = await query.exec();\n    const sizes = await getSizes(pageID);\n    for (let pricing of pricings) {\n        for (let size of sizes) {\n            if (size.id === pricing.sizeId) {\n                pricing.size = size.size;\n            }\n        }\n    }\n    return pricings;\n}\n\n"],"file":"pricingsController.js"}