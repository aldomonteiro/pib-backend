{"version":3,"sources":["../../../src/api/controllers/simpleOrdersController.js"],"names":["ORDERSTATUS_PENDING","ORDERSTATUS_CONFIRMED","ORDERSTATUS_VIEWED","ORDERSTATUS_ACCEPTED","ORDERSTATUS_PRINTED","ORDERSTATUS_DELIVERED","ORDERSTATUS_FINISHED","ORDERSTATUS_REJECTED","ORDERSTATUS_CANCELLED","order_get_all","req","res","sortObj","query","sort","rangeObj","range","filterObj","filter","queryParam","currentUser","activePage","filterField","length","i","value","filterValues","Array","isArray","dateIni","DateTime","fromISO","set","hour","minute","second","setZone","dateEnd","invalid","$gte","toISO","$lt","$in","date","endsWith","replace","rezonedIni","rezonedEnd","plus","days","Object","values","fullOrderGetAll","ret","setHeader","util","format","rangeIni","rangeEnd","totalCount","status","json","ordersArray","console","error","orderGetAllErr","message","order_get_one","params","id","pageId","getOrderJson","jsonOrder","orderGetOneError","order_update","body","dir","operation","Order","findOne","doc","updateOrder","rejectionExplanation","sent_reject_notification","local","rejection_reason","userId","store","sendNotification","phone","accept_notification","deliver_notification","missing_address_notification","question","newAddress","newDetails","newTotal","updatePostComments","updatedPostComment","closeOrder","address","details","formatted","isNaN","Number","total","index","postComments","indexOf","splice","status2","delivered_at","source","sent_shipping_notification","info","save","deleteManyOrders","pageID","deleteMany","exec","orderId","order","customerId","customer","getOrderData","getOrderJsonErr","Error","cleaned","match","customerName","first_name","last_name","profile_pic","createdAt","updatedAt","confirmed_at","changed_at","comments","orderData","user","addrData","confirmOrder","waitingFor","mergeComments","customerData","getLastUserOrder","formattedAddress","location_lat","location_long","push","orderJson","find","select","limit","resultLastId","_comments","updateOrderError","queryObj","result","offset","savedCustomers","getOrderPending","_order","headerOrder","resultLast","getLastOrder","getLastPendingOrders","orders","getOrdersCustomerStat","total_spent","nb_orders","first_order","Date","now","last_order","whatsAppId"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAIA;;AAGA;;AACA;;AACA;;;;;;;;AACO,IAAMA,mBAAmB,GAAG,CAA5B;;AACA,IAAMC,qBAAqB,GAAG,CAA9B;;AACA,IAAMC,kBAAkB,GAAG,CAA3B;;AACA,IAAMC,oBAAoB,GAAG,CAA7B;;AACA,IAAMC,mBAAmB,GAAG,CAA5B;;AACA,IAAMC,qBAAqB,GAAG,CAA9B;;AACA,IAAMC,oBAAoB,GAAG,CAA7B;;AACA,IAAMC,oBAAoB,GAAG,CAA7B;;AACA,IAAMC,qBAAqB,GAAG,CAA9B,C,CAEP;AACA;;;;AACO,IAAMC,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEfC,YAAAA,OAFe,GAEL,4BAAgBF,GAAG,CAACG,KAAJ,CAAUC,IAA1B,CAFK;AAGfC,YAAAA,QAHe,GAGJ,gCAAoBL,GAAG,CAACG,KAAJ,CAAUG,KAA9B,CAHI;AAIfC,YAAAA,SAJe,GAIH,sCAA0BP,GAAG,CAACG,KAAJ,CAAUK,MAApC,CAJG;AAMjBC,YAAAA,UANiB,GAMJ,EANI;;AAOrB,gBAAIT,GAAG,CAACU,WAAJ,CAAgBC,UAApB,EAAgC;AAC5BF,cAAAA,UAAU,CAAC,QAAD,CAAV,GAAuBT,GAAG,CAACU,WAAJ,CAAgBC,UAAvC;AACH,aAToB,CAWrB;;;AAEA,gBAAI,CAACT,OAAL,EAAc;AACVA,cAAAA,OAAO,CAAC,QAAD,CAAP,GAAoB,KAApB;AACH;;AAED,gBAAIK,SAAS,IAAIA,SAAS,CAACK,WAAvB,IAAsCL,SAAS,CAACK,WAAV,CAAsBC,MAAhE,EAAwE;AACpE,mBAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGP,SAAS,CAACK,WAAV,CAAsBC,MAA1C,EAAkDC,CAAC,EAAnD,EAAuD;AAC/CN,gBAAAA,MAD+C,GACtCD,SAAS,CAACK,WAAV,CAAsBE,CAAtB,CADsC;AAE7CC,gBAAAA,KAF6C,GAErCR,SAAS,CAACS,YAAV,CAAuBF,CAAvB,CAFqC;;AAGnD,oBAAIG,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACtB,sBAAIA,KAAK,CAACF,MAAN,KAAiB,CAArB,EAAwB;AACdM,oBAAAA,OADc,GACJC,gBAASC,OAAT,CAAiBN,KAAK,CAAC,CAAD,CAAtB,EAA2BO,GAA3B,CAA+B;AAAEC,sBAAAA,IAAI,EAAE,CAAR;AAAWC,sBAAAA,MAAM,EAAE,CAAnB;AAAsBC,sBAAAA,MAAM,EAAE;AAA9B,qBAA/B,EAAkEC,OAAlE,CAA0E,KAA1E,CADI;AAEdC,oBAAAA,OAFc,GAEJP,gBAASC,OAAT,CAAiBN,KAAK,CAAC,CAAD,CAAtB,EAA2BO,GAA3B,CAA+B;AAAEC,sBAAAA,IAAI,EAAE,EAAR;AAAYC,sBAAAA,MAAM,EAAE,EAApB;AAAwBC,sBAAAA,MAAM,EAAE;AAAhC,qBAA/B,EAAqEC,OAArE,CAA6E,KAA7E,CAFI;AAIpB,wBAAI,CAACP,OAAO,CAACS,OAAT,IAAoB,CAACD,OAAO,CAACC,OAAjC,EAAyC;AACrCnB,sBAAAA,UAAU,CAACD,MAAD,CAAV,GAAqB;AAAEqB,wBAAAA,IAAI,EAAEV,OAAO,CAACW,KAAR,EAAR;AAAyBC,wBAAAA,GAAG,EAAEJ,OAAO,CAACG,KAAR;AAA9B,uBAArB,CADJ,KAGIrB,UAAU,CAACD,MAAD,CAAV,GAAqB;AAAEwB,sBAAAA,GAAG,EAAEjB;AAAP,qBAArB;AACP,mBARD,MASIN,UAAU,CAACD,MAAD,CAAV,GAAqB;AAAEwB,oBAAAA,GAAG,EAAEjB;AAAP,mBAArB;AACP,iBAXD,MAWO;AACGkB,kBAAAA,IADH,GACUb,gBAASC,OAAT,CAAiBN,KAAjB,CADV;;AAEH,sBAAI,CAACkB,IAAI,CAACL,OAAV,EAAmB;AAAE;AACjB;AACA;AACA,wBAAIpB,MAAM,CAAC0B,QAAP,CAAgB,aAAhB,CAAJ,EAAoC;AAChC1B,sBAAAA,MAAM,GAAGA,MAAM,CAAC2B,OAAP,CAAe,aAAf,EAA8B,EAA9B,CAAT;AACMC,sBAAAA,UAF0B,GAEbH,IAAI,CAACX,GAAL,CAAS;AAAEC,wBAAAA,IAAI,EAAE,CAAR;AAAWC,wBAAAA,MAAM,EAAE,CAAnB;AAAsBC,wBAAAA,MAAM,EAAE;AAA9B,uBAAT,EAA4CC,OAA5C,CAAoD,KAApD,CAFa;AAGhCjB,sBAAAA,UAAU,CAACD,MAAD,CAAV,GAAqB;AAAEqB,wBAAAA,IAAI,EAAEO,UAAU,CAACN,KAAX;AAAR,uBAArB;AACH,qBAJD,MAIO,IAAItB,MAAM,CAAC0B,QAAP,CAAgB,WAAhB,CAAJ,EAAkC;AACrC1B,sBAAAA,MAAM,GAAGA,MAAM,CAAC2B,OAAP,CAAe,WAAf,EAA4B,EAA5B,CAAT;AACMC,sBAAAA,WAF+B,GAElBH,IAAI,CAACX,GAAL,CAAS;AAAEC,wBAAAA,IAAI,EAAE,CAAR;AAAWC,wBAAAA,MAAM,EAAE,CAAnB;AAAsBC,wBAAAA,MAAM,EAAE;AAA9B,uBAAT,EAA4CC,OAA5C,CAAoD,KAApD,CAFkB;AAG/BW,sBAAAA,UAH+B,GAGlBD,WAAU,CAACE,IAAX,CAAgB;AAAEC,wBAAAA,IAAI,EAAE;AAAR,uBAAhB,CAHkB;AAIrC,0BAAI9B,UAAU,CAACD,MAAD,CAAd,EACIC,UAAU,CAACD,MAAD,CAAV,GAAqB;AAAEqB,wBAAAA,IAAI,EAAEW,MAAM,CAACC,MAAP,CAAchC,UAAU,CAACD,MAAD,CAAxB,EAAkC,CAAlC,CAAR;AAA8CuB,wBAAAA,GAAG,EAAEM,UAAU,CAACP,KAAX;AAAnD,uBAArB,CADJ,KAGIrB,UAAU,CAACD,MAAD,CAAV,GAAqB;AAAEuB,wBAAAA,GAAG,EAAEM,UAAU,CAACP,KAAX;AAAP,uBAArB;AACP,qBARM,MAQA;AACGM,sBAAAA,YADH,GACgBH,IAAI,CAACX,GAAL,CAAS;AAAEC,wBAAAA,IAAI,EAAE,CAAR;AAAWC,wBAAAA,MAAM,EAAE,CAAnB;AAAsBC,wBAAAA,MAAM,EAAE;AAA9B,uBAAT,EAA4CC,OAA5C,CAAoD,KAApD,CADhB;AAEGW,sBAAAA,WAFH,GAEgBD,YAAU,CAACE,IAAX,CAAgB;AAAEC,wBAAAA,IAAI,EAAE;AAAR,uBAAhB,CAFhB;AAGH9B,sBAAAA,UAAU,CAACD,MAAD,CAAV,GAAqB;AAAEqB,wBAAAA,IAAI,EAAEO,YAAU,CAACN,KAAX,EAAR;AAA4BC,wBAAAA,GAAG,EAAEM,WAAU,CAACP,KAAX;AAAjC,uBAArB;AACH;AACJ,mBApBD,MAqBIrB,UAAU,CAACD,MAAD,CAAV,GAAqBO,KAArB;AACP;AACJ;AACJ;;AA1DoB;AAAA,mBA4DH2B,eAAe,CAACjC,UAAD,EAAaP,OAAb,EAAsBG,QAAtB,CA5DZ;;AAAA;AA4DfsC,YAAAA,GA5De;AA6DrB1C,YAAAA,GAAG,CAAC2C,SAAJ,CAAc,eAAd,EACIC,iBAAKC,MAAL,CAAY,iBAAZ,EACIH,GAAG,CAACI,QADR,EACkBJ,GAAG,CAACK,QADtB,EACgCL,GAAG,CAACM,UADpC,CADJ;AAGAhD,YAAAA,GAAG,CAACiD,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBR,GAAG,CAACS,WAAzB;AAhEqB;AAAA;;AAAA;AAAA;AAAA;AAmErBC,YAAAA,OAAO,CAACC,KAAR,CAAc;AAAEC,cAAAA,cAAc;AAAhB,aAAd;AACAtD,YAAAA,GAAG,CAACiD,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEK,cAAAA,OAAO,EAAE,YAAeA;AAA1B,aAArB;;AApEqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbzD,aAAa;AAAA;AAAA;AAAA,GAAnB,C,CAwEP;;;;;AACO,IAAM0D,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOzD,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACrBD,GAAG,CAAC0D,MAAJ,IAAc1D,GAAG,CAAC0D,MAAJ,CAAWC,EADJ;AAAA;AAAA;AAAA;;AAAA;AAGXC,YAAAA,MAHW,GAGF5D,GAAG,CAACU,WAAJ,CAAgBC,UAAhB,GAA6BX,GAAG,CAACU,WAAJ,CAAgBC,UAA7C,GAA0D,IAHxD;AAAA;AAAA,mBAIOkD,YAAY,CAACD,MAAD,EAAS5D,GAAG,CAAC0D,MAAJ,CAAWC,EAApB,CAJnB;;AAAA;AAIXG,YAAAA,SAJW;AAKjB7D,YAAAA,GAAG,CAACiD,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBW,SAArB;AALiB;AAAA;;AAAA;AAAA;AAAA;AAOjBT,YAAAA,OAAO,CAACC,KAAR,CAAc;AAAES,cAAAA,gBAAgB;AAAlB,aAAd;AACA9D,YAAAA,GAAG,CAACiD,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEK,cAAAA,OAAO,EAAE,aAAiBA;AAA5B,aAArB;;AARiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbC,aAAa;AAAA;AAAA;AAAA,GAAnB,C,CAaP;;;;;AACO,IAAMO,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOhE,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBACpBD,GAAG,CAACiE,IAAJ,IAAYjE,GAAG,CAACiE,IAAJ,CAASN,EADD;AAAA;AAAA;AAAA;;AAAA;AAGhBN,YAAAA,OAAO,CAACa,GAAR,CAAYlE,GAAG,CAACiE,IAAhB;AAHgB,wBAIUjE,GAAG,CAACiE,IAJd,EAIRN,EAJQ,aAIRA,EAJQ,EAIJQ,SAJI,aAIJA,SAJI;AAKVP,YAAAA,MALU,GAKD5D,GAAG,CAACU,WAAJ,CAAgBC,UALf;AAAA;AAAA,mBAMEyD,mBAAMC,OAAN,CAAc;AAAET,cAAAA,MAAM,EAAEA,MAAV;AAAkBD,cAAAA,EAAE,EAAEA;AAAtB,aAAd,CANF;;AAAA;AAMVW,YAAAA,GANU;AAQZC,YAAAA,YARY,GAQE,IARF;;AAAA,kBAUZJ,SAAS,KAAK,QAVF;AAAA;AAAA;AAAA;;AAWJK,YAAAA,oBAXI,GAWqBxE,GAAG,CAACiE,IAXzB,CAWJO,oBAXI;AAaZF,YAAAA,GAAG,CAACpB,MAAJ,GAAarD,oBAAb;AACAyE,YAAAA,GAAG,CAACG,wBAAJ,GAA+BrD,gBAASsD,KAAT,EAA/B;AACAJ,YAAAA,GAAG,CAACK,gBAAJ,GAAuBH,oBAAvB;AACA,0DAA0BF,GAAG,CAACV,MAA9B,EAAsCU,GAAG,CAACM,MAA1C,EAAkDN,GAAG,CAACX,EAAtD,EAA0Da,oBAA1D;AAhBY;AAAA;;AAAA;AAAA,kBAiBLL,SAAS,KAAK,MAjBT;AAAA;AAAA;AAAA;;AAkBZG,YAAAA,GAAG,CAACpB,MAAJ,GAAa1D,kBAAb,CAlBY,CAmBZ;;AAnBY;AAAA;;AAAA;AAAA,kBAoBL2E,SAAS,KAAK,QApBT;AAAA;AAAA;AAAA;;AAqBZG,YAAAA,GAAG,CAACpB,MAAJ,GAAazD,oBAAb;AArBY;AAAA,mBAsBQ,oCAAa6E,GAAG,CAACV,MAAjB,CAtBR;;AAAA;AAsBNiB,YAAAA,KAtBM;AAuBZC,YAAAA,gBAAgB,CAACD,KAAK,CAACE,KAAP,EAAcT,GAAG,CAACM,MAAlB,EAA0BC,KAAK,CAACG,mBAAhC,CAAhB;AAvBY;AAAA;;AAAA;AAAA,kBAwBLb,SAAS,KAAK,OAxBT;AAAA;AAAA;AAAA;;AAyBZG,YAAAA,GAAG,CAACpB,MAAJ,GAAaxD,mBAAb,CAzBY,CA0BZ;;AA1BY;AAAA;;AAAA;AAAA,kBA2BLyE,SAAS,KAAK,SA3BT;AAAA;AAAA;AAAA;;AA4BZG,YAAAA,GAAG,CAACpB,MAAJ,GAAavD,qBAAb;AA5BY;AAAA,mBA6BQ,oCAAa2E,GAAG,CAACV,MAAjB,CA7BR;;AAAA;AA6BNiB,YAAAA,MA7BM;AA8BZC,YAAAA,gBAAgB,CAACD,MAAK,CAACE,KAAP,EAAcT,GAAG,CAACM,MAAlB,EAA0BC,MAAK,CAACI,oBAAhC,CAAhB;AA9BY;AAAA;;AAAA;AAAA,kBA+BLd,SAAS,KAAK,iBA/BT;AAAA;AAAA;AAAA;;AAgCZI,YAAAA,YAAW,GAAG,KAAd;AAhCY;AAAA,mBAiCQ,oCAAaD,GAAG,CAACV,MAAjB,CAjCR;;AAAA;AAiCNiB,YAAAA,OAjCM;AAkCZC,YAAAA,gBAAgB,CAACD,OAAK,CAACE,KAAP,EAAcT,GAAG,CAACM,MAAlB,EAA0BC,OAAK,CAACK,4BAAhC,CAAhB;AAlCY;AAAA;;AAAA;AAAA,kBAmCLf,SAAS,KAAK,eAnCT;AAAA;AAAA;AAAA;;AAoCJgB,YAAAA,QApCI,GAoCSnF,GAAG,CAACiE,IApCb,CAoCJkB,QApCI,EAqCZ;;AArCY;AAAA,mBAsCQ,oCAAab,GAAG,CAACV,MAAjB,CAtCR;;AAAA;AAsCNiB,YAAAA,OAtCM;AAuCZC,YAAAA,gBAAgB,CAACD,OAAK,CAACE,KAAP,EAAcT,GAAG,CAACM,MAAlB,EAA0BO,QAA1B,CAAhB;AAvCY;AAAA;;AAAA;AAAA,kBAwCLhB,SAAS,KAAK,mBAxCT;AAAA;AAAA;AAAA;;AAAA,yBA8COnE,GAAG,CAACiE,IA9CX,EA0CRmB,UA1CQ,cA0CRA,UA1CQ,EA2CRC,UA3CQ,cA2CRA,UA3CQ,EA4CRC,QA5CQ,cA4CRA,QA5CQ,EA6CRC,kBA7CQ,cA6CRA,kBA7CQ,EA6CYC,kBA7CZ,cA6CYA,kBA7CZ,EA8CRC,UA9CQ,cA8CRA,UA9CQ;;AAAA,iBA+CRL,UA/CQ;AAAA;AAAA;AAAA;;AAgDRd,YAAAA,GAAG,CAACoB,OAAJ,GAAcN,UAAd;AAhDQ;AAAA;;AAAA;AAAA,iBAiDHC,UAjDG;AAAA;AAAA;AAAA;;AAkDRf,YAAAA,GAAG,CAACqB,OAAJ,GAAcN,UAAd;AAlDQ;AAAA;;AAAA;AAAA,iBAmDHC,QAnDG;AAAA;AAAA;AAAA;;AAoDFM,YAAAA,SApDE,GAoDUN,QAAQ,CAACnD,OAAT,CAAiB,GAAjB,EAAsB,GAAtB,CApDV;;AAAA,gBAqDH0D,KAAK,CAACC,MAAM,CAACF,SAAD,CAAP,CArDF;AAAA;AAAA;AAAA;;AAsDJtB,YAAAA,GAAG,CAACyB,KAAJ,GAAYD,MAAM,CAACF,SAAD,CAAlB;AAtDI;AAAA;;AAAA;AAwDJ3F,YAAAA,GAAG,CAACiD,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEK,cAAAA,OAAO,EAAE;AAAX,aAArB;AAxDI;;AAAA;AAAA;AAAA;;AAAA;AA2DL,gBAAI+B,kBAAJ,EAAwB;AAC3B,kBAAIA,kBAAkB,KAAK,OAA3B,EAAoC;AAChCjB,gBAAAA,GAAG,CAACqB,OAAJ,GAAcrB,GAAG,CAACqB,OAAJ,GAAcrB,GAAG,CAACqB,OAAJ,GAAc,IAAd,GAAqBH,kBAAnC,GAAwDA,kBAAtE;AACMQ,gBAAAA,KAF0B,GAElB1B,GAAG,CAAC2B,YAAJ,CAAiBC,OAAjB,CAAyBV,kBAAzB,CAFkB;AAGhClB,gBAAAA,GAAG,CAAC2B,YAAJ,CAAiBE,MAAjB,CAAwBH,KAAxB,EAA+B,CAA/B;AACH,eAJD,MAIO,IAAIT,kBAAkB,KAAK,QAA3B,EAAqC;AAClCS,gBAAAA,MADkC,GAC1B1B,GAAG,CAAC2B,YAAJ,CAAiBC,OAAjB,CAAyBV,kBAAzB,CAD0B;AAExClB,gBAAAA,GAAG,CAAC2B,YAAJ,CAAiBE,MAAjB,CAAwBH,MAAxB,EAA+B,CAA/B;AACH;AACJ,aATM,MASA,IAAIP,UAAJ,EAAgB;AACnBnB,cAAAA,GAAG,CAACpB,MAAJ,GAAatD,oBAAb;AACH;;AAtEW;AAAA;AAAA;;AAAA;AAwEZ,gBAAII,GAAG,CAACiE,IAAJ,CAASmC,OAAT,KAAqB,SAAzB,EAAoC;AAChC9B,cAAAA,GAAG,CAACpB,MAAJ,GAAa3D,qBAAb;AACH,aAFD,MAEO,IAAIS,GAAG,CAACiE,IAAJ,CAASmC,OAAT,KAAqB,WAAzB,EAAsC;AACzC9B,cAAAA,GAAG,CAACpB,MAAJ,GAAavD,qBAAb;AACA2E,cAAAA,GAAG,CAAC+B,YAAJ,GAAmBjF,gBAASsD,KAAT,EAAnB;AACH,aAHM,MAGA,IAAI1E,GAAG,CAACiE,IAAJ,CAASmC,OAAT,KAAqB,WAAzB,EAAsC;AACzC9B,cAAAA,GAAG,CAACpB,MAAJ,GAAavD,qBAAb;AACH;;AA/EW,kBAgFR2E,GAAG,CAACpB,MAAJ,KAAevD,qBAhFP;AAAA;AAAA;AAAA;;AAAA,kBAiFJ2E,GAAG,CAACgC,MAAJ,KAAe,UAjFX;AAAA;AAAA;AAAA;;AAAA,gBAkFChC,GAAG,CAACiC,0BAlFL;AAAA;AAAA;AAAA;;AAmFAlD,YAAAA,OAAO,CAACmD,IAAR,CAAa,2BAA2BlC,GAAG,CAACM,MAA/B,GAAwC,2BAAxC,GAAsEN,GAAG,CAACX,EAA1E,GAA+E,0BAA5F;AAnFA;AAAA,mBAoFM,6CAAyBW,GAAG,CAACV,MAA7B,EAAqCU,GAAG,CAACM,MAAzC,EAAiDN,GAAG,CAACX,EAArD,CApFN;;AAAA;AAqFAW,YAAAA,GAAG,CAACiC,0BAAJ,GAAiCnF,gBAASsD,KAAT,EAAjC;;AArFA;AAAA,iBA0FZH,YA1FY;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA2FND,GAAG,CAACmC,IAAJ,EA3FM;;AAAA;AAAA;AAAA,mBA4FQ5C,YAAY,CAACD,MAAD,EAASU,GAAG,CAACX,EAAb,CA5FpB;;AAAA;AA4FVG,YAAAA,SA5FU;AA6FhB7D,YAAAA,GAAG,CAACiD,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBW,SAArB;AA7FgB;AAAA;;AAAA;AAAA;AAAA;AA+FhBT,YAAAA,OAAO,CAACC,KAAR;AACArD,YAAAA,GAAG,CAACiD,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEK,cAAAA,OAAO,EAAE,aAAeA;AAA1B,aAArB;;AAhGgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZQ,YAAY;AAAA;AAAA;AAAA,GAAlB;AAqGP;;;;;;;;AAIO,IAAM0C,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACfvC,mBAAMwC,UAAN,CAAiB;AAAEhD,cAAAA,MAAM,EAAE+C;AAAV,aAAjB,EAAqCE,IAArC,EADe;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBH,gBAAgB;AAAA;AAAA;AAAA,GAAtB,C,CAIP;;;;;AACO,IAAM7C,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOD,MAAP,EAAekD,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEA1C,mBAAMC,OAAN,CAAc;AAAET,cAAAA,MAAM,EAAEA,MAAV;AAAkBD,cAAAA,EAAE,EAAEmD;AAAtB,aAAd,CAFA;;AAAA;AAEdC,YAAAA,KAFc;AAAA;AAAA,mBAGG,0CAAgBnD,MAAhB,EAAwBmD,KAAK,CAACC,UAA9B,CAHH;;AAAA;AAGdC,YAAAA,QAHc;AAAA,8CAIbC,YAAY,CAACH,KAAD,EAAQE,QAAR,CAJC;;AAAA;AAAA;AAAA;AAMpB5D,YAAAA,OAAO,CAACC,KAAR,CAAc;AAAE6D,cAAAA,eAAe;AAAjB,aAAd;AANoB,kBAOd,IAAIC,KAAJ,CAAU,aAAgB5D,OAA1B,CAPc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZK,YAAY;AAAA;AAAA;AAAA,GAAlB;;;;AAWP,IAAMqD,YAAY,GAAG,SAAfA,YAAe,CAACH,KAAD,EAAQE,QAAR,EAAqB;AACtC,MAAII,OAAO,GAAG,CAAC,KAAKN,KAAK,CAAChC,KAAZ,EAAmB5C,OAAnB,CAA2B,KAA3B,EAAkC,EAAlC,CAAd;AACA,MAAMmF,KAAK,GAAGD,OAAO,CAACC,KAAR,CAAc,gCAAd,CAAd;;AACA,MAAIA,KAAJ,EAAW;AACPD,IAAAA,OAAO,cAAOC,KAAK,CAAC,CAAD,CAAZ,eAAoBA,KAAK,CAAC,CAAD,CAAzB,eAAiCA,KAAK,CAAC,CAAD,CAAtC,cAA6CA,KAAK,CAAC,CAAD,CAAlD,CAAP;AACH;;AACD,MAAMxD,SAAS,GAAG;AACdH,IAAAA,EAAE,EAAEoD,KAAK,CAACpD,EADI;AAEdqD,IAAAA,UAAU,EAAED,KAAK,CAACC,UAFJ;AAGdO,IAAAA,YAAY,EAAEN,QAAQ,GAAGA,QAAQ,CAACO,UAAT,GAAsB,GAAtB,IAA6BP,QAAQ,CAACQ,SAAT,IAAsB,EAAnD,CAAH,GAA4D,IAHpE;AAIdC,IAAAA,WAAW,EAAET,QAAQ,GAAGA,QAAQ,CAACS,WAAZ,GAA0B,IAJjC;AAKdC,IAAAA,SAAS,EAAEZ,KAAK,CAACY,SALH;AAMdC,IAAAA,SAAS,EAAEb,KAAK,CAACa,SANH;AAOdC,IAAAA,YAAY,EAAEd,KAAK,CAACc,YAPN;AAQdC,IAAAA,UAAU,EAAEf,KAAK,CAACe,UARJ;AASd5E,IAAAA,MAAM,EAAE6D,KAAK,CAAC7D,MATA;AAUdkD,IAAAA,OAAO,EAAEW,KAAK,CAACX,OAVD;AAWdrB,IAAAA,KAAK,EAAEsC,OAXO;AAYd3B,IAAAA,OAAO,EAAEqB,KAAK,CAACrB,OAZD;AAadK,IAAAA,KAAK,EAAEgB,KAAK,CAAChB,KAbC;AAcdJ,IAAAA,OAAO,EAAEoB,KAAK,CAACpB,OAdD;AAedoC,IAAAA,QAAQ,EAAEhB,KAAK,CAACgB,QAfF;AAgBd9B,IAAAA,YAAY,EAAEc,KAAK,CAACd;AAhBN,GAAlB;AAkBA,SAAOnC,SAAP;AACH,CAzBD;;AA2BO,IAAMS,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAMyD,SAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEXpE,YAAAA,MAFW,GAMfoE,SANe,CAEXpE,MAFW,EAEHgB,MAFG,GAMfoD,SANe,CAEHpD,MAFG,EAEKqD,IAFL,GAMfD,SANe,CAEKC,IAFL,EAGflD,KAHe,GAMfiD,SANe,CAGfjD,KAHe,EAGRmD,QAHQ,GAMfF,SANe,CAGRE,QAHQ,EAGEC,YAHF,GAMfH,SANe,CAGEG,YAHF,EAIfC,UAJe,GAMfJ,SANe,CAIfI,UAJe,EAKfL,QALe,GAMfC,SANe,CAKfD,QALe,EAKL9B,YALK,GAMf+B,SANe,CAKL/B,YALK,EAKSoC,aALT,GAMfL,SANe,CAKSK,aALT;AAQfC,YAAAA,YARe,GAQA,EARA;AASnBA,YAAAA,YAAY,CAAC1E,MAAb,GAAsBA,MAAtB;AACA0E,YAAAA,YAAY,CAAC1D,MAAb,GAAsBA,MAAtB;;AACA,gBAAIqD,IAAJ,EAAU;AACET,cAAAA,UADF,GACyCS,IADzC,CACET,UADF,EACcC,SADd,GACyCQ,IADzC,CACcR,SADd,EACyBC,WADzB,GACyCO,IADzC,CACyBP,WADzB;AAENY,cAAAA,YAAY,CAACd,UAAb,GAA0BA,UAA1B;AACAc,cAAAA,YAAY,CAACb,SAAb,GAAyBA,SAAzB;AACAa,cAAAA,YAAY,CAACZ,WAAb,GAA2BA,WAA3B;AACH;;AACDY,YAAAA,YAAY,CAACvD,KAAb,GAAqBA,KAArB;AACAuD,YAAAA,YAAY,CAACJ,QAAb,GAAwBA,QAAxB;AAlBmB;AAAA,mBAmBI,yCAAeI,YAAf,CAnBJ;;AAAA;AAmBbrB,YAAAA,QAnBa;AAAA;AAAA,mBAqBCsB,gBAAgB,CAAC;AACjC3E,cAAAA,MAAM,EAAEA,MADyB;AACjBgB,cAAAA,MAAM,EAAEA,MADS;AAEjC1B,cAAAA,MAAM,EAAEtD;AAFyB,aAAD,CArBjB;;AAAA;AAqBbmH,YAAAA,KArBa;;AAAA,iBA0BfA,KA1Be;AAAA;AAAA;AAAA;;AA2BfiB,YAAAA,SAAS,CAAClB,OAAV,GAAoBC,KAAK,CAACpD,EAA1B;AAEIY,YAAAA,aA7BW,GA6BG,KA7BH;;AA+Bf,gBAAI2D,QAAJ,EAAc;AACVnB,cAAAA,KAAK,CAACrB,OAAN,GAAgBwC,QAAQ,CAACM,gBAAzB;;AACA,kBAAIN,QAAQ,CAACO,YAAT,IAAyBP,QAAQ,CAACQ,aAAtC,EAAqD;AACjD3B,gBAAAA,KAAK,CAAC0B,YAAN,GAAqBP,QAAQ,CAACO,YAA9B;AACA1B,gBAAAA,KAAK,CAAC2B,aAAN,GAAsBR,QAAQ,CAACQ,aAA/B;AACH;;AACDnE,cAAAA,aAAW,GAAG,IAAd;AACH;;AAED,gBAAI0C,QAAQ,GAAG,CAAf,EAAkB;AACdF,cAAAA,KAAK,CAACC,UAAN,GAAmBC,QAAQ,CAACtD,EAA5B;AACAY,cAAAA,aAAW,GAAG,IAAd;AACH;;AAED,gBAAIQ,KAAJ,EAAW;AACPgC,cAAAA,KAAK,CAAChC,KAAN,GAAcA,KAAd;AACAR,cAAAA,aAAW,GAAG,IAAd;AACH;;AAED,gBAAI4D,YAAJ,EAAkB;AACd,kBAAIpB,KAAK,CAAC7D,MAAN,GAAe3D,qBAAnB,EAA0C;AACtCwH,gBAAAA,KAAK,CAAC7D,MAAN,GAAe3D,qBAAf;AACAwH,gBAAAA,KAAK,CAACc,YAAN,GAAqBzG,gBAASsD,KAAT,EAArB;AACAH,gBAAAA,aAAW,GAAG,IAAd;AACH;AACJ;;AAED,gBAAI6D,UAAJ,EAAgB;AACZrB,cAAAA,KAAK,CAACqB,UAAN,GAAmBA,UAAnB;AACA7D,cAAAA,aAAW,GAAG,IAAd;AACH;;AAED,gBAAIwD,QAAJ,EAAc;AACVhB,cAAAA,KAAK,CAACgB,QAAN,GAAiBA,QAAjB;AACAxD,cAAAA,aAAW,GAAG,IAAd;AACH;;AAED,gBAAI0B,YAAJ,EAAkB;AACd,kBAAI,CAACc,KAAK,CAACd,YAAX,EACIc,KAAK,CAACd,YAAN,GAAqB,EAArB,CAFU,CAId;AACA;;AAEAc,cAAAA,KAAK,CAACd,YAAN,CAAmB0C,IAAnB,CAAwB1C,YAAxB;AAEA,kBAAIoC,aAAJ,EACItB,KAAK,CAACgB,QAAN,GAAiBhB,KAAK,CAACgB,QAAN,GAAiBhB,KAAK,CAACgB,QAAN,GAAiB,IAAjB,GAAwB9B,YAAzC,GAAwDA,YAAzE;AAEJ1B,cAAAA,aAAW,GAAG,IAAd;AACH;;AAjFc,iBAmFXA,aAnFW;AAAA;AAAA;AAAA;;AAoFX;AACAwC,YAAAA,KAAK,CAACe,UAAN,GAAmB1G,gBAASsD,KAAT,EAAnB;AArFW;AAAA,mBAsFLqC,KAAK,CAACN,IAAN,EAtFK;;AAAA;AAyFf,gBAAI0B,YAAY,IAAIJ,QAAhB,IAA4B9B,YAAhC,EAA8C;AAC1C;AACA;AACA;AACA;AACA;AACA,kBAAI8B,QAAQ,IAAI9B,YAAhB,EAA8B;AACpB2C,gBAAAA,SADoB,GACR1B,YAAY,CAACH,KAAD,EAAQE,QAAR,CADJ;AAE1B,gDAAUrD,MAAV,EAAkB,aAAlB,EAAiCgF,SAAjC;AACH;AACJ;;AAnGc;AAAA;;AAAA;AAAA;AAAA,mBA0GYxE,mBAAMyE,IAAN,CAAW;AAAEjF,cAAAA,MAAM,EAAEA;AAAV,aAAX,EAA+BkF,MAA/B,CAAsC,IAAtC,EAA4C1I,IAA5C,CAAiD,KAAjD,EAAwD2I,KAAxD,CAA8D,CAA9D,EAAiElC,IAAjE,EA1GZ;;AAAA;AA0GTmC,YAAAA,YA1GS;AA2GXlC,YAAAA,OA3GW,GA2GD,CA3GC;AA4Gf,gBAAIkC,YAAY,IAAIA,YAAY,CAACnI,MAAjC,EAAyCiG,OAAO,GAAGkC,YAAY,CAAC,CAAD,CAAZ,CAAgBrF,EAAhB,GAAqB,CAA/B;AAGzC,gBAAI0E,aAAa,IAAIpC,YAArB,EACIgD,SAAS,GAAGlB,QAAQ,GAAGA,QAAQ,GAAG,IAAX,GAAkB9B,YAArB,GAAoCA,YAAxD,CADJ,KAGIgD,SAAS,GAAGlB,QAAZ,CAlHW,CAoHf;;AACMhB,YAAAA,OArHS,GAqHD,IAAI3C,kBAAJ,CAAU;AACpBT,cAAAA,EAAE,EAAEmD,OADgB;AAEpBlD,cAAAA,MAAM,EAAEA,MAFY;AAGpBgB,cAAAA,MAAM,EAAEA,MAHY;AAIpBoC,cAAAA,UAAU,EAAEC,QAAQ,CAACtD,EAJD;AAKpBoB,cAAAA,KAAK,EAAEA,KALa;AAMpBqD,cAAAA,UAAU,EAAEA,UANQ;AAOpBL,cAAAA,QAAQ,EAAEkB,SAPU;AAQpBtD,cAAAA,OAAO,EAAEM,YARW;AASpB/C,cAAAA,MAAM,EAAE5D;AATY,aAAV,CArHC;AAAA;AAAA,mBAgITyH,OAAK,CAACN,IAAN,EAhIS;;AAAA;AAkITmC,YAAAA,UAlIS,GAkIG1B,YAAY,CAACH,OAAD,EAAQE,QAAR,CAlIf;AAoIf,4CAAUrD,MAAV,EAAkB,WAAlB,EAA+BgF,UAA/B;;AApIe;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuInBvF,YAAAA,OAAO,CAACC,KAAR,CAAc;AAAE4F,cAAAA,gBAAgB;AAAlB,aAAd;AAvImB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAX3E,WAAW;AAAA;AAAA;AAAA,GAAjB;;;;AA4IP,IAAM7B,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOyG,QAAP,EAAiBjJ,OAAjB,EAA0BG,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACdsC,YAAAA,GADc,GACR;AACRI,cAAAA,QAAQ,EAAE,CADF;AAERC,cAAAA,QAAQ,EAAE,CAFF;AAGRC,cAAAA,UAAU,EAAE,CAHJ;AAIRG,cAAAA,WAAW,EAAE;AAJL,aADQ;AAAA;AAAA;AAAA,mBASKgB,mBAAMyE,IAAN,CAAWM,QAAX,EAAqB/I,IAArB,CAA0BF,OAA1B,EAAmC2G,IAAnC,EATL;;AAAA;AASVuC,YAAAA,MATU;AAWhBzG,YAAAA,GAAG,CAACI,QAAJ,GAAe,CAAf;AACAJ,YAAAA,GAAG,CAACK,QAAJ,GAAeoG,MAAM,GAAGA,MAAM,CAACvI,MAAV,GAAmB,CAAxC;AACA8B,YAAAA,GAAG,CAACM,UAAJ,GAAiBmG,MAAM,GAAGA,MAAM,CAACvI,MAAV,GAAmB,CAA1C;;AAEA,gBAAIR,QAAJ,EAAc;AACVsC,cAAAA,GAAG,CAACI,QAAJ,GAAe1C,QAAQ,CAACgJ,MAAT,IAAmBD,MAAM,CAACvI,MAA1B,GAAmCR,QAAQ,CAACgJ,MAA5C,GAAqDD,MAAM,CAACvI,MAA3E;AACA8B,cAAAA,GAAG,CAACK,QAAJ,GAAgB3C,QAAQ,CAACgJ,MAAT,GAAkBhJ,QAAQ,CAAC0I,KAA5B,IAAsCK,MAAM,CAACvI,MAA7C,GAAsDR,QAAQ,CAACgJ,MAAT,GAAkBhJ,QAAQ,CAAC0I,KAAjF,GAAyFK,MAAM,CAACvI,MAA/G;AACH;;AAED8B,YAAAA,GAAG,CAACS,WAAJ,GAAkB,EAAlB;;AApBgB,kBAqBZgG,MAAM,IAAIA,MAAM,CAACvI,MAAjB,IAA2BuI,MAAM,CAACvI,MAAP,GAAgB,CArB/B;AAAA;AAAA;AAAA;;AAuBZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACMyI,YAAAA,cAjCM,GAiCW,EAjCX;AAkCHxI,YAAAA,CAlCG,GAkCC6B,GAAG,CAACI,QAlCL;;AAAA;AAAA,kBAkCejC,CAAC,GAAG6B,GAAG,CAACK,QAlCvB;AAAA;AAAA;AAAA;;AAmCF+D,YAAAA,KAnCE,GAmCMqC,MAAM,CAACtI,CAAD,CAnCZ;;AAAA,gBAoCHwI,cAAc,CAACvC,KAAK,CAACC,UAAP,CApCX;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAqCmB,0CAAgBD,KAAK,CAACnD,MAAtB,EAA8BmD,KAAK,CAACC,UAApC,CArCnB;;AAAA;AAqCEC,YAAAA,QArCF;AAsCJqC,YAAAA,cAAc,CAACvC,KAAK,CAACC,UAAP,CAAd,GAAmCC,QAAnC;;AAtCI;AAyCFnD,YAAAA,SAzCE,GAyCUoD,YAAY,CAACH,KAAD,EAAQuC,cAAc,CAACvC,KAAK,CAACC,UAAP,CAAtB,CAzCtB;AA0CRrE,YAAAA,GAAG,CAACS,WAAJ,CAAgBuF,IAAhB,CAAqB7E,SAArB;;AA1CQ;AAkCiChD,YAAAA,CAAC,EAlClC;AAAA;AAAA;;AAAA;AAAA,8CA6CT6B,GA7CS;;AAAA;AAAA;AAAA;AA+ChBU,YAAAA,OAAO,CAACC,KAAR;AA/CgB,8CAgDTX,GAhDS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfD,eAAe;AAAA;AAAA;AAAA,GAArB;;AAqDO,IAAM6G,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAMvB,SAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnBpD,YAAAA,MADmB,GACAoD,SADA,CACnBpD,MADmB,EACXhB,MADW,GACAoE,SADA,CACXpE,MADW;AAAA;AAAA,mBAGNQ,mBAAMC,OAAN,CAAc;AAC/BO,cAAAA,MAAM,EAAEA,MADuB;AACfhB,cAAAA,MAAM,EAAEA,MADO;AAE/BV,cAAAA,MAAM,EAAE;AAAEnB,gBAAAA,GAAG,EAAEnC;AAAP;AAFuB,aAAd,EAGlBiH,IAHkB,EAHM;;AAAA;AAGrB2C,YAAAA,MAHqB;;AAAA,iBAOvBA,MAPuB;AAAA;AAAA;AAAA;;AAQjBC,YAAAA,WARiB,GAQH;AAChB1C,cAAAA,KAAK,EAAEyC;AADS,aARG;AAAA,8CAWhBC,WAXgB;;AAAA;AAAA,8CAaf,IAbe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfF,eAAe;AAAA;AAAA;AAAA,GAArB;;;;AAgBA,IAAMhB,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAMP,SAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBpD,YAAAA,MADoB,GACOoD,SADP,CACpBpD,MADoB,EACZhB,MADY,GACOoE,SADP,CACZpE,MADY,EACJV,MADI,GACO8E,SADP,CACJ9E,MADI;AAAA;AAAA,mBAGHkB,mBAAMyE,IAAN,CAAW;AAChCjF,cAAAA,MAAM,EAAEA,MADwB;AAEhCgB,cAAAA,MAAM,EAAEA,MAFwB;AAGhC1B,cAAAA,MAAM,EAAE;AAAEnB,gBAAAA,GAAG,EAAEmB;AAAP;AAHwB,aAAX,EAItB9C,IAJsB,CAIjB,KAJiB,EAIV2I,KAJU,CAIJ,CAJI,EAIDlC,IAJC,EAHG;;AAAA;AAGtB6C,YAAAA,UAHsB;;AAAA,kBAQxBA,UAAU,IAAIA,UAAU,CAAC7I,MARD;AAAA;AAAA;AAAA;;AAAA,8CASjB6I,UAAU,CAAC,CAAD,CATO;;AAAA;AAAA,8CAUhB,IAVgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBnB,gBAAgB;AAAA;AAAA;AAAA,GAAtB;;;;AAaA,IAAMoB,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,mBAAMhD,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACGvC,mBAAMyE,IAAN,CAAW;AAAEjF,cAAAA,MAAM,EAAE+C,MAAV;AAAkBzD,cAAAA,MAAM,EAAE;AAAErB,gBAAAA,IAAI,EAAEtC;AAAR;AAA1B,aAAX,EAAwEuJ,MAAxE,CAA+E,IAA/E,EAAqF1I,IAArF,CAA0F,eAA1F,EAA2G2I,KAA3G,CAAiH,CAAjH,EAAoHlC,IAApH,EADH;;AAAA;AAClBmC,YAAAA,YADkB;;AAAA,kBAEpBA,YAAY,IAAIA,YAAY,CAACnI,MAFT;AAAA;AAAA;AAAA;;AAAA,+CAGbmI,YAAY,CAAC,CAAD,CAAZ,CAAgBrF,EAHH;;AAAA;AAAA,+CAIZ,CAJY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZgG,YAAY;AAAA;AAAA;AAAA,GAAlB;;;;AAOA,IAAMC,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,mBAAMjD,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACXvC,mBAAMyE,IAAN,CAAW;AAAEjF,cAAAA,MAAM,EAAE+C,MAAV;AAAkBzD,cAAAA,MAAM,EAAE3D;AAA1B,aAAX,EAChBuJ,MADgB,CACT,iBADS,EAEhB1I,IAFgB,CAEX,eAFW,EAGhByG,IAHgB,EADW;;AAAA;AAC1BgD,YAAAA,MAD0B;;AAAA,kBAM5BA,MAAM,IAAIA,MAAM,CAAChJ,MANW;AAAA;AAAA;AAAA;;AAAA,+CAOrBgJ,MAPqB;;AAAA;AAAA,+CAQpB,EARoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBD,oBAAoB;AAAA;AAAA;AAAA,GAA1B;;;;AAYA,IAAME,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,mBAAM9B,SAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACzBpE,YAAAA,MADyB,GACFoE,SADE,CACzBpE,MADyB,EACjBoD,UADiB,GACFgB,SADE,CACjBhB,UADiB;AAAA;AAAA,mBAGZ5C,mBAAMyE,IAAN,CAAW;AAAEjF,cAAAA,MAAM,EAAEA,MAAV;AAAkBoD,cAAAA,UAAU,EAAEA;AAA9B,aAAX,EAAuD8B,MAAvD,CAA8D,iBAA9D,EAAiF1I,IAAjF,CAAsF,WAAtF,EAAmGyG,IAAnG,EAHY;;AAAA;AAG3BgD,YAAAA,MAH2B;AAI7BE,YAAAA,WAJ6B,GAIf,CAJe;AAK7BC,YAAAA,SAL6B,GAKjB,CALiB;AAM7BC,YAAAA,WAN6B,GAMfC,IAAI,CAACC,GAAL,EANe;AAO7BC,YAAAA,UAP6B,GAOhB,IAPgB;AAAA;AAAA;AAAA;AAAA;;AAQjC,6BAAoBP,MAApB,uHAA4B;AAAjB9C,cAAAA,KAAiB;AACxBgD,cAAAA,WAAW,IAAIhD,KAAK,CAAChB,KAArB;AACAiE,cAAAA,SAAS,IAAI,CAAb;;AAEA,kBAAIC,WAAW,IAAIlD,KAAK,CAACY,SAAzB,EAAoC;AAChCsC,gBAAAA,WAAW,GAAGlD,KAAK,CAACY,SAApB;AACH;;AACD,kBAAIyC,UAAU,IAAIrD,KAAK,CAACY,SAAxB,EAAmC;AAC/ByC,gBAAAA,UAAU,GAAGrD,KAAK,CAACY,SAAnB;AACH;AACJ;;AAlBgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,+CAmB1B;AAAEoC,cAAAA,WAAW,EAAXA,WAAF;AAAeC,cAAAA,SAAS,EAATA,SAAf;AAA0BC,cAAAA,WAAW,EAAXA,WAA1B;AAAuCG,cAAAA,UAAU,EAAVA;AAAvC,aAnB0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAArBN,qBAAqB;AAAA;AAAA;AAAA,GAA3B;;;;AAsBP,IAAMhF,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACuF,UAAD,EAAazF,MAAb,EAAqBpB,OAArB,EAAiC;AACtD,wCAAe6G,UAAf,EAA2B,QAA3B,EAAqC;AAAEzF,IAAAA,MAAM,EAAEA,MAAV;AAAkBpB,IAAAA,OAAO,EAAEA;AAA3B,GAArC;AACH,CAFD","sourcesContent":["import Order from '../models/orders';\nimport util from 'util';\nimport { updateCustomer, getCustomerById } from './customersController';\nimport { getStoreData } from './storesController';\nimport {\n    configSortQuery, configRangeQueryNew,\n    configFilterQueryMultiple,\n} from '../util/util';\nimport { DateTime } from 'luxon';\n// import { Bot, Elements } from 'facebook-messenger-bot';\n// import { getOnePageToken } from './pagesController';\nimport { sendShippingNotification, sendRejectionNotification } from '../bot/botController';\nimport { emitEvent } from './redisController';\nimport { emitEventWhats } from './socketController';\nexport const ORDERSTATUS_PENDING = 0;\nexport const ORDERSTATUS_CONFIRMED = 1;\nexport const ORDERSTATUS_VIEWED = 2;\nexport const ORDERSTATUS_ACCEPTED = 3;\nexport const ORDERSTATUS_PRINTED = 4;\nexport const ORDERSTATUS_DELIVERED = 5;\nexport const ORDERSTATUS_FINISHED = 7;\nexport const ORDERSTATUS_REJECTED = 8;\nexport const ORDERSTATUS_CANCELLED = 9;\n\n// List all orders\n// TODO: use filters in the query req.query\nexport const order_get_all = async (req, res) => {\n    try {\n        const sortObj = configSortQuery(req.query.sort);\n        const rangeObj = configRangeQueryNew(req.query.range);\n        const filterObj = configFilterQueryMultiple(req.query.filter);\n\n        let queryParam = {};\n        if (req.currentUser.activePage) {\n            queryParam['pageId'] = req.currentUser.activePage;\n        }\n\n        // queryParam['status'] = { $gte: ORDERSTATUS_CONFIRMED };\n\n        if (!sortObj) {\n            sortObj['status'] = 'ASC';\n        }\n\n        if (filterObj && filterObj.filterField && filterObj.filterField.length) {\n            for (let i = 0; i < filterObj.filterField.length; i++) {\n                let filter = filterObj.filterField[i];\n                const value = filterObj.filterValues[i];\n                if (Array.isArray(value)) {\n                    if (value.length === 2) {\n                        const dateIni = DateTime.fromISO(value[0]).set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                        const dateEnd = DateTime.fromISO(value[1]).set({ hour: 23, minute: 59, second: 59 }).setZone('UTC');\n\n                        if (!dateIni.invalid && !dateEnd.invalid)// is date\n                            queryParam[filter] = { $gte: dateIni.toISO(), $lt: dateEnd.toISO() };\n                        else\n                            queryParam[filter] = { $in: value };\n                    } else\n                        queryParam[filter] = { $in: value };\n                } else {\n                    const date = DateTime.fromISO(value);\n                    if (!date.invalid) { // is a date\n                        // date comes with the current time, so, I am setting it to midnight.\n                        // Mongoose stores data on GMT timezone\n                        if (filter.endsWith('_rangestart')) {\n                            filter = filter.replace('_rangestart', '');\n                            const rezonedIni = date.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                            queryParam[filter] = { $gte: rezonedIni.toISO() };\n                        } else if (filter.endsWith('_rangeend')) {\n                            filter = filter.replace('_rangeend', '');\n                            const rezonedIni = date.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                            const rezonedEnd = rezonedIni.plus({ days: 1 });\n                            if (queryParam[filter])\n                                queryParam[filter] = { $gte: Object.values(queryParam[filter])[0], $lt: rezonedEnd.toISO() };\n                            else\n                                queryParam[filter] = { $lt: rezonedEnd.toISO() };\n                        } else {\n                            const rezonedIni = date.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                            const rezonedEnd = rezonedIni.plus({ days: 1 });\n                            queryParam[filter] = { $gte: rezonedIni.toISO(), $lt: rezonedEnd.toISO() };\n                        }\n                    } else\n                        queryParam[filter] = value;\n                }\n            }\n        }\n\n        const ret = await fullOrderGetAll(queryParam, sortObj, rangeObj);\n        res.setHeader('Content-Range',\n            util.format('orders %d-%d/%d',\n                ret.rangeIni, ret.rangeEnd, ret.totalCount));\n        res.status(200).json(ret.ordersArray);\n\n    } catch (orderGetAllErr) {\n        console.error({ orderGetAllErr })\n        res.status(500).json({ message: orderGetAllErr.message });\n    }\n};\n\n// List one record by filtering by ID\nexport const order_get_one = async (req, res) => {\n    if (req.params && req.params.id) {\n        try {\n            const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n            const jsonOrder = await getOrderJson(pageId, req.params.id);\n            res.status(200).json(jsonOrder);\n        } catch (orderGetOneError) {\n            console.error({ orderGetOneError });\n            res.status(500).json({ message: orderGetOneError.message });\n        }\n    }\n}\n\n// UPDATE\nexport const order_update = async (req, res) => {\n    if (req.body && req.body.id) {\n        try {\n            console.dir(req.body);\n            const { id, operation } = req.body;\n            const pageId = req.currentUser.activePage;\n            const doc = await Order.findOne({ pageId: pageId, id: id });\n\n            let updateOrder = true;\n\n            if (operation === 'REJECT') {\n                const { rejectionExplanation } = req.body;\n\n                doc.status = ORDERSTATUS_REJECTED;\n                doc.sent_reject_notification = DateTime.local();\n                doc.rejection_reason = rejectionExplanation;\n                sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            } else if (operation === 'VIEW') {\n                doc.status = ORDERSTATUS_VIEWED;\n                // sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            } else if (operation === 'ACCEPT') {\n                doc.status = ORDERSTATUS_ACCEPTED;\n                const store = await getStoreData(doc.pageId);\n                sendNotification(store.phone, doc.userId, store.accept_notification);\n            } else if (operation === 'PRINT') {\n                doc.status = ORDERSTATUS_PRINTED;\n                // sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            } else if (operation === 'DELIVER') {\n                doc.status = ORDERSTATUS_DELIVERED;\n                const store = await getStoreData(doc.pageId);\n                sendNotification(store.phone, doc.userId, store.deliver_notification);\n            } else if (operation === 'MISSING_ADDRESS') {\n                updateOrder = false;\n                const store = await getStoreData(doc.pageId);\n                sendNotification(store.phone, doc.userId, store.missing_address_notification);\n            } else if (operation === 'OPEN_QUESTION') {\n                const { question } = req.body;\n                // doc.comments = doc.comments + '\\n' + question;\n                const store = await getStoreData(doc.pageId);\n                sendNotification(store.phone, doc.userId, question);\n            } else if (operation === 'UPDATE_ORDER_DATA') {\n                const {\n                    newAddress,\n                    newDetails,\n                    newTotal,\n                    updatePostComments, updatedPostComment,\n                    closeOrder } = req.body;\n                if (newAddress)\n                    doc.address = newAddress;\n                else if (newDetails)\n                    doc.details = newDetails;\n                else if (newTotal) {\n                    const formatted = newTotal.replace(',', '.')\n                    if (!isNaN(Number(formatted)))\n                        doc.total = Number(formatted);\n                    else {\n                        res.status(500).json({ message: 'pos.orders.messages.invalidTotal' });\n                        return\n                    }\n                } else if (updatePostComments) {\n                    if (updatePostComments === 'MERGE') {\n                        doc.details = doc.details ? doc.details + '\\n' + updatedPostComment : updatedPostComment;\n                        const index = doc.postComments.indexOf(updatedPostComment);\n                        doc.postComments.splice(index, 1);\n                    } else if (updatePostComments === 'DELETE') {\n                        const index = doc.postComments.indexOf(updatedPostComment);\n                        doc.postComments.splice(index, 1);\n                    }\n                } else if (closeOrder) {\n                    doc.status = ORDERSTATUS_FINISHED;\n                }\n            } else {\n                if (req.body.status2 === 'ordered') {\n                    doc.status = ORDERSTATUS_CONFIRMED;\n                } else if (req.body.status2 === 'delivered') {\n                    doc.status = ORDERSTATUS_DELIVERED;\n                    doc.delivered_at = DateTime.local();\n                } else if (req.body.status2 === 'cancelled') {\n                    doc.status = ORDERSTATUS_DELIVERED;\n                }\n                if (doc.status === ORDERSTATUS_DELIVERED) {\n                    if (doc.source !== 'whatsapp') {\n                        if (!doc.sent_shipping_notification) {\n                            console.info('I am going to send to ' + doc.userId + ', about the order number:' + doc.id + ' a shipping notification');\n                            await sendShippingNotification(doc.pageId, doc.userId, doc.id);\n                            doc.sent_shipping_notification = DateTime.local();\n                        }\n                    }\n                }\n            }\n            if (updateOrder)\n                await doc.save();\n            const jsonOrder = await getOrderJson(pageId, doc.id);\n            res.status(200).json(jsonOrder);\n        } catch (orderUpdateErr) {\n            console.error(orderUpdateErr);\n            res.status(500).json({ message: orderUpdateErr.message });\n        }\n    }\n}\n\n/**\n * Delete all records from a pageID\n * @param {*} pageID\n */\nexport const deleteManyOrders = async (pageID) => {\n    return await Order.deleteMany({ pageId: pageID }).exec();\n}\n\n// List one record by filtering by ID\nexport const getOrderJson = async (pageId, orderId) => {\n    try {\n        const order = await Order.findOne({ pageId: pageId, id: orderId });\n        const customer = await getCustomerById(pageId, order.customerId);\n        return getOrderData(order, customer);\n    } catch (getOrderJsonErr) {\n        console.error({ getOrderJsonErr });\n        throw new Error(getOrderJsonErr.message);\n    }\n}\n\nconst getOrderData = (order, customer) => {\n    let cleaned = ('' + order.phone).replace(/\\D/g, '')\n    const match = cleaned.match(/^(\\d{2})(\\d{2})(\\d{4})(\\d{4})$/)\n    if (match) {\n        cleaned = `+${match[1]} (${match[2]}) ${match[3]}-${match[4]}`\n    }\n    const jsonOrder = {\n        id: order.id,\n        customerId: order.customerId,\n        customerName: customer ? customer.first_name + ' ' + (customer.last_name || '') : null,\n        profile_pic: customer ? customer.profile_pic : null,\n        createdAt: order.createdAt,\n        updatedAt: order.updatedAt,\n        confirmed_at: order.confirmed_at,\n        changed_at: order.changed_at,\n        status: order.status,\n        status2: order.status2,\n        phone: cleaned,\n        address: order.address,\n        total: order.total,\n        details: order.details,\n        comments: order.comments,\n        postComments: order.postComments,\n    }\n    return jsonOrder;\n}\n\nexport const updateOrder = async orderData => {\n    try {\n        const { pageId, userId, user,\n            phone, addrData, confirmOrder,\n            waitingFor,\n            comments, postComments, mergeComments,\n        } = orderData;\n\n        let customerData = {}\n        customerData.pageId = pageId;\n        customerData.userId = userId;\n        if (user) {\n            const { first_name, last_name, profile_pic } = user;\n            customerData.first_name = first_name;\n            customerData.last_name = last_name;\n            customerData.profile_pic = profile_pic;\n        }\n        customerData.phone = phone;\n        customerData.addrData = addrData;\n        const customer = await updateCustomer(customerData);\n        // const order = await Order.findOne({ pageId: pageId, userId: userId, status: { $lt: ORDERSTATUS_FINISHED } }).exec();\n        const order = await getLastUserOrder({\n            pageId: pageId, userId: userId,\n            status: ORDERSTATUS_FINISHED,\n        });\n\n        if (order) {\n            orderData.orderId = order.id;\n\n            let updateOrder = false;\n\n            if (addrData) {\n                order.address = addrData.formattedAddress;\n                if (addrData.location_lat && addrData.location_long) {\n                    order.location_lat = addrData.location_lat;\n                    order.location_long = addrData.location_long;\n                }\n                updateOrder = true;\n            }\n\n            if (customer > 0) {\n                order.customerId = customer.id;\n                updateOrder = true;\n            }\n\n            if (phone) {\n                order.phone = phone;\n                updateOrder = true;\n            }\n\n            if (confirmOrder) {\n                if (order.status < ORDERSTATUS_CONFIRMED) {\n                    order.status = ORDERSTATUS_CONFIRMED;\n                    order.confirmed_at = DateTime.local();\n                    updateOrder = true;\n                }\n            }\n\n            if (waitingFor) {\n                order.waitingFor = waitingFor;\n                updateOrder = true;\n            }\n\n            if (comments) {\n                order.comments = comments;\n                updateOrder = true;\n            }\n\n            if (postComments) {\n                if (!order.postComments)\n                    order.postComments = [];\n\n                // let arrPostComments = postComments.split('\\n');\n                // order.postComments = order.postComments.concat(arrPostComments);\n\n                order.postComments.push(postComments);\n\n                if (mergeComments)\n                    order.comments = order.comments ? order.comments + '\\n' + postComments : postComments;\n\n                updateOrder = true;\n            }\n\n            if (updateOrder) {\n                // changed_at keeps the last time the user sent a message.\n                order.changed_at = DateTime.local();\n                await order.save();\n            }\n\n            if (confirmOrder || comments || postComments) {\n                // every time new comments are stored I am passing the confirmOrder parameter. So,\n                // here I check if this order was not already confirmed.\n                // if (confirmOrder && currentStatus < ORDERSTATUS_CONFIRMED) {\n                //     // emitEvent(pageId, 'new-order', order);\n                // } else \n                if (comments || postComments) {\n                    const orderJson = getOrderData(order, customer);\n                    emitEvent(pageId, 'new-comment', orderJson);\n                }\n            }\n\n        } else {\n            // const count = await Order.find({ pageId: pageId }).count().exec();\n            // let orderId = 1;\n            // if (count) orderId = count + 1;\n\n            const resultLastId = await Order.find({ pageId: pageId }).select('id').sort('-id').limit(1).exec();\n            let orderId = 1;\n            if (resultLastId && resultLastId.length) orderId = resultLastId[0].id + 1;\n\n            let _comments;\n            if (mergeComments && postComments)\n                _comments = comments ? comments + '\\n' + postComments : postComments;\n            else\n                _comments = comments;\n\n            // First message goes to details, not to postComments\n            const order = new Order({\n                id: orderId,\n                pageId: pageId,\n                userId: userId,\n                customerId: customer.id,\n                phone: phone,\n                waitingFor: waitingFor,\n                comments: _comments,\n                details: postComments,\n                status: ORDERSTATUS_PENDING,\n            });\n            await order.save();\n\n            const orderJson = getOrderData(order, customer)\n\n            emitEvent(pageId, 'new-order', orderJson);\n        }\n    } catch (updateOrderError) {\n        console.error({ updateOrderError });\n        throw updateOrderError;\n    }\n}\n\nconst fullOrderGetAll = async (queryObj, sortObj, rangeObj) => {\n    const ret = {\n        rangeIni: 0,\n        rangeEnd: 0,\n        totalCount: 0,\n        ordersArray: [],\n    }\n\n    try {\n        const result = await Order.find(queryObj).sort(sortObj).exec();\n\n        ret.rangeIni = 0;\n        ret.rangeEnd = result ? result.length : 0;\n        ret.totalCount = result ? result.length : 0;\n\n        if (rangeObj) {\n            ret.rangeIni = rangeObj.offset <= result.length ? rangeObj.offset : result.length;\n            ret.rangeEnd = (rangeObj.offset + rangeObj.limit) <= result.length ? rangeObj.offset + rangeObj.limit : result.length;\n        }\n\n        ret.ordersArray = [];\n        if (result && result.length && result.length > 0) {\n\n            // workaround to show totalamount and totalitems in the frontend, because\n            // I am only sending part of the list (pagination)\n            // let asideTotalAmount = 0;\n            // let asideTotalItems = result.length;\n            // for (const order of result) {\n            //     asideTotalAmount = asideTotalAmount + order.total;\n            // }\n            // workaround end: all orders will receive these values.\n\n            // instant cache to not query the database anytime.\n            const savedCustomers = {};\n            for (let i = ret.rangeIni; i < ret.rangeEnd; i++) {\n                const order = result[i];\n                if (!savedCustomers[order.customerId]) {\n                    const customer = await getCustomerById(order.pageId, order.customerId);\n                    savedCustomers[order.customerId] = customer;\n                }\n\n                const jsonOrder = getOrderData(order, savedCustomers[order.customerId]);\n                ret.ordersArray.push(jsonOrder);\n            }\n        }\n        return ret;\n    } catch (error) {\n        console.error(error);\n        return ret;\n    }\n}\n\n\nexport const getOrderPending = async orderData => {\n    const { userId, pageId } = orderData;\n\n    const _order = await Order.findOne({\n        userId: userId, pageId: pageId,\n        status: { $lt: ORDERSTATUS_FINISHED },\n    }).exec();\n    if (_order) {\n        const headerOrder = {\n            order: _order,\n        }\n        return headerOrder;\n    }\n    else return null;\n}\n\nexport const getLastUserOrder = async orderData => {\n    const { userId, pageId, status } = orderData;\n\n    const resultLast = await Order.find({\n        pageId: pageId,\n        userId: userId,\n        status: { $lt: status },\n    }).sort('-id').limit(1).exec();\n    if (resultLast && resultLast.length)\n        return resultLast[0];\n    else return null;\n}\n\nexport const getLastOrder = async pageID => {\n    const resultLastId = await Order.find({ pageId: pageID, status: { $gte: ORDERSTATUS_CONFIRMED } }).select('id').sort('-confirmed_at').limit(1).exec();\n    if (resultLastId && resultLastId.length)\n        return resultLastId[0].id;\n    else return 0;\n}\n\nexport const getLastPendingOrders = async pageID => {\n    const orders = await Order.find({ pageId: pageID, status: ORDERSTATUS_CONFIRMED })\n        .select('id confirmed_at')\n        .sort('-confirmed_at')\n        .exec();\n\n    if (orders && orders.length)\n        return orders;\n    else return [];\n}\n\n\nexport const getOrdersCustomerStat = async orderData => {\n    const { pageId, customerId } = orderData;\n\n    const orders = await Order.find({ pageId: pageId, customerId: customerId }).select('createdAt total').sort('createdAt').exec();\n    let total_spent = 0;\n    let nb_orders = 0;\n    let first_order = Date.now();\n    let last_order = null;\n    for (const order of orders) {\n        total_spent += order.total;\n        nb_orders += 1;\n\n        if (first_order >= order.createdAt) {\n            first_order = order.createdAt;\n        }\n        if (last_order <= order.createdAt) {\n            last_order = order.createdAt;\n        }\n    }\n    return { total_spent, nb_orders, first_order, last_order };\n}\n\nconst sendNotification = (whatsAppId, userId, message) => {\n    emitEventWhats(whatsAppId, 'notify', { userId: userId, message: message })\n}"],"file":"simpleOrdersController.js"}