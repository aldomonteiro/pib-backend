{"version":3,"sources":["../../../src/api/controllers/simpleOrdersController.js"],"names":["ORDERSTATUS_PENDING","ORDERSTATUS_CONFIRMED","ORDERSTATUS_VIEWED","ORDERSTATUS_ACCEPTED","ORDERSTATUS_PRINTED","ORDERSTATUS_DELIVERED","ORDERSTATUS_FINISHED","ORDERSTATUS_REJECTED","ORDERSTATUS_CANCELLED","order_get_all","req","res","sortObj","query","sort","rangeObj","range","filterObj","filter","queryParam","currentUser","activePage","filterField","length","i","value","filterValues","Array","isArray","dateIni","DateTime","fromISO","set","hour","minute","second","setZone","dateEnd","invalid","$gte","toISO","$lt","$in","date","endsWith","replace","rezonedIni","rezonedEnd","plus","days","Object","values","fullOrderGetAll","ret","setHeader","util","format","rangeIni","rangeEnd","totalCount","status","json","ordersArray","console","error","orderGetAllErr","message","order_get_one","params","id","pageId","getOrderJson","jsonOrder","orderGetOneError","order_update","body","dir","operation","Order","findOne","doc","updateOrder","rejectionExplanation","sent_reject_notification","local","rejection_reason","userId","store","notif","accept_notification","comments","sendNotification","phone","deliver_notification","missing_address_notification","question","newAddress","newDetails","newTotal","totalNotification","updatePostComments","updatedPostComment","closeOrder","address","details","formatted","toString","isNaN","Number","total","total_notification","index","postComments","indexOf","splice","status2","delivered_at","source","sent_shipping_notification","info","save","deleteManyOrders","pageID","deleteMany","exec","orderId","order","customerId","customer","getOrderData","getOrderJsonErr","Error","totalAmount","totalItems","cleaned","match","customerName","first_name","last_name","profile_pic","createdAt","updatedAt","changed_at","asideTotalAmount","asideTotalItems","orderData","user","addrData","confirmOrder","waitingFor","mergeComments","sentAutoReply","autoReplyMsg","customerData","getLastUserOrder","formattedAddress","location_lat","location_long","confirmed_at","sent_autoreply","push","orderJson","find","select","limit","resultLastId","_comments","updateOrderError","queryObj","result","offset","savedCustomers","getOrderPending","_order","headerOrder","resultLast","getLastOrder","getLastPendingOrders","orders","getOrdersCustomerStat","total_spent","nb_orders","first_order","Date","now","last_order","whatsAppId","sendDelayedMsg","userID"],"mappings":"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","sourcesContent":["import Order from '../models/orders';\nimport util from 'util';\nimport { updateCustomer, getCustomerById } from './customersController';\nimport { getStoreData } from './storesController';\nimport {\n    configSortQuery, configRangeQueryNew,\n    configFilterQueryMultiple,\n    formatAsCurrency,\n    addTimedMessage,\n} from '../util/util';\nimport { DateTime } from 'luxon';\n// import { Bot, Elements } from 'facebook-messenger-bot';\n// import { getOnePageToken } from './pagesController';\nimport { sendShippingNotification, sendRejectionNotification } from '../bot/botController';\nimport { emitEventBotWebapp } from './redisController';\nimport { emitEventWhats } from './socketController';\nexport const ORDERSTATUS_PENDING = 0;\nexport const ORDERSTATUS_CONFIRMED = 1;\nexport const ORDERSTATUS_VIEWED = 2;\nexport const ORDERSTATUS_ACCEPTED = 3;\nexport const ORDERSTATUS_PRINTED = 4;\nexport const ORDERSTATUS_DELIVERED = 5;\nexport const ORDERSTATUS_FINISHED = 7;\nexport const ORDERSTATUS_REJECTED = 8;\nexport const ORDERSTATUS_CANCELLED = 9;\n\n// List all orders\n// TODO: use filters in the query req.query\nexport const order_get_all = async (req, res) => {\n    try {\n        const sortObj = configSortQuery(req.query.sort);\n        const rangeObj = configRangeQueryNew(req.query.range);\n        const filterObj = configFilterQueryMultiple(req.query.filter);\n\n        let queryParam = {};\n        if (req.currentUser.activePage) {\n            queryParam['pageId'] = req.currentUser.activePage;\n        }\n\n        // queryParam['status'] = { $gte: ORDERSTATUS_CONFIRMED };\n\n        if (!sortObj) {\n            sortObj['status'] = 'ASC';\n        }\n\n        if (filterObj && filterObj.filterField && filterObj.filterField.length) {\n            for (let i = 0; i < filterObj.filterField.length; i++) {\n                let filter = filterObj.filterField[i];\n                const value = filterObj.filterValues[i];\n                if (Array.isArray(value)) {\n                    if (value.length === 2) {\n                        const dateIni = DateTime.fromISO(value[0]).set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                        const dateEnd = DateTime.fromISO(value[1]).set({ hour: 23, minute: 59, second: 59 }).setZone('UTC');\n\n                        if (!dateIni.invalid && !dateEnd.invalid)// is date\n                            queryParam[filter] = { $gte: dateIni.toISO(), $lt: dateEnd.toISO() };\n                        else\n                            queryParam[filter] = { $in: value };\n                    } else\n                        queryParam[filter] = { $in: value };\n                } else {\n                    const date = DateTime.fromISO(value);\n                    if (!date.invalid) { // is a date\n                        // date comes with the current time, so, I am setting it to midnight.\n                        // Mongoose stores data on GMT timezone\n                        if (filter.endsWith('_rangestart')) {\n                            filter = filter.replace('_rangestart', '');\n                            const rezonedIni = date.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                            queryParam[filter] = { $gte: rezonedIni.toISO() };\n                        } else if (filter.endsWith('_rangeend')) {\n                            filter = filter.replace('_rangeend', '');\n                            const rezonedIni = date.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                            const rezonedEnd = rezonedIni.plus({ days: 1 });\n                            if (queryParam[filter])\n                                queryParam[filter] = { $gte: Object.values(queryParam[filter])[0], $lt: rezonedEnd.toISO() };\n                            else\n                                queryParam[filter] = { $lt: rezonedEnd.toISO() };\n                        } else {\n                            const rezonedIni = date.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                            const rezonedEnd = rezonedIni.plus({ days: 1 });\n                            queryParam[filter] = { $gte: rezonedIni.toISO(), $lt: rezonedEnd.toISO() };\n                        }\n                    } else\n                        queryParam[filter] = value;\n                }\n            }\n        }\n\n        const ret = await fullOrderGetAll(queryParam, sortObj, rangeObj);\n        res.setHeader('Content-Range',\n            util.format('orders %d-%d/%d',\n                ret.rangeIni, ret.rangeEnd, ret.totalCount));\n        res.status(200).json(ret.ordersArray);\n\n    } catch (orderGetAllErr) {\n        console.error({ orderGetAllErr })\n        res.status(500).json({ message: orderGetAllErr.message });\n    }\n};\n\n// List one record by filtering by ID\nexport const order_get_one = async (req, res) => {\n    if (req.params && req.params.id) {\n        try {\n            const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n            const jsonOrder = await getOrderJson(pageId, req.params.id);\n            res.status(200).json(jsonOrder);\n        } catch (orderGetOneError) {\n            console.error({ orderGetOneError });\n            res.status(500).json({ message: orderGetOneError.message });\n        }\n    }\n}\n\n// UPDATE\nexport const order_update = async (req, res) => {\n    if (req.body && req.body.id) {\n        try {\n            console.dir(req.body);\n            const { id, operation } = req.body;\n            const pageId = req.currentUser.activePage;\n            const doc = await Order.findOne({ pageId: pageId, id: id });\n\n            let updateOrder = true;\n\n            if (operation === 'REJECT') {\n                const { rejectionExplanation } = req.body;\n\n                doc.status = ORDERSTATUS_REJECTED;\n                doc.sent_reject_notification = DateTime.local();\n                doc.rejection_reason = rejectionExplanation;\n                sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            } else if (operation === 'VIEW') {\n                doc.status = ORDERSTATUS_VIEWED;\n                // sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            } else if (operation === 'ACCEPT') {\n                doc.status = ORDERSTATUS_ACCEPTED;\n                const store = await getStoreData(doc.pageId);\n                const notif = store.accept_notification;\n                if (notif) {\n                    doc.comments = addTimedMessage(doc.comments, notif)\n                    sendNotification(store.phone, doc.userId, notif);\n                }\n            } else if (operation === 'PRINT') {\n                doc.status = ORDERSTATUS_PRINTED;\n                // sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            } else if (operation === 'DELIVER') {\n                doc.status = ORDERSTATUS_DELIVERED;\n                const store = await getStoreData(doc.pageId);\n\n                const notif = store.deliver_notification;\n                if (notif) {\n                    doc.comments = addTimedMessage(doc.comments, notif)\n                    sendNotification(store.phone, doc.userId, notif);\n                }\n            } else if (operation === 'MISSING_ADDRESS') {\n                updateOrder = false;\n                const store = await getStoreData(doc.pageId);\n\n                const notif = store.missing_address_notification;\n                if (notif) {\n                    updateOrder = true;\n                    doc.comments = addTimedMessage(doc.comments, notif)\n                    sendNotification(store.phone, doc.userId, notif);\n                }\n            } else if (operation === 'OPEN_QUESTION') {\n                const { question } = req.body;\n                // doc.comments = doc.comments + '\\n' + question;\n                const store = await getStoreData(doc.pageId);\n\n                const notif = question;\n                if (notif) {\n                    updateOrder = true;\n                    doc.comments = addTimedMessage(doc.comments, notif)\n                    sendNotification(store.phone, doc.userId, notif);\n                }\n            } else if (operation === 'UPDATE_ORDER_DATA') {\n                const {\n                    newAddress,\n                    newDetails,\n                    newTotal, totalNotification,\n                    updatePostComments, updatedPostComment,\n                    closeOrder } = req.body;\n                if (newAddress)\n                    doc.address = newAddress;\n                else if (newDetails)\n                    doc.details = newDetails;\n                else if (newTotal) {\n                    const formatted = newTotal.toString().replace(',', '.')\n                    if (!isNaN(Number(formatted))) {\n                        doc.total = Number(formatted);\n\n                        if (totalNotification) {\n                            const store = await getStoreData(doc.pageId);\n\n                            const notif = store.total_notification;\n                            if (notif) {\n                                const message = notif.toString().replace('$TOTAL', formatAsCurrency(doc.total))\n                                updateOrder = true;\n                                doc.comments = addTimedMessage(doc.comments, message)\n                                sendNotification(store.phone, doc.userId, message);\n                            }\n                        }\n                    } else {\n                        res.status(500).json({ message: 'pos.orders.messages.invalidTotal' });\n                        return\n                    }\n                } else if (updatePostComments) {\n                    if (updatePostComments === 'MERGE') {\n                        doc.details = doc.details ? doc.details + '\\n' + updatedPostComment : updatedPostComment;\n                        const index = doc.postComments.indexOf(updatedPostComment);\n                        doc.postComments.splice(index, 1);\n                    } else if (updatePostComments === 'DELETE') {\n                        const index = doc.postComments.indexOf(updatedPostComment);\n                        doc.postComments.splice(index, 1);\n                    }\n                } else if (closeOrder) {\n                    doc.status = ORDERSTATUS_FINISHED;\n                }\n            } else {\n                if (req.body.status2 === 'ordered') {\n                    doc.status = ORDERSTATUS_CONFIRMED;\n                } else if (req.body.status2 === 'delivered') {\n                    doc.status = ORDERSTATUS_DELIVERED;\n                    doc.delivered_at = DateTime.local();\n                } else if (req.body.status2 === 'cancelled') {\n                    doc.status = ORDERSTATUS_DELIVERED;\n                }\n                if (doc.status === ORDERSTATUS_DELIVERED) {\n                    if (doc.source !== 'whatsapp') {\n                        if (!doc.sent_shipping_notification) {\n                            console.info('I am going to send to ' + doc.userId + ', about the order number:' + doc.id + ' a shipping notification');\n                            await sendShippingNotification(doc.pageId, doc.userId, doc.id);\n                            doc.sent_shipping_notification = DateTime.local();\n                        }\n                    }\n                }\n            }\n            if (updateOrder)\n                await doc.save();\n            const jsonOrder = await getOrderJson(pageId, doc.id);\n            res.status(200).json(jsonOrder);\n        } catch (orderUpdateErr) {\n            console.error(orderUpdateErr);\n            res.status(500).json({ message: orderUpdateErr.message });\n        }\n    }\n}\n\n/**\n * Delete all records from a pageID\n * @param {*} pageID\n */\nexport const deleteManyOrders = async (pageID) => {\n    return await Order.deleteMany({ pageId: pageID }).exec();\n}\n\n// List one record by filtering by ID\nexport const getOrderJson = async (pageId, orderId) => {\n    try {\n        const order = await Order.findOne({ pageId: pageId, id: orderId });\n        if (order) {\n            const customer = await getCustomerById(pageId, order.customerId);\n            return getOrderData(order, customer);\n        } else return null;\n    } catch (getOrderJsonErr) {\n        console.error({ getOrderJsonErr });\n        throw new Error(getOrderJsonErr.message);\n    }\n}\n\nconst getOrderData = (order, customer, totalAmount, totalItems) => {\n    let cleaned = ('' + order.phone).replace(/\\D/g, '')\n    const match = cleaned.match(/^(\\d{2})(\\d{2})(\\d{4})(\\d{4})$/)\n    if (match) {\n        cleaned = `+${match[1]} (${match[2]}) ${match[3]}-${match[4]}`\n    }\n    const jsonOrder = {\n        id: order.id,\n        customerId: order.customerId,\n        customerName: customer ? customer.first_name + ' ' + (customer.last_name || '') : null,\n        profile_pic: customer ? customer.profile_pic : null,\n        createdAt: order.createdAt,\n        updatedAt: order.updatedAt,\n        changed_at: order.changed_at,\n        status: order.status,\n        status2: order.status2,\n        phone: cleaned,\n        address: order.address,\n        total: order.total,\n        details: order.details,\n        comments: order.comments,\n        postComments: order.postComments,\n        asideTotalAmount: totalAmount,\n        asideTotalItems: totalItems,\n    }\n    return jsonOrder;\n}\n\nexport const updateOrder = async orderData => {\n    try {\n        const { pageId, userId, user,\n            phone, addrData, confirmOrder,\n            waitingFor,\n            comments, postComments, mergeComments,\n            sentAutoReply, autoReplyMsg,\n        } = orderData;\n\n        let customerData = {}\n        customerData.pageId = pageId;\n        customerData.userId = userId;\n        if (user) {\n            const { first_name, last_name, profile_pic } = user;\n            customerData.first_name = first_name;\n            customerData.last_name = last_name;\n            customerData.profile_pic = profile_pic;\n        }\n        customerData.phone = phone;\n        customerData.addrData = addrData;\n        const customer = await updateCustomer(customerData);\n        // const order = await Order.findOne({ pageId: pageId, userId: userId, status: { $lt: ORDERSTATUS_FINISHED } }).exec();\n        const order = await getLastUserOrder({\n            pageId: pageId, userId: userId,\n            status: ORDERSTATUS_FINISHED,\n        });\n\n        if (order) {\n            orderData.orderId = order.id;\n\n            let updateOrder = false;\n\n            if (addrData) {\n                order.address = addrData.formattedAddress;\n                if (addrData.location_lat && addrData.location_long) {\n                    order.location_lat = addrData.location_lat;\n                    order.location_long = addrData.location_long;\n                }\n                updateOrder = true;\n            }\n\n            if (customer > 0) {\n                order.customerId = customer.id;\n                updateOrder = true;\n            }\n\n            if (phone) {\n                order.phone = phone;\n                updateOrder = true;\n            }\n\n            if (confirmOrder) {\n                if (order.status < ORDERSTATUS_CONFIRMED) {\n                    order.status = ORDERSTATUS_CONFIRMED;\n                    order.confirmed_at = DateTime.local();\n                    updateOrder = true;\n                }\n            }\n\n            if (waitingFor) {\n                order.waitingFor = waitingFor;\n                updateOrder = true;\n            }\n\n            if (comments) {\n                if (mergeComments)\n                    // order.comments = order.comments ? order.comments + '\\n' + hours + comments : hours + comments;\n                    order.comments = addTimedMessage(order.comments, comments);\n                else\n                    order.comments = comments;\n                updateOrder = true;\n            }\n\n            if (postComments) {\n\n                // This store is setup to send auto reply, but it wasn't send yet.\n                // So, I am gonna put all comments into comments, not postComments.\n                if (autoReplyMsg && !order.sent_autoreply) {\n                    order.details = order.details ? order.details + '\\n' + postComments : postComments;\n                } else {\n\n                    if (!order.postComments)\n                        order.postComments = [];\n\n                    // let arrPostComments = postComments.split('\\n');\n                    // order.postComments = order.postComments.concat(arrPostComments);\n\n                    order.postComments.push(postComments);\n                }\n\n                if (mergeComments)\n                    // order.comments =  order.comments ? order.comments + '\\n' + hours + postComments : hours + postComments;\n                    order.comments = addTimedMessage(order.comments, postComments);\n\n                updateOrder = true;\n            }\n\n            if (sentAutoReply) {\n                order.sent_autoreply = sentAutoReply;\n                updateOrder = true;\n            }\n\n            if (updateOrder) {\n                // changed_at keeps the last time the user sent a message.\n                order.changed_at = DateTime.local();\n                await order.save();\n            }\n\n            if (confirmOrder || comments || postComments) {\n                // every time new comments are stored I am passing the confirmOrder parameter. So,\n                // here I check if this order was not already confirmed.\n                // if (confirmOrder && currentStatus < ORDERSTATUS_CONFIRMED) {\n                //     // emitEvent(pageId, 'new-order', order);\n                // } else \n                if (comments || postComments) {\n                    const orderJson = getOrderData(order, customer);\n                    emitEventBotWebapp(pageId, 'new-comment', orderJson);\n                }\n            }\n\n            return order;\n\n        } else {\n            // const count = await Order.find({ pageId: pageId }).count().exec();\n            // let orderId = 1;\n            // if (count) orderId = count + 1;\n\n            const resultLastId = await Order.find({ pageId: pageId }).select('id').sort('-id').limit(1).exec();\n            let orderId = 1;\n            if (resultLastId && resultLastId.length) orderId = resultLastId[0].id + 1;\n\n            let _comments;\n            if (mergeComments && postComments)\n                // _comments = comments ? comments + '\\n' + hours + postComments : hours + postComments;\n                _comments = addTimedMessage(comments, postComments);\n            else\n                _comments = addTimedMessage(null, comments);\n\n            // First message goes to details, not to postComments\n            const order = new Order({\n                id: orderId,\n                pageId: pageId,\n                userId: userId,\n                customerId: customer.id,\n                phone: phone,\n                waitingFor: waitingFor,\n                comments: _comments,\n                details: postComments,\n                status: ORDERSTATUS_PENDING,\n            });\n            await order.save();\n\n            const orderJson = getOrderData(order, customer)\n\n            emitEventBotWebapp(pageId, 'new-order', orderJson);\n\n            return order;\n        }\n    } catch (updateOrderError) {\n        console.error({ updateOrderError });\n        throw updateOrderError;\n    }\n}\n\nconst fullOrderGetAll = async (queryObj, sortObj, rangeObj) => {\n    const ret = {\n        rangeIni: 0,\n        rangeEnd: 0,\n        totalCount: 0,\n        ordersArray: [],\n    }\n\n    try {\n        const result = await Order.find(queryObj).sort(sortObj).exec();\n\n        ret.rangeIni = 0;\n        ret.rangeEnd = result ? result.length : 0;\n        ret.totalCount = result ? result.length : 0;\n\n        if (rangeObj) {\n            ret.rangeIni = rangeObj.offset <= result.length ? rangeObj.offset : result.length;\n            ret.rangeEnd = (rangeObj.offset + rangeObj.limit) <= result.length ? rangeObj.offset + rangeObj.limit : result.length;\n        }\n\n        ret.ordersArray = [];\n        if (result && result.length && result.length > 0) {\n\n            // workaround to show totalamount and totalitems in the frontend, because\n            // I am only sending part of the list (pagination)\n            let asideTotalAmount = 0;\n            let asideTotalItems = result.length;\n            for (const order of result) {\n                asideTotalAmount += order.total;\n            }\n            // workaround end: all orders will receive these values.\n\n            // instant cache to not query the database anytime.\n            const savedCustomers = {};\n            for (let i = ret.rangeIni; i < ret.rangeEnd; i++) {\n                const order = result[i];\n                if (!savedCustomers[order.customerId]) {\n                    const customer = await getCustomerById(order.pageId, order.customerId);\n                    savedCustomers[order.customerId] = customer;\n                }\n\n                const jsonOrder = getOrderData(order, savedCustomers[order.customerId], asideTotalAmount, asideTotalItems);\n                ret.ordersArray.push(jsonOrder);\n            }\n        }\n        return ret;\n    } catch (error) {\n        console.error(error);\n        return ret;\n    }\n}\n\n\nexport const getOrderPending = async orderData => {\n    const { userId, pageId } = orderData;\n\n    const _order = await Order.findOne({\n        userId: userId, pageId: pageId,\n        status: { $lt: ORDERSTATUS_FINISHED },\n    }).exec();\n    if (_order) {\n        const headerOrder = {\n            order: _order,\n        }\n        return headerOrder;\n    }\n    else return null;\n}\n\nexport const getLastUserOrder = async orderData => {\n    const { userId, pageId, status } = orderData;\n\n    const resultLast = await Order.find({\n        pageId: pageId,\n        userId: userId,\n        status: { $lt: status },\n    }).sort('-id').limit(1).exec();\n    if (resultLast && resultLast.length)\n        return resultLast[0];\n    else return null;\n}\n\nexport const getLastOrder = async pageID => {\n    const resultLastId = await Order.find({ pageId: pageID, status: { $gte: ORDERSTATUS_CONFIRMED } }).select('id').sort('-confirmed_at').limit(1).exec();\n    if (resultLastId && resultLastId.length)\n        return resultLastId[0].id;\n    else return 0;\n}\n\nexport const getLastPendingOrders = async pageID => {\n    const orders = await Order.find({ pageId: pageID, status: ORDERSTATUS_CONFIRMED })\n        .select('id confirmed_at')\n        .sort('-confirmed_at')\n        .exec();\n\n    if (orders && orders.length)\n        return orders;\n    else return [];\n}\n\n\nexport const getOrdersCustomerStat = async orderData => {\n    const { pageId, customerId } = orderData;\n\n    const orders = await Order.find({ pageId: pageId, customerId: customerId }).select('createdAt total').sort('createdAt').exec();\n    let total_spent = 0;\n    let nb_orders = 0;\n    let first_order = Date.now();\n    let last_order = null;\n    for (const order of orders) {\n        total_spent += order.total;\n        nb_orders += 1;\n\n        if (first_order >= order.createdAt) {\n            first_order = order.createdAt;\n        }\n        if (last_order <= order.createdAt) {\n            last_order = order.createdAt;\n        }\n    }\n    return { total_spent, nb_orders, first_order, last_order };\n}\n\nconst sendNotification = (whatsAppId, userId, message) => {\n    emitEventWhats(whatsAppId, 'notify', { userId: userId, message: message })\n}\n\nconst sendDelayedMsg = async (pageID, userID, message) => {\n    sendNotification(whatsAppId, userId, message);\n}"],"file":"simpleOrdersController.js"}