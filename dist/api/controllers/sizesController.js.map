{"version":3,"sources":["../../../src/api/controllers/sizesController.js"],"names":["size_get_all","req","res","sortObj","query","sort","rangeObj","range","options","offset","limit","lean","leanWithId","queryObj","filter","arr","JSON","parse","currentUser","activePage","Size","find","paginate","err","result","status","json","message","errmsg","setHeader","util","format","total","docs","size_get_one","params","id","pageId","findOne","doc","errMsg","size_create","body","newRecord","size","slices","split","save","then","catch","size_update","size_delete","findOneAndRemove","getSize","pageID","sizeID","select","exec","getSizes","sizeIdArray"],"mappings":"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","sourcesContent":["import Size from \"../models/sizes\";\nimport util from \"util\";\nimport stringCapitalizeName from 'string-capitalize-name';\nimport { configSortQuery, configRangeQuery } from '../util/util';\n\n// List all sizes\n// TODO: use filters in the query req.query\nexport const size_get_all = async (req, res) => {\n    // Getting the sort from the requisition\n    var sortObj = configSortQuery(req.query.sort);\n    // Getting the range from the requisition\n    var rangeObj = configRangeQuery(req.query.range);\n\n    let options = {\n        offset: rangeObj['offset'],\n        limit: rangeObj['limit'],\n        sort: sortObj,\n        lean: true,\n        leanWithId: false,\n    };\n\n    var queryObj = {};\n    if (req.query.filter) {\n        var arr = JSON.parse(req.query.filter);\n        queryObj[arr[0]] = arr[1];\n    }\n    if (req.currentUser.activePage) {\n        queryObj[\"pageId\"] = req.currentUser.activePage;\n    }\n    var query = {};\n    if (req.query.filter || req.currentUser.activePage) {\n        query = Size.find(queryObj);\n    }\n\n    Size.paginate(query, options, async (err, result) => {\n        if (err) {\n            res.status(500).json({ message: err.errmsg });\n        } else {\n            res.setHeader('Content-Range', util.format(\"sizes %d-%d/%d\", rangeObj['offset'], rangeObj['limit'], result.total));\n            res.status(200).json(result.docs);\n        }\n    });\n};\n\n// List one record by filtering by ID\nexport const size_get_one = (req, res) => {\n    if (req.params && req.params.id) {\n\n        const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n\n        Size.findOne({ pageId: pageId, id: req.params.id }, (err, doc) => {\n            if (err) {\n                res.status(500).json({ message: err.errMsg });\n            }\n            else {\n                res.status(200).json(doc);\n            }\n        });\n    }\n}\n\n// CREATE A NEW RECORD\nexport const size_create = (req, res) => {\n    if (req.body) {\n        const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n\n        const newRecord = new Size({\n            id: req.body.id,\n            size: stringCapitalizeName(req.body.size),\n            slices: req.body.slices,\n            split: req.body.split,\n            pageId: pageId,\n        });\n\n        newRecord.save()\n            .then((result) => {\n                res.status(200).json(result);\n            })\n            .catch((err) => {\n                res.status(500).json({ message: err.errmsg });\n            });\n    }\n}\n\n// UPDATE\nexport const size_update = (req, res) => {\n    if (req.body && req.body.id) {\n\n        const pageId = req.currentUser.activePage;\n\n        Size.findOne({ pageId: pageId, id: req.body.id }, (err, doc) => {\n            if (!err) {\n                doc.size = stringCapitalizeName(req.body.size);\n                doc.split = req.body.split;\n                doc.slices = req.body.slices;\n                doc.save((err, result) => {\n                    if (err) {\n                        res.status(500).json({ message: err.errmsg });\n                    } else {\n                        res.status(200).json(result);\n                    }\n                });\n            } else {\n                res.status(500).json({ message: err.errmsg });\n            }\n        });\n    }\n}\n\n// DELETE\nexport const size_delete = (req, res) => {\n\n    const pageId = req.currentUser.activePage;\n\n    Size.findOneAndRemove({ pageId: pageId, id: req.params.id })\n        .then((result) => {\n            res.status(200).json(result);\n        })\n        .catch((err) => {\n            res.status(500).json({ message: err.errmsg });\n        });\n};\n\nexport const getSize = async (pageID, sizeID) => {\n    const query = Size.findOne({ pageId: pageID, id: sizeID });\n    query.select('id size');\n    return await query.exec();\n}\n\nexport const getSizes = (pageID, sizeIdArray) => {\n    return Size.find({ pageId: pageID, id: sizeIdArray }).exec();\n}\n"],"file":"sizesController.js"}