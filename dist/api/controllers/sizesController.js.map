{"version":3,"sources":["../../../src/api/controllers/sizesController.js"],"names":["size_get_all","req","res","sortObj","query","sort","rangeObj","range","queryObj","filter","filterObj","filterField","length","i","value","filterValues","Array","isArray","$in","currentUser","activePage","Size","find","exec","err","result","status","json","message","errmsg","_rangeIni","_rangeEnd","offset","limit","_totalCount","sizesArray","push","setHeader","util","format","size_get_one","params","id","pageId","findOne","doc","errMsg","size_create","body","select","lastId","newRecord","size","slices","split","save","then","code","size_update","size_delete","findOneAndRemove","deleteManySizes","pageID","deleteMany","getSize","sizeID","getSizes","sizeIdArray"],"mappings":"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","sourcesContent":["import Size from \"../models/sizes\";\nimport util from \"util\";\nimport stringCapitalizeName from 'string-capitalize-name';\nimport { configSortQuery, configRangeQuery, configFilterQueryMultiple } from '../util/util';\n\n// List all sizes\n// TODO: use filters in the query req.query\nexport const size_get_all = async (req, res) => {\n    // Getting the sort from the requisition\n    let sortObj = configSortQuery(req.query.sort);\n    // Getting the range from the requisition\n    let rangeObj = configRangeQuery(req.query.range);\n\n    let queryObj = {};\n    if (req.query.filter) {\n        const filterObj = configFilterQueryMultiple(req.query.filter);\n\n        if (filterObj && filterObj.filterField && filterObj.filterField.length) {\n            for (let i = 0; i < filterObj.filterField.length; i++) {\n                const filter = filterObj.filterField[i];\n                const value = filterObj.filterValues[i];\n                if (Array.isArray(value)) {\n                    queryObj[filter] = { $in: value };\n                }\n                else\n                    queryObj[filter] = value;\n            }\n        }\n    }\n    if (req.currentUser.activePage) {\n        queryObj[\"pageId\"] = req.currentUser.activePage;\n    }\n\n    Size.find(queryObj).sort(sortObj).exec((err, result) => {\n        if (err) {\n            res.status(500).json({ message: err.errmsg });\n        } else {\n            let _rangeIni = 0;\n            let _rangeEnd = result.length;\n            if (rangeObj) {\n                _rangeIni = rangeObj.offset <= result.length ? rangeObj.offset : result.length;\n                _rangeEnd = (rangeObj.offset + rangeObj.limit) <= result.length ? rangeObj.offset + rangeObj.limit : result.length;\n            }\n            let _totalCount = result.length;\n            let sizesArray = new Array();\n            for (let i = _rangeIni; i < _rangeEnd; i++) {\n                sizesArray.push(result[i])\n            }\n            res.setHeader('Content-Range', util.format(\"sizes %d-%d/%d\", _rangeIni, _rangeEnd, _totalCount));\n            res.status(200).json(sizesArray);\n        }\n    });\n};\n\n// List one record by filtering by ID\nexport const size_get_one = (req, res) => {\n    if (req.params && req.params.id) {\n\n        const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n\n        Size.findOne({ pageId: pageId, id: req.params.id }, (err, doc) => {\n            if (err) {\n                res.status(500).json({ message: err.errMsg });\n            }\n            else {\n                res.status(200).json(doc);\n            }\n        });\n    }\n}\n\n// CREATE A NEW RECORD\nexport const size_create = async (req, res) => {\n    if (req.body) {\n        const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n\n        let { id } = req.body;\n\n        if (!id || id === 0) {\n            const lastId = await Size.find({ pageId: pageId }).select('id').sort('-id').limit(1).exec();\n            id = 1;\n            if (lastId && lastId.length)\n                id = lastId[0].id + 1;\n        }\n\n        const newRecord = new Size({\n            id: id,\n            size: stringCapitalizeName(req.body.size),\n            slices: req.body.slices,\n            split: req.body.split,\n            pageId: pageId,\n        });\n\n        newRecord.save()\n            .then((result) => {\n                res.status(200).json(result);\n            })\n            .catch((err) => {\n                if (err.code === 11000) {\n                    res.status(500).json({ message: 'pos.messages.duplicatedKey' });\n                } else {\n                    res.status(500).json({ message: err.errmsg });\n                }\n            });\n    }\n}\n\n// UPDATE\nexport const size_update = (req, res) => {\n    if (req.body && req.body.id) {\n\n        const pageId = req.currentUser.activePage;\n\n        Size.findOne({ pageId: pageId, id: req.body.id }, (err, doc) => {\n            if (!err) {\n                doc.size = stringCapitalizeName(req.body.size);\n                doc.split = req.body.split;\n                doc.slices = req.body.slices;\n                doc.save((err, result) => {\n                    if (err) {\n                        res.status(500).json({ message: err.errmsg });\n                    } else {\n                        res.status(200).json(result);\n                    }\n                });\n            } else {\n                res.status(500).json({ message: err.errmsg });\n            }\n        });\n    }\n}\n\n// DELETE\nexport const size_delete = (req, res) => {\n\n    const pageId = req.currentUser.activePage;\n\n    Size.findOneAndRemove({ pageId: pageId, id: req.params.id })\n        .then((result) => {\n            res.status(200).json(result);\n        })\n        .catch((err) => {\n            res.status(500).json({ message: err.errmsg });\n        });\n};\n\n/**\n * Delete all records from a pageID\n * @param {*} pageID \n */\nexport const deleteManySizes = async (pageID) => {\n    return await Size.deleteMany({ pageId: pageID }).exec();\n}\n\nexport const getSize = async (pageID, sizeID) => {\n    const query = Size.findOne({ pageId: pageID, id: sizeID });\n    query.select('id size slices split');\n    return await query.exec();\n}\n\nexport const getSizes = (pageID, sizeIdArray) => {\n    if (sizeIdArray && sizeIdArray.length > 0)\n        return Size.find({ pageId: pageID, id: sizeIdArray }).exec();\n    else\n        return Size.find({ pageId: pageID }).exec();\n}\n"],"file":"sizesController.js"}