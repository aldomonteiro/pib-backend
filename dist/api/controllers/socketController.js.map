{"version":3,"sources":["../../../src/api/controllers/socketController.js"],"names":["io","clientsWeb","clientsWhats","setupSocketIo","server","allowedOrigins","origins","origin","callback","indexOf","console","log","on","socket","logger","color","handshake","query","level","originID","user","hasOwnProperty","id","emitEventWhats","message","messenger","consume","subscribe","msg","msgJSON","JSON","parse","pageID","eventName","data","emitEvent","whatsAppId","userId","event","socketID","sockets","connected","emit","error","userID"],"mappings":"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","sourcesContent":["import socketIo from 'socket.io';\nimport logger from 'node-color-log';\n\nimport messenger from '../../messenger';\n\nvar io;\nvar clientsWeb = {};\nvar clientsWhats = {};\n\nexport const setupSocketIo = (server, allowedOrigins) => {\n    io = socketIo(server);\n\n    io.origins((origin, callback) => {\n        if (allowedOrigins.indexOf(origin) > -1)\n            callback(null, true);\n        else {\n            console.log('>>> SOCKETCONTROLLER trying connect from ', origin);\n            return callback('Socket.io: origin not allowed', false);\n        }\n\n    });\n\n    io.on('connection', socket => {\n\n        logger.color('yellow').log('socket.handshake.query: ' + socket.handshake.query + ' level:' + logger.level);\n\n        socket.on('acknowledgment', originID => {\n            logger.color('green').log('aknowledment: ' + (originID.user || originID));\n            if (originID.hasOwnProperty('origin') && originID.origin === 'whatsapp') {\n                clientsWhats[originID.user] = socket.id;\n                logger.color('green').log('joining from whatsapp: ' + originID.user);\n                emitEventWhats(originID.user, 'notify', { user: originID.user, message: 'sadkasl' })\n            } else {\n                // this identifier is from a pageID\n                clientsWeb[originID] = socket.id;\n                logger.color('green').log('joining from web: ' + originID);\n            }\n        });\n\n        socket.on('disconnect', () => {\n            for (const id in clientsWeb) {\n                if (clientsWeb[id] === socket.id) {\n                    delete clientsWeb[id];\n                    logger.color('red').log('disconnecting from web ' + id);\n                    break;\n                }\n            }\n            for (const id in clientsWhats) {\n                if (clientsWhats[id] === socket.id) {\n                    delete clientsWhats[id];\n                    logger.color('red').log('disconnecting from whatsapp ' + id);\n                    break;\n                }\n            }\n        });\n    });\n\n    messenger.consume('bot-to-webapp')\n        .subscribe(msg => {\n            const msgJSON = JSON.parse(msg);\n            const { pageID, eventName, data } = msgJSON;\n            emitEvent(pageID, eventName, data);\n        });\n\n    messenger.consume('bot-to-whats')\n        .subscribe(msg => {\n            const msgJSON = JSON.parse(msg);\n            const { whatsAppId, userId, message } = msgJSON;\n            emitEventWhats(whatsAppId, 'notify', { userId: userId, message: message });\n        });\n\n    // setInterval(() => {\n    //     const pages = ['278383016327989']\n    //     pages.forEach(page => emitEvent(page, 'talk-to-human', { id: page + Math.round(Math.random() * 100), first_name: 'Try ' }))\n\n    // }, 10000);\n\n    // setInterval(() => {\n    //     const pages = ['938611509676235']\n    //     pages.forEach(page => emitEvent(page, 'talk-to-human', { id: page + Math.round(Math.random() * 100), first_name: 'Try ' }))\n\n    // }, 9000);\n\n    // setInterval(() => {\n    //     const pages = ['307519123184673']\n    //     pages.forEach(page => emitEvent(page, 'talk-to-human', { id: page + Math.round(Math.random() * 100), first_name: 'Try ' }))\n\n    // }, 11000);\n\n    // setInterval(() => {\n    //     const pages = ['2174806159435043']\n    //     pages.forEach(page => emitEvent(page, 'talk-to-human', { id: page + Math.round(Math.random() * 100), first_name: 'Try ' }))\n\n    // }, 12000);\n\n}\n\nexport const emitEvent = (pageID, event, data) => {\n    try {\n        // emiting the event to all sockets created by the pageID query.\n        // I am facing some issue that there are a lot of connected sockets\n        // and it seems that some of then doesn't work.\n        // for (const socketID in io.sockets.connected) {\n        //     const socket = io.sockets.connected[socketID];\n        //     if (socket.handshake.query.pageID === pageID) {\n        //         // sending to all clients in pageID room, except sender\n        //         socket.to(pageID).emit(event, data);\n        //         break;\n        //     }\n        // }\n\n        // This line works, but duplicates the messages.\n        // io.in(pageID).emit(event, data);\n\n        // Here I am storing the socketId for each pageID, but, it seems\n        // the connected socket used on connect is not working to emit events\n        // after awhile.\n        const socketID = clientsWeb[pageID];\n        if (socketID) {\n            const socket = io.sockets.connected[socketID];\n            if (socket) {\n                socket.emit(event, data);\n                logger.color('blue').log('emitted for ' + pageID)\n            }\n            else {\n                logger.color('red').log('no socket for ' + pageID)\n            }\n        } else {\n            logger.color('red').log('no socket for ' + pageID)\n        }\n    } catch (error) {\n        console.error(`Error: ${error.message}`);\n    }\n};\n\nexport const emitEventWhats = (userID, event, data) => {\n    try {\n        // Here I am storing the socketId for each pageID, but, it seems\n        // the connected socket used on connect is not working to emit events\n        // after awhile.\n        const socketID = clientsWhats[userID];\n        if (socketID) {\n            const socket = io.sockets.connected[socketID];\n            if (socket) {\n                socket.emit(event, data);\n                logger.color('blue').log('emitted for ' + userID + ' with data:' + data.userId + ' ' + data.message)\n            } else {\n                logger.color('red').log('no socket for ' + userID)\n            }\n        } else {\n            logger.color('red').log('no socket for ' + userID)\n        }\n    } catch (error) {\n        console.error(`Error: ${error.message}`);\n    }\n};\n\n"],"file":"socketController.js"}