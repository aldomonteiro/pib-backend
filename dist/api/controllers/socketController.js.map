{"version":3,"sources":["../../../src/api/controllers/socketController.js"],"names":["io","clientsWeb","clientsWhats","setupSocketIo","server","allowedOrigins","origins","origin","callback","indexOf","console","log","on","socket","logger","color","JSON","stringify","handshake","query","id","originID","hasOwnProperty","user","emitEventWhats","message","sockets","pageID","timeStamp","emit","pages","Object","keys","socketsByTimeStamp","timeStamps","dir","error","messenger","consume","subscribe","msg","msgJSON","parse","eventName","data","emitEvent","whatsAppId","userId","event","values","socketID","connected","userID"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;;;AAEA,IAAIA,EAAJ;AACA,IAAIC,UAAU,GAAG,EAAjB;AACA,IAAIC,YAAY,GAAG,EAAnB;;AAEO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,MAAD,EAASC,cAAT,EAA4B;AACrDL,EAAAA,EAAE,GAAG,wBAASI,MAAT,CAAL;AAEAJ,EAAAA,EAAE,CAACM,OAAH,CAAW,UAACC,MAAD,EAASC,QAAT,EAAsB;AAC7B,QAAIH,cAAc,CAACI,OAAf,CAAuBF,MAAvB,IAAiC,CAAC,CAAtC,EACIC,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAR,CADJ,KAEK;AACDE,MAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ,EAAyDJ,MAAzD;AACA,aAAOC,QAAQ,CAAC,+BAAD,EAAkC,KAAlC,CAAf;AACH;AAEJ,GARD;AAUAR,EAAAA,EAAE,CAACY,EAAH,CAAM,YAAN,EAAoB,UAAAC,MAAM,EAAI;AAE1BC,6BAAOC,KAAP,CAAa,QAAb,EAAuBJ,GAAvB,CAA2B,2BAAgB,IAAhB,EAAsB,6BAA6BK,IAAI,CAACC,SAAL,CAAeJ,MAAM,CAACK,SAAP,CAAiBC,KAAhC,CAA7B,GAAsE,aAAtE,GAAsFN,MAAM,CAACO,EAAnH,CAA3B;;AAEAP,IAAAA,MAAM,CAACD,EAAP,CAAU,gBAAV,EAA4B,UAAAS,QAAQ,EAAI;AACpCP,+BAAOC,KAAP,CAAa,SAAb,EAAwBJ,GAAxB,CAA4B,2BAAgB,IAAhB,EAAsB,UAAUK,IAAI,CAACC,SAAL,CAAeI,QAAf,CAAhC,CAA5B;;AACA,UAAIA,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAJ,EAAuC;AACnC,YAAID,QAAQ,CAACd,MAAT,KAAoB,UAAxB,EAAoC;AAChCL,UAAAA,YAAY,CAACmB,QAAQ,CAACE,IAAV,CAAZ,GAA8BV,MAAM,CAACO,EAArC;;AACAN,mCAAOC,KAAP,CAAa,OAAb,EAAsBJ,GAAtB,CAA0B,4BAA4BU,QAAQ,CAACE,IAA/D;;AACAC,UAAAA,cAAc,CAACH,QAAQ,CAACE,IAAV,EAAgB,QAAhB,EAA0B;AAAEA,YAAAA,IAAI,EAAEF,QAAQ,CAACE,IAAjB;AAAuBE,YAAAA,OAAO,EAAE;AAAhC,WAA1B,CAAd;AACH,SAJD,MAIO,IAAIJ,QAAQ,CAACd,MAAT,KAAoB,KAAxB,EAA+B;AAClC,cAAImB,OAAO,GAAGzB,UAAU,CAACoB,QAAQ,CAACM,MAAV,CAAxB;AACA,cAAI,CAACD,OAAL,EACIA,OAAO,GAAG,EAAV;AACJA,UAAAA,OAAO,CAACL,QAAQ,CAACO,SAAV,CAAP,GAA8Bf,MAAM,CAACO,EAArC;AACAnB,UAAAA,UAAU,CAACoB,QAAQ,CAACM,MAAV,CAAV,GAA8BD,OAA9B,CALkC,CAMlC;;AACAZ,mCAAOC,KAAP,CAAa,OAAb,EAAsBJ,GAAtB,CAA0B,2BAAgB,IAAhB,EAAsB,6BAA6BK,IAAI,CAACC,SAAL,CAAeI,QAAf,CAAnD,CAA1B;;AACAR,UAAAA,MAAM,CAACgB,IAAP,CAAY,QAAZ;AACH;AACJ,OAfD,MAeO;AACH;AACA5B,QAAAA,UAAU,CAACoB,QAAD,CAAV,GAAuBR,MAAM,CAACO,EAA9B;;AACAN,iCAAOC,KAAP,CAAa,OAAb,EAAsBJ,GAAtB,CAA0B,uBAAuBU,QAAjD;AACH;AACJ,KAtBD;AAwBAR,IAAAA,MAAM,CAACD,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC1B,UAAMkB,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAY/B,UAAZ,CAAd;;AACA,gCAAqB6B,KAArB,4BAA4B;AAAvB,YAAMH,MAAM,aAAZ;AACD,YAAMM,kBAAkB,GAAGhC,UAAU,CAAC0B,MAAD,CAArC;AACA,YAAMO,UAAU,GAAGH,MAAM,CAACC,IAAP,CAAYC,kBAAZ,CAAnB;;AACA,wCAAwBC,UAAxB,mCAAoC;AAA/B,cAAMN,SAAS,mBAAf;AACD,cAAMR,GAAE,GAAGa,kBAAkB,CAACL,SAAD,CAA7B;;AACA,cAAIR,GAAE,KAAKP,MAAM,CAACO,EAAlB,EAAsB;AAClB,mBAAOa,kBAAkB,CAACL,SAAD,CAAzB;AACA3B,YAAAA,UAAU,CAAC0B,MAAD,CAAV,GAAqBM,kBAArB;;AACAnB,qCAAOC,KAAP,CAAa,KAAb,EAAoBJ,GAApB,CAAwB,oCAAoCS,GAApC,GAAyC,QAAzC,GAAoDO,MAA5E;;AACAjB,YAAAA,OAAO,CAACyB,GAAR,CAAYlC,UAAZ;AACA;AACH;AACJ;AACJ;;AACD,WAAK,IAAMmB,EAAX,IAAiBlB,YAAjB,EAA+B;AAC3B,YAAIA,YAAY,CAACkB,EAAD,CAAZ,KAAqBP,MAAM,CAACO,EAAhC,EAAoC;AAChC,iBAAOlB,YAAY,CAACkB,EAAD,CAAnB;;AACAN,mCAAOC,KAAP,CAAa,KAAb,EAAoBJ,GAApB,CAAwB,iCAAiCS,EAAzD;;AACA;AACH;AACJ;AACJ,KAvBD;AAyBAP,IAAAA,MAAM,CAACD,EAAP,CAAU,eAAV,EAA2B,UAAAwB,KAAK,EAAI;AAChCtB,+BAAOC,KAAP,CAAa,KAAb,EAAoBJ,GAApB,CAAwB,2BAA2BK,IAAI,CAACC,SAAL,CAAemB,KAAf,CAAnD;AACH,KAFD;AAIH,GAzDD;AA2DApC,EAAAA,EAAE,CAACY,EAAH,CAAM,eAAN,EAAuB,UAAAwB,KAAK,EAAI;AAC5BtB,6BAAOC,KAAP,CAAa,KAAb,EAAoBJ,GAApB,CAAwB,uBAAuBK,IAAI,CAACC,SAAL,CAAemB,KAAf,CAA/C;AACH,GAFD;;AAKAC,wBAAUC,OAAV,CAAkB,eAAlB,EACKC,SADL,CACe,UAAAC,GAAG,EAAI;AACd,QAAMC,OAAO,GAAGzB,IAAI,CAAC0B,KAAL,CAAWF,GAAX,CAAhB;AADc,QAENb,MAFM,GAEsBc,OAFtB,CAENd,MAFM;AAAA,QAEEgB,SAFF,GAEsBF,OAFtB,CAEEE,SAFF;AAAA,QAEaC,IAFb,GAEsBH,OAFtB,CAEaG,IAFb;AAGdC,IAAAA,SAAS,CAAClB,MAAD,EAASgB,SAAT,EAAoBC,IAApB,CAAT;AACH,GALL;;AAOAP,wBAAUC,OAAV,CAAkB,cAAlB,EACKC,SADL,CACe,UAAAC,GAAG,EAAI;AACd,QAAMC,OAAO,GAAGzB,IAAI,CAAC0B,KAAL,CAAWF,GAAX,CAAhB;AADc,QAENM,UAFM,GAE0BL,OAF1B,CAENK,UAFM;AAAA,QAEMC,MAFN,GAE0BN,OAF1B,CAEMM,MAFN;AAAA,QAEctB,OAFd,GAE0BgB,OAF1B,CAEchB,OAFd;AAGdD,IAAAA,cAAc,CAACsB,UAAD,EAAa,QAAb,EAAuB;AAAEC,MAAAA,MAAM,EAAEA,MAAV;AAAkBtB,MAAAA,OAAO,EAAEA;AAA3B,KAAvB,CAAd;AACH,GALL,EApFqD,CA2FrD;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;AAEH,CAnHM;;;;AAqHA,IAAMoB,SAAS,GAAG,SAAZA,SAAY,CAAClB,MAAD,EAASqB,KAAT,EAAgBJ,IAAhB,EAAyB;AAC9C,MAAI;AACA,QAAMlB,OAAO,GAAGzB,UAAU,CAAC0B,MAAD,CAA1B;;AACA,QAAID,OAAJ,EAAa;AACT,yCAAuBK,MAAM,CAACkB,MAAP,CAAcvB,OAAd,CAAvB,sCAA+C;AAA1C,YAAMwB,QAAQ,sBAAd;;AACD;AACA,YAAIA,QAAJ,EAAc;AACV,cAAMrC,MAAM,GAAGb,EAAE,CAAC0B,OAAH,CAAWyB,SAAX,CAAqBD,QAArB,CAAf;;AACA,cAAIrC,MAAJ,EAAY;AACRA,YAAAA,MAAM,CAACgB,IAAP,CAAYmB,KAAZ,EAAmBJ,IAAnB;;AACA9B,qCAAOC,KAAP,CAAa,MAAb,EAAqBJ,GAArB,CAAyB,iBAAiBgB,MAA1C;AACH,WAHD,MAGO;AACHb,qCAAOC,KAAP,CAAa,KAAb,EAAoBJ,GAApB,CAAwB,mBAAmBgB,MAA3C;AACH;AACJ;AACJ;AACJ,KAbD,MAaO;AACHb,+BAAOC,KAAP,CAAa,KAAb,EAAoBJ,GAApB,CAAwB,sBAAsBgB,MAA9C;AACH;AACJ,GAlBD,CAkBE,OAAOS,KAAP,EAAc;AACZ1B,IAAAA,OAAO,CAAC0B,KAAR,6BAAmCA,KAAK,CAACX,OAAzC;AACAf,IAAAA,OAAO,CAAC0B,KAAR,CAAcA,KAAd;AACH;AACJ,CAvBM;;;;AAyBA,IAAMZ,cAAc,GAAG,SAAjBA,cAAiB,CAAC4B,MAAD,EAASJ,KAAT,EAAgBJ,IAAhB,EAAyB;AACnD,MAAI;AACA;AACA;AACA;AACA,QAAMM,QAAQ,GAAGhD,YAAY,CAACkD,MAAD,CAA7B;;AACA,QAAIF,QAAJ,EAAc;AACV,UAAMrC,MAAM,GAAGb,EAAE,CAAC0B,OAAH,CAAWyB,SAAX,CAAqBD,QAArB,CAAf;;AACA,UAAIrC,MAAJ,EAAY;AACRA,QAAAA,MAAM,CAACgB,IAAP,CAAYmB,KAAZ,EAAmBJ,IAAnB;;AACA9B,iCAAOC,KAAP,CAAa,MAAb,EAAqBJ,GAArB,CAAyB,iBAAiByC,MAAjB,GAA0B,aAA1B,GAA0CR,IAAI,CAACG,MAA/C,GAAwD,GAAxD,GAA8DH,IAAI,CAACnB,OAA5F;AACH,OAHD,MAGO;AACHX,iCAAOC,KAAP,CAAa,KAAb,EAAoBJ,GAApB,CAAwB,mBAAmByC,MAA3C;AACH;AACJ,KARD,MAQO;AACHtC,+BAAOC,KAAP,CAAa,KAAb,EAAoBJ,GAApB,CAAwB,mBAAmByC,MAA3C;AACH;AACJ,GAhBD,CAgBE,OAAOhB,KAAP,EAAc;AACZ1B,IAAAA,OAAO,CAAC0B,KAAR,iCAAuCA,KAAK,CAACX,OAA7C;AACAf,IAAAA,OAAO,CAAC0B,KAAR,CAAcA,KAAd;AACH;AACJ,CArBM","sourcesContent":["import socketIo from 'socket.io';\nimport logger from 'node-color-log';\n\nimport messenger from '../../messenger';\nimport { addTimedMessage } from '../util/util';\n\nvar io;\nvar clientsWeb = {};\nvar clientsWhats = {};\n\nexport const setupSocketIo = (server, allowedOrigins) => {\n    io = socketIo(server);\n\n    io.origins((origin, callback) => {\n        if (allowedOrigins.indexOf(origin) > -1)\n            callback(null, true);\n        else {\n            console.log('>>> SOCKETCONTROLLER trying connect from ', origin);\n            return callback('Socket.io: origin not allowed', false);\n        }\n\n    });\n\n    io.on('connection', socket => {\n\n        logger.color('yellow').log(addTimedMessage(null, 'socket.handshake.query: ' + JSON.stringify(socket.handshake.query) + ' socket.id:' + socket.id));\n\n        socket.on('acknowledgment', originID => {\n            logger.color('magenta').log(addTimedMessage(null, 'ack: ' + JSON.stringify(originID)));\n            if (originID.hasOwnProperty('origin')) {\n                if (originID.origin === 'whatsapp') {\n                    clientsWhats[originID.user] = socket.id;\n                    logger.color('green').log('joining from whatsapp: ' + originID.user);\n                    emitEventWhats(originID.user, 'notify', { user: originID.user, message: 'CONNECTED' })\n                } else if (originID.origin === 'web') {\n                    let sockets = clientsWeb[originID.pageID];\n                    if (!sockets)\n                        sockets = {};\n                    sockets[originID.timeStamp] = socket.id;\n                    clientsWeb[originID.pageID] = sockets;\n                    // clientsWeb[originID.pageID] = socket.id;\n                    logger.color('green').log(addTimedMessage(null, 'joining from web (new): ' + JSON.stringify(originID)));\n                    socket.emit('ack_ok');\n                }\n            } else {\n                // this identifier is from a pageID\n                clientsWeb[originID] = socket.id;\n                logger.color('green').log('joining from web: ' + originID);\n            }\n        });\n\n        socket.on('disconnect', () => {\n            const pages = Object.keys(clientsWeb);\n            for (const pageID of pages) {\n                const socketsByTimeStamp = clientsWeb[pageID];\n                const timeStamps = Object.keys(socketsByTimeStamp);\n                for (const timeStamp of timeStamps) {\n                    const id = socketsByTimeStamp[timeStamp];\n                    if (id === socket.id) {\n                        delete socketsByTimeStamp[timeStamp];\n                        clientsWeb[pageID] = socketsByTimeStamp;\n                        logger.color('red').log('disconnecting from web: socket ' + id + ' page:' + pageID);\n                        console.dir(clientsWeb);\n                        break;\n                    }\n                }\n            }\n            for (const id in clientsWhats) {\n                if (clientsWhats[id] === socket.id) {\n                    delete clientsWhats[id];\n                    logger.color('red').log('disconnecting from whatsapp ' + id);\n                    break;\n                }\n            }\n        });\n\n        socket.on('connect_error', error => {\n            logger.color('red').log('socket connect_error: ' + JSON.stringify(error));\n        })\n\n    });\n\n    io.on('connect_error', error => {\n        logger.color('red').log('io connect_error: ' + JSON.stringify(error));\n    })\n\n\n    messenger.consume('bot-to-webapp')\n        .subscribe(msg => {\n            const msgJSON = JSON.parse(msg);\n            const { pageID, eventName, data } = msgJSON;\n            emitEvent(pageID, eventName, data);\n        });\n\n    messenger.consume('bot-to-whats')\n        .subscribe(msg => {\n            const msgJSON = JSON.parse(msg);\n            const { whatsAppId, userId, message } = msgJSON;\n            emitEventWhats(whatsAppId, 'notify', { userId: userId, message: message });\n        });\n\n    // setInterval(() => {\n    //     const pages = ['278383016327989']\n    //     pages.forEach(page => emitEvent(page, 'talk-to-human', { id: page + Math.round(Math.random() * 100), first_name: 'Try ' }))\n\n    // }, 10000);\n\n    // setInterval(() => {\n    //     const pages = ['938611509676235']\n    //     pages.forEach(page => emitEvent(page, 'talk-to-human', { id: page + Math.round(Math.random() * 100), first_name: 'Try ' }))\n\n    // }, 9000);\n\n    // setInterval(() => {\n    //     const pages = ['307519123184673']\n    //     pages.forEach(page => emitEvent(page, 'talk-to-human', { id: page + Math.round(Math.random() * 100), first_name: 'Try ' }))\n\n    // }, 11000);\n\n    // setInterval(() => {\n    //     const pages = ['2174806159435043']\n    //     pages.forEach(page => emitEvent(page, 'talk-to-human', { id: page + Math.round(Math.random() * 100), first_name: 'Try ' }))\n\n    // }, 12000);\n\n}\n\nexport const emitEvent = (pageID, event, data) => {\n    try {\n        const sockets = clientsWeb[pageID];\n        if (sockets) {\n            for (const socketID of Object.values(sockets)) {\n                // const socketID = clientsWeb[pageID];\n                if (socketID) {\n                    const socket = io.sockets.connected[socketID];\n                    if (socket) {\n                        socket.emit(event, data);\n                        logger.color('blue').log('emitted for ' + pageID)\n                    } else {\n                        logger.color('red').log('no socket for ' + pageID)\n                    }\n                }\n            }\n        } else {\n            logger.color('red').log('no clientWeb for ' + pageID)\n        }\n    } catch (error) {\n        console.error(`emit event Error: ${error.message}`);\n        console.error(error);\n    }\n};\n\nexport const emitEventWhats = (userID, event, data) => {\n    try {\n        // Here I am storing the socketId for each pageID, but, it seems\n        // the connected socket used on connect is not working to emit events\n        // after awhile.\n        const socketID = clientsWhats[userID];\n        if (socketID) {\n            const socket = io.sockets.connected[socketID];\n            if (socket) {\n                socket.emit(event, data);\n                logger.color('blue').log('emitted for ' + userID + ' with data:' + data.userId + ' ' + data.message)\n            } else {\n                logger.color('red').log('no socket for ' + userID)\n            }\n        } else {\n            logger.color('red').log('no socket for ' + userID)\n        }\n    } catch (error) {\n        console.error(`emitEventWhats Error: ${error.message}`);\n        console.error(error);\n    }\n};\n\n"],"file":"socketController.js"}