{"version":3,"sources":["../../../src/api/controllers/socketController.js"],"names":["io","clients","setupSocketIo","server","allowedOrigins","origins","origin","callback","indexOf","on","socket","pageID","logger","color","log","id","console","info","messenger","consume","subscribe","msg","msgJSON","JSON","parse","eventName","data","emitEvent","setInterval","pages","forEach","page","Math","round","random","first_name","event","socketID","sockets","connected","emit","error","message"],"mappings":"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","sourcesContent":["import socketIo from 'socket.io';\nimport logger from 'node-color-log';\n\nimport messenger from '../../messenger';\n\nvar io;\nvar clients = {};\n\nexport const setupSocketIo = (server, allowedOrigins) => {\n    io = socketIo(server);\n\n    io.origins((origin, callback) => {\n        if (allowedOrigins.indexOf(origin) > -1)\n            callback(null, true);\n        else\n            return callback('Socket.io: origin not allowed', false);\n\n    });\n\n    io.on('connection', socket => {\n        socket.on('acknowledgment', pageID => {\n            logger.color('green').log('joining: ' + pageID);\n            clients[pageID] = socket.id;\n            console.info(io);\n        });\n\n        socket.on('disconnect', () => {\n            for (const id in clients) {\n                if (clients[id] === socket.id) {\n                    delete clients[id];\n                    logger.color('red').log('disconnecting ' + id);\n                    break;\n                }\n            }\n        });\n    });\n\n    messenger.consume('redis')\n        .subscribe(msg => {\n            const msgJSON = JSON.parse(msg);\n            const { pageID, eventName, data } = msgJSON;\n            emitEvent(pageID, eventName, data);\n        });\n\n    setInterval(() => {\n        const pages = ['278383016327989']\n        pages.forEach(page => emitEvent(page, 'talk-to-human', { id: page + Math.round(Math.random() * 100), first_name: 'Try ' }))\n\n    }, 10000);\n\n    setInterval(() => {\n        const pages = ['938611509676235']\n        pages.forEach(page => emitEvent(page, 'talk-to-human', { id: page + Math.round(Math.random() * 100), first_name: 'Try ' }))\n\n    }, 9000);\n\n    setInterval(() => {\n        const pages = ['307519123184673']\n        pages.forEach(page => emitEvent(page, 'talk-to-human', { id: page + Math.round(Math.random() * 100), first_name: 'Try ' }))\n\n    }, 11000);\n\n    setInterval(() => {\n        const pages = ['2174806159435043']\n        pages.forEach(page => emitEvent(page, 'talk-to-human', { id: page + Math.round(Math.random() * 100), first_name: 'Try ' }))\n\n    }, 12000);\n\n}\n\nexport const emitEvent = (pageID, event, data) => {\n    try {\n        // emiting the event to all sockets created by the pageID query.\n        // I am facing some issue that there are a lot of connected sockets\n        // and it seems that some of then doesn't work.\n        // for (const socketID in io.sockets.connected) {\n        //     const socket = io.sockets.connected[socketID];\n        //     if (socket.handshake.query.pageID === pageID) {\n        //         // sending to all clients in pageID room, except sender\n        //         socket.to(pageID).emit(event, data);\n        //         break;\n        //     }\n        // }\n\n        // This line works, but duplicates the messages.\n        // io.in(pageID).emit(event, data);\n\n        // Here I am storing the socketId for each pageID, but, it seems\n        // the connected socket used on connect is not working to emit events\n        // after awhile.\n        const socketID = clients[pageID];\n        if (socketID) {\n            const socket = io.sockets.connected[socketID];\n            if (socket) {\n                socket.emit(event, data);\n                logger.color('blue').log('emitted for ' + pageID)\n            }\n            else {\n                logger.color('red').log('no socket for ' + pageID)\n            }\n        } else {\n            logger.color('red').log('no socket for ' + pageID)\n        }\n    } catch (error) {\n        console.error(`Error: ${error.message}`);\n    }\n};\n"],"file":"socketController.js"}