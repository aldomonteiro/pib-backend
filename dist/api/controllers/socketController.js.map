{"version":3,"sources":["../../../src/api/controllers/socketController.js"],"names":["io","clientsWeb","clientsWhats","setupSocketIo","server","allowedOrigins","origins","origin","callback","indexOf","console","log","on","socket","originID","hasOwnProperty","user","id","logger","color","emitEventWhats","message","messenger","consume","subscribe","msg","msgJSON","JSON","parse","pageID","eventName","data","emitEvent","event","socketID","sockets","connected","emit","error","userID","userId"],"mappings":"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","sourcesContent":["import socketIo from 'socket.io';\nimport logger from 'node-color-log';\n\nimport messenger from '../../messenger';\n\nvar io;\nvar clientsWeb = {};\nvar clientsWhats = {};\n\nexport const setupSocketIo = (server, allowedOrigins) => {\n    io = socketIo(server);\n\n    io.origins((origin, callback) => {\n        if (allowedOrigins.indexOf(origin) > -1)\n            callback(null, true);\n        else {\n            console.log('>>> SOCKETCONTROLLER trying connect from ', origin);\n            return callback('Socket.io: origin not allowed', false);\n        }\n\n    });\n\n    io.on('connection', socket => {\n        socket.on('acknowledgment', originID => {\n            if (originID.hasOwnProperty('origin') && originID.origin === 'whatsapp') {\n                clientsWhats[originID.user] = socket.id;\n                logger.color('green').log('joining from whatsapp: ' + originID.user);\n                emitEventWhats(originID.user, 'notify', { user: originID.user, message: 'sadkasl' })\n            } else {\n                // this identifier is from a pageID\n                clientsWeb[originID] = socket.id;\n                logger.color('green').log('joining from web: ' + originID);\n            }\n        });\n\n        socket.on('disconnect', () => {\n            for (const id in clientsWeb) {\n                if (clientsWeb[id] === socket.id) {\n                    delete clientsWeb[id];\n                    logger.color('red').log('disconnecting from web ' + id);\n                    break;\n                }\n            }\n            for (const id in clientsWhats) {\n                if (clientsWhats[id] === socket.id) {\n                    delete clientsWhats[id];\n                    logger.color('red').log('disconnecting from whatsapp ' + id);\n                    break;\n                }\n            }\n        });\n    });\n\n    messenger.consume('redis')\n        .subscribe(msg => {\n            const msgJSON = JSON.parse(msg);\n            const { pageID, eventName, data } = msgJSON;\n            emitEvent(pageID, eventName, data);\n        });\n\n    // setInterval(() => {\n    //     const pages = ['278383016327989']\n    //     pages.forEach(page => emitEvent(page, 'talk-to-human', { id: page + Math.round(Math.random() * 100), first_name: 'Try ' }))\n\n    // }, 10000);\n\n    // setInterval(() => {\n    //     const pages = ['938611509676235']\n    //     pages.forEach(page => emitEvent(page, 'talk-to-human', { id: page + Math.round(Math.random() * 100), first_name: 'Try ' }))\n\n    // }, 9000);\n\n    // setInterval(() => {\n    //     const pages = ['307519123184673']\n    //     pages.forEach(page => emitEvent(page, 'talk-to-human', { id: page + Math.round(Math.random() * 100), first_name: 'Try ' }))\n\n    // }, 11000);\n\n    // setInterval(() => {\n    //     const pages = ['2174806159435043']\n    //     pages.forEach(page => emitEvent(page, 'talk-to-human', { id: page + Math.round(Math.random() * 100), first_name: 'Try ' }))\n\n    // }, 12000);\n\n}\n\nexport const emitEvent = (pageID, event, data) => {\n    try {\n        // emiting the event to all sockets created by the pageID query.\n        // I am facing some issue that there are a lot of connected sockets\n        // and it seems that some of then doesn't work.\n        // for (const socketID in io.sockets.connected) {\n        //     const socket = io.sockets.connected[socketID];\n        //     if (socket.handshake.query.pageID === pageID) {\n        //         // sending to all clients in pageID room, except sender\n        //         socket.to(pageID).emit(event, data);\n        //         break;\n        //     }\n        // }\n\n        // This line works, but duplicates the messages.\n        // io.in(pageID).emit(event, data);\n\n        // Here I am storing the socketId for each pageID, but, it seems\n        // the connected socket used on connect is not working to emit events\n        // after awhile.\n        const socketID = clientsWeb[pageID];\n        if (socketID) {\n            const socket = io.sockets.connected[socketID];\n            if (socket) {\n                socket.emit(event, data);\n                logger.color('blue').log('emitted for ' + pageID)\n            }\n            else {\n                logger.color('red').log('no socket for ' + pageID)\n            }\n        } else {\n            logger.color('red').log('no socket for ' + pageID)\n        }\n    } catch (error) {\n        console.error(`Error: ${error.message}`);\n    }\n};\n\nexport const emitEventWhats = (userID, event, data) => {\n    try {\n        // Here I am storing the socketId for each pageID, but, it seems\n        // the connected socket used on connect is not working to emit events\n        // after awhile.\n        const socketID = clientsWhats[userID];\n        if (socketID) {\n            const socket = io.sockets.connected[socketID];\n            if (socket) {\n                socket.emit(event, data);\n                logger.color('blue').log('emitted for ' + userID + ' with data:' + data.userId + ' ' + data.message)\n            } else {\n                logger.color('red').log('no socket for ' + userID)\n            }\n        } else {\n            logger.color('red').log('no socket for ' + userID)\n        }\n    } catch (error) {\n        console.error(`Error: ${error.message}`);\n    }\n};\n\n"],"file":"socketController.js"}