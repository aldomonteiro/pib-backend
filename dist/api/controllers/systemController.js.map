{"version":3,"sources":["../../../src/api/controllers/systemController.js"],"names":["basePageID","initialSetup","pageID","updatedPage","haveToUpdate","initialSetupFlavors","insertFlavors","initialSetupStores","insertStores","name","initialSetupSizes","insertSizes","initialSetupPricings","insertPricings","greetingText","firstResponseText","basePage","save","console","error","_newRecords","_flavors","docs","Array","forEach","element","newRec","Flavor","id","flavor","kind","toppings","pageId","push","insertMany","err","result","length","info","_sizes","Size","size","slices","split","_pricings","Pricing","sizeId","price","pageName","_stores","Store","hol_is_open","hol_open","hol_close","sun_is_open","mon_is_open","tue_is_open","wed_is_open","thu_is_open","fri_is_open","sat_is_open","sun_open","mon_open","tue_open","wed_open","thu_open","fri_open","sat_open","sun_close","mon_close","tue_close","wed_close","thu_close","fri_close","sat_close"],"mappings":"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","sourcesContent":["import Flavor from '../models/flavors';\nimport Size from '../models/sizes';\nimport Store from '../models/stores';\nimport Pricing from '../models/pricings';\nimport { getFlavors } from './flavorsController';\nimport { getSizes } from './sizesController';\nimport { getPricings } from './pricingsController';\nimport { getStores } from './storesController';\nimport { getOnePageData } from './pagesController';\n\n\nconst basePageID = \"237290183773790\"; // PÃ¡gina do Aldo\n\nexport const initialSetup = async pageID => {\n    try {\n        const updatedPage = await getOnePageData(pageID);\n\n        let haveToUpdate = false;\n\n        if (!updatedPage.initialSetupFlavors) {\n            updatedPage.initialSetupFlavors = await insertFlavors(pageID);\n            haveToUpdate = true;\n        }\n        if (!updatedPage.initialSetupStores) {\n            updatedPage.initialSetupStores = await insertStores(pageID, updatedPage.name)\n            haveToUpdate = true;\n        }\n        if (!updatedPage.initialSetupSizes) {\n            updatedPage.initialSetupSizes = await insertSizes(pageID)\n            haveToUpdate = true;\n        }\n        if (!updatedPage.initialSetupPricings) {\n            updatedPage.initialSetupPricings = await insertPricings(pageID)\n            haveToUpdate = true;\n        }\n        if (!updatedPage.greetingText || !updatedPage.firstResponseText) {\n            const basePage = await getOnePageData(basePageID);\n            updatedPage.greetingText = basePage.greetingText;\n            updatedPage.firstResponseText = basePage.firstResponseText;\n            haveToUpdate = true;\n        }\n        if (haveToUpdate)\n            await updatedPage.save();\n    } catch (error) {\n        console.error(\"Error on initial setup\", error);\n    }\n}\n\nconst insertFlavors = async pageID => {\n    let _newRecords = 0;\n\n    const _flavors = await getFlavors(basePageID);\n\n    const docs = new Array();\n    _flavors.forEach(element => {\n        const newRec = new Flavor({\n            id: element.id,\n            flavor: element.flavor,\n            kind: element.kind,\n            toppings: element.toppings,\n            pageId: pageID\n        });\n        docs.push(newRec);\n    });\n\n    await Flavor.insertMany(docs, (err, result) => {\n        if (err) {\n            console.error('Error while inserting flavors', err);\n            throw err;\n        }\n        else {\n            _newRecords = result.length;\n            console.info(`${pageID}: ${_newRecords} flavors inserted`);\n        }\n    });\n    return _newRecords;\n}\n\nconst insertSizes = async pageID => {\n    let _newRecords = 0;\n\n    const _sizes = await getSizes(basePageID);\n\n    const docs = new Array();\n    _sizes.forEach(element => {\n        const newRec = new Size({\n            id: element.id,\n            size: element.size,\n            slices: element.slices,\n            split: element.split,\n            pageId: pageID\n        });\n        docs.push(newRec);\n    });\n\n    await Size.insertMany(docs, (err, result) => {\n        if (err) {\n            console.error('Error while inserting sizes', err);\n            throw err;\n        }\n        else {\n            _newRecords = result.length;\n            console.info(`${pageID}: ${_newRecords} sizes inserted`);\n        }\n    });\n\n    return _newRecords;\n}\n\nconst insertPricings = async pageID => {\n    let _newRecords = 0;\n\n    const _pricings = await getPricings(basePageID);\n\n    const docs = new Array();\n    _pricings.forEach(element => {\n        const newRec = new Pricing({\n            id: element.id,\n            kind: element.kind,\n            sizeId: element.sizeId,\n            price: element.price,\n            pageId: pageID\n        });\n        docs.push(newRec);\n    });\n\n    await Pricing.insertMany(docs, (err, result) => {\n        if (err) {\n            console.error('Error while inserting pricings', err);\n            throw err;\n        }\n        else {\n            _newRecords = result.length;\n            console.info(`${pageID}: ${_newRecords} pricings inserted`);\n        }\n    });\n    return _newRecords;\n}\n\nconst insertStores = async (pageID, pageName) => {\n    let _newRecords = 0;\n\n    const _stores = await getStores(basePageID);\n\n    const docs = new Array();\n    _stores.forEach(element => {\n        const newRec = new Store({\n            pageId: pageID,\n            name: pageName,\n            id: element.id,\n            hol_is_open: element.hol_is_open,\n            hol_open: element.hol_open,\n            hol_close: element.hol_close,\n            sun_is_open: element.sun_is_open,\n            mon_is_open: element.mon_is_open,\n            tue_is_open: element.tue_is_open,\n            wed_is_open: element.wed_is_open,\n            thu_is_open: element.thu_is_open,\n            fri_is_open: element.fri_is_open,\n            sat_is_open: element.sat_is_open,\n            sun_open: element.sun_open,\n            mon_open: element.mon_open,\n            tue_open: element.tue_open,\n            wed_open: element.wed_open,\n            thu_open: element.thu_open,\n            fri_open: element.fri_open,\n            sat_open: element.sat_open,\n            sun_close: element.sun_close,\n            mon_close: element.mon_close,\n            tue_close: element.tue_close,\n            wed_close: element.wed_close,\n            thu_close: element.thu_close,\n            fri_close: element.fri_close,\n            sat_close: element.sat_close,\n        });\n        docs.push(newRec);\n    });\n\n    await Store.insertMany(docs, (err, result) => {\n        if (err) {\n            console.error('Error while inserting stores', err);\n            throw err;\n        }\n        else {\n            _newRecords = result.length;\n            console.info(`${_newRecords} stores inserted`);\n        }\n    });\n\n    return _newRecords;\n}"],"file":"systemController.js"}