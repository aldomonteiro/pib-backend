{"version":3,"sources":["../../../src/api/controllers/systemController.js"],"names":["initialSetup","pageID","dotenv","config","env","process","NODE_ENV","basePageID","DEV_PAGE_BASE_ID","PRD_PAGE_BASE_ID","page","console","info","haveToUpdate","initialSetupCategories","insertCategories","initialSetupFlavors","insertFlavors","initialSetupStores","insertStores","name","initialSetupSizes","insertSizes","initialSetupPricings","insertPricings","initialSetupToppings","insertToppings","greetingText","firstResponseText","basePage","save","error","_newRecords","_flavors","docs","element","newRec","Flavor","id","flavor","categoryId","price_by_size","price","toppings","pageId","push","length","insertMany","insertFlavorsErr","_sizes","Size","size","slices","split","insertSizesErr","_docs","Category","is_pizza","insertBeveragesErr","Topping","topping","insertToppingsErr","_pricings","Pricing","sizeId","insertPricingsErr","pageName","_stores","Store","hol_is_open","hol_open","hol_close","sun_is_open","mon_is_open","tue_is_open","wed_is_open","thu_is_open","fri_is_open","sat_is_open","sun_open","mon_open","tue_open","wed_open","thu_open","fri_open","sat_open","sun_close","mon_close","tue_close","wed_close","thu_close","fri_close","sat_close","delivery_fees","catalog_url1","catalog_url2","payment_types","insertStoresErr"],"mappings":"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","sourcesContent":["import Flavor from '../models/flavors';\nimport Size from '../models/sizes';\nimport Category from '../models/categories';\nimport Topping from '../models/toppings';\nimport Store from '../models/stores';\nimport Pricing from '../models/pricings';\nimport { getFlavors } from './flavorsController';\nimport { getSizes } from './sizesController';\nimport dotenv from 'dotenv';\nimport { getToppingsFull } from './toppingsController';\nimport { getPricings } from './pricingsController';\nimport { getStores } from './storesController';\nimport { getOnePageData } from './pagesController';\nimport { getCategories } from './categoriesController';\n\nexport const initialSetup = async pageID => {\n    try {\n        dotenv.config();\n\n        const env = process.env.NODE_ENV || 'production';\n        let basePageID = process.env.DEV_PAGE_BASE_ID; // Página do Aldo\n        if (env === 'production')\n            basePageID = process.env.PRD_PAGE_BASE_ID; // Pizzaibot\n\n        const page = await getOnePageData(pageID);\n\n        console.info(`env:${env}, basePageID:${basePageID}`);\n\n        if (basePageID !== pageID) { // only updates when the page is not the basePage\n\n            let haveToUpdate = false;\n            if (page) {\n                if (!page.initialSetupCategories) {\n                    page.initialSetupCategories = await insertCategories(pageID, basePageID);\n                    haveToUpdate = true;\n                }\n                if (!page.initialSetupFlavors) {\n                    page.initialSetupFlavors = await insertFlavors(pageID, basePageID);\n                    haveToUpdate = true;\n                }\n                if (!page.initialSetupStores) {\n                    page.initialSetupStores = await insertStores(pageID, page.name, basePageID);\n                    haveToUpdate = true;\n                }\n                if (!page.initialSetupSizes) {\n                    page.initialSetupSizes = await insertSizes(pageID, basePageID);\n                    haveToUpdate = true;\n                }\n                if (!page.initialSetupPricings) {\n                    page.initialSetupPricings = await insertPricings(pageID, basePageID);\n                    haveToUpdate = true;\n                }\n                if (!page.initialSetupToppings) {\n                    page.initialSetupToppings = await insertToppings(pageID, basePageID)\n                    haveToUpdate = true;\n                }\n                if (!page.greetingText || !page.firstResponseText) {\n                    const basePage = await getOnePageData(basePageID);\n                    page.greetingText = basePage.greetingText;\n                    page.firstResponseText = basePage.firstResponseText;\n                    haveToUpdate = true;\n                }\n                if (haveToUpdate)\n                    await page.save();\n\n            }\n        }\n        return page;\n    } catch (error) {\n        console.error('Error on initial setup', error);\n    }\n}\n\nconst insertFlavors = async (pageID, basePageID) => {\n    let _newRecords = 0;\n\n    try {\n\n        const _flavors = await getFlavors(basePageID);\n\n        const docs = [];\n\n        for (const element of _flavors) {\n            const newRec = new Flavor({\n                id: element.id,\n                flavor: element.flavor,\n                categoryId: element.categoryId,\n                price_by_size: element.price_by_size,\n                price: element.price,\n                toppings: element.toppings,\n                pageId: pageID,\n            });\n            docs.push(newRec);\n        }\n\n        if (docs.length > 0) {\n            await Flavor.insertMany(docs); // => {\n            _newRecords = docs.length;\n        }\n    } catch (insertFlavorsErr) {\n        // ignoring err..\n        console.error({ insertFlavorsErr });\n    }\n\n    return _newRecords;\n}\n\nconst insertSizes = async (pageID, basePageID) => {\n    let _newRecords = 0;\n    try {\n        const _sizes = await getSizes(basePageID);\n\n        const docs = [];\n        for (const element of _sizes) {\n            const newRec = new Size({\n                id: element.id,\n                size: element.size,\n                slices: element.slices,\n                split: element.split,\n                pageId: pageID,\n            });\n            docs.push(newRec);\n        }\n\n        if (docs.length > 0) {\n            await Size.insertMany(docs);\n            _newRecords = docs.length;\n        }\n    } catch (insertSizesErr) {\n        // ignoring err..\n        console.error({ insertSizesErr });\n    }\n\n    return _newRecords;\n}\n\nconst insertCategories = async (pageID, basePageID) => {\n    let _newRecords = 0;\n    try {\n        const _docs = await getCategories(basePageID);\n\n        const docs = [];\n        for (const element of _docs) {\n            const newRec = new Category({\n                id: element.id,\n                name: element.name,\n                price_by_size: element.price_by_size,\n                is_pizza: element.is_pizza,\n                pageId: pageID,\n            });\n            docs.push(newRec);\n        }\n\n        if (docs.length > 0) {\n            await Category.insertMany(docs);\n            _newRecords = docs.length;\n        }\n    } catch (insertBeveragesErr) {\n        // ignoring err..\n        console.error({ insertBeveragesErr });\n    }\n\n    return _newRecords;\n}\n\nconst insertToppings = async (pageID, basePageID) => {\n    let _newRecords = 0;\n\n    try {\n        const _docs = await getToppingsFull(basePageID);\n\n        const docs = [];\n        for (const element of _docs) {\n            const newRec = new Topping({\n                id: element.id,\n                topping: element.topping,\n                pageId: pageID,\n            });\n            docs.push(newRec);\n        }\n\n        if (docs.length > 0) {\n            await Topping.insertMany(docs);\n            _newRecords = docs.length;\n        }\n    } catch (insertToppingsErr) {\n        // ignoring err..\n        console.error({ insertToppingsErr });\n    }\n\n    return _newRecords;\n}\n\nconst insertPricings = async (pageID, basePageID) => {\n    let _newRecords = 0;\n\n    try {\n        const _pricings = await getPricings(basePageID);\n\n        const docs = [];\n        for (const element of _pricings) {\n            const newRec = new Pricing({\n                id: element.id,\n                categoryId: element.categoryId,\n                sizeId: element.sizeId,\n                price: element.price,\n                pageId: pageID,\n            });\n            docs.push(newRec);\n        }\n\n        if (docs.length > 0) {\n            await Pricing.insertMany(docs);\n            _newRecords = docs.length;\n        }\n    } catch (insertPricingsErr) {\n        // ignoring err..\n        console.error({ insertPricingsErr });\n    }\n    return _newRecords;\n}\n\nconst insertStores = async (pageID, pageName, basePageID) => {\n    let _newRecords = 0;\n    try {\n        const _stores = await getStores(basePageID);\n\n        const docs = [];\n        for (const element of _stores) {\n            const newRec = new Store({\n                pageId: pageID,\n                name: pageName,\n                id: element.id,\n                hol_is_open: element.hol_is_open,\n                hol_open: element.hol_open,\n                hol_close: element.hol_close,\n                sun_is_open: element.sun_is_open,\n                mon_is_open: element.mon_is_open,\n                tue_is_open: element.tue_is_open,\n                wed_is_open: element.wed_is_open,\n                thu_is_open: element.thu_is_open,\n                fri_is_open: element.fri_is_open,\n                sat_is_open: element.sat_is_open,\n                sun_open: element.sun_open,\n                mon_open: element.mon_open,\n                tue_open: element.tue_open,\n                wed_open: element.wed_open,\n                thu_open: element.thu_open,\n                fri_open: element.fri_open,\n                sat_open: element.sat_open,\n                sun_close: element.sun_close,\n                mon_close: element.mon_close,\n                tue_close: element.tue_close,\n                wed_close: element.wed_close,\n                thu_close: element.thu_close,\n                fri_close: element.fri_close,\n                sat_close: element.sat_close,\n                delivery_fees: element.delivery_fees,\n                catalog_url1: element.catalog_url1,\n                catalog_url2: element.catalog_url2,\n                payment_types: element.payment_types,\n            });\n            docs.push(newRec);\n        }\n\n        if (docs.length > 0) {\n            await Store.insertMany(docs);\n            _newRecords = docs.length;\n        }\n    } catch (insertStoresErr) {\n        // ignoring err..\n        console.error({ insertStoresErr });\n    }\n\n    return _newRecords;\n}\n"],"file":"systemController.js"}