{"version":3,"sources":["../../../src/api/controllers/systemController.js"],"names":["basePageID","initialSetup","pageID","updatedPage","haveToUpdate","initialSetupFlavors","insertFlavors","initialSetupStores","insertStores","name","initialSetupSizes","insertSizes","initialSetupPricings","insertPricings","initialSetupBeverages","insertBeverages","greetingText","firstResponseText","basePage","save","console","error","_newRecords","_flavors","docs","Array","element","newRec","Flavor","id","flavor","kind","toppings","pageId","push","insertMany","err","result","length","info","_sizes","Size","size","slices","split","_docs","Beverage","price","_pricings","Pricing","sizeId","pageName","_stores","Store","hol_is_open","hol_open","hol_close","sun_is_open","mon_is_open","tue_is_open","wed_is_open","thu_is_open","fri_is_open","sat_is_open","sun_open","mon_open","tue_open","wed_open","thu_open","fri_open","sat_open","sun_close","mon_close","tue_close","wed_close","thu_close","fri_close","sat_close"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAGA,IAAMA,UAAU,GAAG,iBAAnB,C,CAAsC;;AAE/B,IAAMC,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,iBAAMC,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEM,qCAAeA,MAAf,CAFN;;AAAA;AAEdC,YAAAA,WAFc;AAIhBC,YAAAA,YAJgB,GAID,KAJC;;AAAA,iBAKhBD,WALgB;AAAA;AAAA;AAAA;;AAAA,gBAMXA,WAAW,CAACE,mBAND;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAO4BC,aAAa,CAACJ,MAAD,CAPzC;;AAAA;AAOZC,YAAAA,WAAW,CAACE,mBAPA;AAQZD,YAAAA,YAAY,GAAG,IAAf;;AARY;AAAA,gBAUXD,WAAW,CAACI,kBAVD;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAW2BC,YAAY,CAACN,MAAD,EAASC,WAAW,CAACM,IAArB,CAXvC;;AAAA;AAWZN,YAAAA,WAAW,CAACI,kBAXA;AAYZH,YAAAA,YAAY,GAAG,IAAf;;AAZY;AAAA,gBAcXD,WAAW,CAACO,iBAdD;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAe0BC,WAAW,CAACT,MAAD,CAfrC;;AAAA;AAeZC,YAAAA,WAAW,CAACO,iBAfA;AAgBZN,YAAAA,YAAY,GAAG,IAAf;;AAhBY;AAAA,gBAkBXD,WAAW,CAACS,oBAlBD;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAmB6BC,cAAc,CAACX,MAAD,CAnB3C;;AAAA;AAmBZC,YAAAA,WAAW,CAACS,oBAnBA;AAoBZR,YAAAA,YAAY,GAAG,IAAf;;AApBY;AAAA,gBAsBXD,WAAW,CAACW,qBAtBD;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAuB8BC,eAAe,CAACb,MAAD,CAvB7C;;AAAA;AAuBZC,YAAAA,WAAW,CAACW,qBAvBA;AAwBZV,YAAAA,YAAY,GAAG,IAAf;;AAxBY;AAAA,kBA0BZ,CAACD,WAAW,CAACa,YAAb,IAA6B,CAACb,WAAW,CAACc,iBA1B9B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA2BW,qCAAejB,UAAf,CA3BX;;AAAA;AA2BNkB,YAAAA,QA3BM;AA4BZf,YAAAA,WAAW,CAACa,YAAZ,GAA2BE,QAAQ,CAACF,YAApC;AACAb,YAAAA,WAAW,CAACc,iBAAZ,GAAgCC,QAAQ,CAACD,iBAAzC;AACAb,YAAAA,YAAY,GAAG,IAAf;;AA9BY;AAAA,iBAgCZA,YAhCY;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAiCND,WAAW,CAACgB,IAAZ,EAjCM;;AAAA;AAAA,6CAmCThB,WAnCS;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAsCpBiB,YAAAA,OAAO,CAACC,KAAR,CAAc,wBAAd;;AAtCoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZpB,YAAY;AAAA;AAAA;AAAA,GAAlB;;;;AA0CP,IAAMK,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAMJ,MAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACdoB,YAAAA,WADc,GACA,CADA;AAAA;AAAA,mBAGK,mCAAWtB,UAAX,CAHL;;AAAA;AAGZuB,YAAAA,QAHY;AAKZC,YAAAA,IALY,GAKL,IAAIC,KAAJ,EALK;AAAA;AAAA;AAAA;AAAA;;AAOlB,6BAAsBF,QAAtB,uHAAgC;AAArBG,cAAAA,OAAqB;AACtBC,cAAAA,MADsB,GACb,IAAIC,iBAAJ,CAAW;AACtBC,gBAAAA,EAAE,EAAEH,OAAO,CAACG,EADU;AAEtBC,gBAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFM;AAGtBC,gBAAAA,IAAI,EAAEL,OAAO,CAACK,IAHQ;AAItBC,gBAAAA,QAAQ,EAAEN,OAAO,CAACM,QAJI;AAKtBC,gBAAAA,MAAM,EAAE/B;AALc,eAAX,CADa;AAQ5BsB,cAAAA,IAAI,CAACU,IAAL,CAAUP,MAAV;AACH;;AAhBiB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAkBZC,kBAAOO,UAAP,CAAkBX,IAAlB,EAAwB,UAACY,GAAD,EAAMC,MAAN,EAAiB;AAC3C,kBAAID,GAAJ,EAAS;AACLhB,gBAAAA,OAAO,CAACC,KAAR,CAAc,+BAAd,EAA+Ce,GAA/C;AACA,sBAAMA,GAAN;AACH,eAHD,MAIK;AACDd,gBAAAA,WAAW,GAAGe,MAAM,CAACC,MAArB;AACAlB,gBAAAA,OAAO,CAACmB,IAAR,WAAgBrC,MAAhB,eAA2BoB,WAA3B;AACH;AACJ,aATK,CAlBY;;AAAA;AAAA,8CA4BXA,WA5BW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbhB,aAAa;AAAA;AAAA;AAAA,GAAnB;;AA+BA,IAAMK,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAMT,MAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACZoB,YAAAA,WADY,GACE,CADF;AAAA;AAAA,mBAGK,+BAAStB,UAAT,CAHL;;AAAA;AAGVwC,YAAAA,MAHU;AAKVhB,YAAAA,IALU,GAKH,IAAIC,KAAJ,EALG;AAAA;AAAA;AAAA;AAAA;;AAMhB,8BAAsBe,MAAtB,2HAA8B;AAAnBd,cAAAA,OAAmB;AACpBC,cAAAA,MADoB,GACX,IAAIc,eAAJ,CAAS;AACpBZ,gBAAAA,EAAE,EAAEH,OAAO,CAACG,EADQ;AAEpBa,gBAAAA,IAAI,EAAEhB,OAAO,CAACgB,IAFM;AAGpBC,gBAAAA,MAAM,EAAEjB,OAAO,CAACiB,MAHI;AAIpBC,gBAAAA,KAAK,EAAElB,OAAO,CAACkB,KAJK;AAKpBX,gBAAAA,MAAM,EAAE/B;AALY,eAAT,CADW;AAQ1BsB,cAAAA,IAAI,CAACU,IAAL,CAAUP,MAAV;AACH;;AAfe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAiBVc,gBAAKN,UAAL,CAAgBX,IAAhB,EAAsB,UAACY,GAAD,EAAMC,MAAN,EAAiB;AACzC,kBAAID,GAAJ,EAAS;AACLhB,gBAAAA,OAAO,CAACC,KAAR,CAAc,6BAAd,EAA6Ce,GAA7C;AACA,sBAAMA,GAAN;AACH,eAHD,MAIK;AACDd,gBAAAA,WAAW,GAAGe,MAAM,CAACC,MAArB;AACAlB,gBAAAA,OAAO,CAACmB,IAAR,WAAgBrC,MAAhB,eAA2BoB,WAA3B;AACH;AACJ,aATK,CAjBU;;AAAA;AAAA,8CA4BTA,WA5BS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXX,WAAW;AAAA;AAAA;AAAA,GAAjB;;AA+BA,IAAMI,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAMb,MAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChBoB,YAAAA,WADgB,GACF,CADE;AAAA;AAAA,mBAGA,uCAAatB,UAAb,CAHA;;AAAA;AAGd6C,YAAAA,KAHc;AAKdrB,YAAAA,IALc,GAKP,IAAIC,KAAJ,EALO;AAAA;AAAA;AAAA;AAAA;;AAMpB,8BAAsBoB,KAAtB,2HAA6B;AAAlBnB,cAAAA,OAAkB;AACnBC,cAAAA,MADmB,GACV,IAAImB,kBAAJ,CAAa;AACxBjB,gBAAAA,EAAE,EAAEH,OAAO,CAACG,EADY;AAExBE,gBAAAA,IAAI,EAAEL,OAAO,CAACK,IAFU;AAGxBtB,gBAAAA,IAAI,EAAEiB,OAAO,CAACjB,IAHU;AAIxBsC,gBAAAA,KAAK,EAAErB,OAAO,CAACqB,KAJS;AAKxBd,gBAAAA,MAAM,EAAE/B;AALgB,eAAb,CADU;AAQzBsB,cAAAA,IAAI,CAACU,IAAL,CAAUP,MAAV;AACH;;AAfmB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAiBdmB,mBAASX,UAAT,CAAoBX,IAApB,EAA0B,UAACY,GAAD,EAAMC,MAAN,EAAiB;AAC7C,kBAAID,GAAJ,EAAS;AACLhB,gBAAAA,OAAO,CAACC,KAAR,CAAc,iCAAd,EAAiDe,GAAjD;AACA,sBAAMA,GAAN;AACH,eAHD,MAIK;AACDd,gBAAAA,WAAW,GAAGe,MAAM,CAACC,MAArB;AACAlB,gBAAAA,OAAO,CAACmB,IAAR,WAAgBrC,MAAhB,eAA2BoB,WAA3B;AACH;AACJ,aATK,CAjBc;;AAAA;AAAA,8CA4BbA,WA5Ba;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfP,eAAe;AAAA;AAAA;AAAA,GAArB;;AA+BA,IAAMF,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAMX,MAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACfoB,YAAAA,WADe,GACD,CADC;AAAA;AAAA,mBAGK,qCAAYtB,UAAZ,CAHL;;AAAA;AAGbgD,YAAAA,SAHa;AAKbxB,YAAAA,IALa,GAKN,IAAIC,KAAJ,EALM;AAAA;AAAA;AAAA;AAAA;;AAMnB,8BAAsBuB,SAAtB,2HAAiC;AAAtBtB,cAAAA,OAAsB;AACvBC,cAAAA,MADuB,GACd,IAAIsB,kBAAJ,CAAY;AACvBpB,gBAAAA,EAAE,EAAEH,OAAO,CAACG,EADW;AAEvBE,gBAAAA,IAAI,EAAEL,OAAO,CAACK,IAFS;AAGvBmB,gBAAAA,MAAM,EAAExB,OAAO,CAACwB,MAHO;AAIvBH,gBAAAA,KAAK,EAAErB,OAAO,CAACqB,KAJQ;AAKvBd,gBAAAA,MAAM,EAAE/B;AALe,eAAZ,CADc;AAQ7BsB,cAAAA,IAAI,CAACU,IAAL,CAAUP,MAAV;AACH;;AAfkB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAiBbsB,mBAAQd,UAAR,CAAmBX,IAAnB,EAAyB,UAACY,GAAD,EAAMC,MAAN,EAAiB;AAC5C,kBAAID,GAAJ,EAAS;AACLhB,gBAAAA,OAAO,CAACC,KAAR,CAAc,gCAAd,EAAgDe,GAAhD;AACA,sBAAMA,GAAN;AACH,eAHD,MAIK;AACDd,gBAAAA,WAAW,GAAGe,MAAM,CAACC,MAArB;AACAlB,gBAAAA,OAAO,CAACmB,IAAR,WAAgBrC,MAAhB,eAA2BoB,WAA3B;AACH;AACJ,aATK,CAjBa;;AAAA;AAAA,8CA2BZA,WA3BY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdT,cAAc;AAAA;AAAA;AAAA,GAApB;;AA8BA,IAAML,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAON,MAAP,EAAeiD,QAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AACb7B,YAAAA,WADa,GACC,CADD;AAAA;AAAA,mBAGK,iCAAUtB,UAAV,CAHL;;AAAA;AAGXoD,YAAAA,OAHW;AAKX5B,YAAAA,IALW,GAKJ,IAAIC,KAAJ,EALI;AAAA;AAAA;AAAA;AAAA;;AAMjB,8BAAsB2B,OAAtB,2HAA+B;AAApB1B,cAAAA,OAAoB;AACrBC,cAAAA,MADqB,GACZ,IAAI0B,gBAAJ,CAAU;AACrBpB,gBAAAA,MAAM,EAAE/B,MADa;AAErBO,gBAAAA,IAAI,EAAE0C,QAFe;AAGrBtB,gBAAAA,EAAE,EAAEH,OAAO,CAACG,EAHS;AAIrByB,gBAAAA,WAAW,EAAE5B,OAAO,CAAC4B,WAJA;AAKrBC,gBAAAA,QAAQ,EAAE7B,OAAO,CAAC6B,QALG;AAMrBC,gBAAAA,SAAS,EAAE9B,OAAO,CAAC8B,SANE;AAOrBC,gBAAAA,WAAW,EAAE/B,OAAO,CAAC+B,WAPA;AAQrBC,gBAAAA,WAAW,EAAEhC,OAAO,CAACgC,WARA;AASrBC,gBAAAA,WAAW,EAAEjC,OAAO,CAACiC,WATA;AAUrBC,gBAAAA,WAAW,EAAElC,OAAO,CAACkC,WAVA;AAWrBC,gBAAAA,WAAW,EAAEnC,OAAO,CAACmC,WAXA;AAYrBC,gBAAAA,WAAW,EAAEpC,OAAO,CAACoC,WAZA;AAarBC,gBAAAA,WAAW,EAAErC,OAAO,CAACqC,WAbA;AAcrBC,gBAAAA,QAAQ,EAAEtC,OAAO,CAACsC,QAdG;AAerBC,gBAAAA,QAAQ,EAAEvC,OAAO,CAACuC,QAfG;AAgBrBC,gBAAAA,QAAQ,EAAExC,OAAO,CAACwC,QAhBG;AAiBrBC,gBAAAA,QAAQ,EAAEzC,OAAO,CAACyC,QAjBG;AAkBrBC,gBAAAA,QAAQ,EAAE1C,OAAO,CAAC0C,QAlBG;AAmBrBC,gBAAAA,QAAQ,EAAE3C,OAAO,CAAC2C,QAnBG;AAoBrBC,gBAAAA,QAAQ,EAAE5C,OAAO,CAAC4C,QApBG;AAqBrBC,gBAAAA,SAAS,EAAE7C,OAAO,CAAC6C,SArBE;AAsBrBC,gBAAAA,SAAS,EAAE9C,OAAO,CAAC8C,SAtBE;AAuBrBC,gBAAAA,SAAS,EAAE/C,OAAO,CAAC+C,SAvBE;AAwBrBC,gBAAAA,SAAS,EAAEhD,OAAO,CAACgD,SAxBE;AAyBrBC,gBAAAA,SAAS,EAAEjD,OAAO,CAACiD,SAzBE;AA0BrBC,gBAAAA,SAAS,EAAElD,OAAO,CAACkD,SA1BE;AA2BrBC,gBAAAA,SAAS,EAAEnD,OAAO,CAACmD;AA3BE,eAAV,CADY;AA8B3BrD,cAAAA,IAAI,CAACU,IAAL,CAAUP,MAAV;AACH;;AArCgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAuCX0B,iBAAMlB,UAAN,CAAiBX,IAAjB,EAAuB,UAACY,GAAD,EAAMC,MAAN,EAAiB;AAC1C,kBAAID,GAAJ,EAAS;AACLhB,gBAAAA,OAAO,CAACC,KAAR,CAAc,8BAAd,EAA8Ce,GAA9C;AACA,sBAAMA,GAAN;AACH,eAHD,MAIK;AACDd,gBAAAA,WAAW,GAAGe,MAAM,CAACC,MAArB;AACAlB,gBAAAA,OAAO,CAACmB,IAAR,WAAgBjB,WAAhB;AACH;AACJ,aATK,CAvCW;;AAAA;AAAA,8CAkDVA,WAlDU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZd,YAAY;AAAA;AAAA;AAAA,GAAlB","sourcesContent":["import Flavor from '../models/flavors';\nimport Size from '../models/sizes';\nimport Beverage from '../models/beverages';\nimport Store from '../models/stores';\nimport Pricing from '../models/pricings';\nimport { getFlavors } from './flavorsController';\nimport { getSizes } from './sizesController';\nimport { getBeverages } from './beveragesController';\nimport { getPricings } from './pricingsController';\nimport { getStores } from './storesController';\nimport { getOnePageData } from './pagesController';\n\n\nconst basePageID = \"237290183773790\"; // PÃ¡gina do Aldo\n\nexport const initialSetup = async pageID => {\n    try {\n        const updatedPage = await getOnePageData(pageID);\n\n        let haveToUpdate = false;\n        if (updatedPage) {\n            if (!updatedPage.initialSetupFlavors) {\n                updatedPage.initialSetupFlavors = await insertFlavors(pageID);\n                haveToUpdate = true;\n            }\n            if (!updatedPage.initialSetupStores) {\n                updatedPage.initialSetupStores = await insertStores(pageID, updatedPage.name)\n                haveToUpdate = true;\n            }\n            if (!updatedPage.initialSetupSizes) {\n                updatedPage.initialSetupSizes = await insertSizes(pageID)\n                haveToUpdate = true;\n            }\n            if (!updatedPage.initialSetupPricings) {\n                updatedPage.initialSetupPricings = await insertPricings(pageID)\n                haveToUpdate = true;\n            }\n            if (!updatedPage.initialSetupBeverages) {\n                updatedPage.initialSetupBeverages = await insertBeverages(pageID)\n                haveToUpdate = true;\n            }\n            if (!updatedPage.greetingText || !updatedPage.firstResponseText) {\n                const basePage = await getOnePageData(basePageID);\n                updatedPage.greetingText = basePage.greetingText;\n                updatedPage.firstResponseText = basePage.firstResponseText;\n                haveToUpdate = true;\n            }\n            if (haveToUpdate)\n                await updatedPage.save();\n\n            return updatedPage;\n        }\n    } catch (error) {\n        console.error(\"Error on initial setup\", error);\n    }\n}\n\nconst insertFlavors = async pageID => {\n    let _newRecords = 0;\n\n    const _flavors = await getFlavors(basePageID);\n\n    const docs = new Array();\n\n    for (const element of _flavors) {\n        const newRec = new Flavor({\n            id: element.id,\n            flavor: element.flavor,\n            kind: element.kind,\n            toppings: element.toppings,\n            pageId: pageID\n        });\n        docs.push(newRec);\n    }\n\n    await Flavor.insertMany(docs, (err, result) => {\n        if (err) {\n            console.error('Error while inserting flavors', err);\n            throw err;\n        }\n        else {\n            _newRecords = result.length;\n            console.info(`${pageID}: ${_newRecords} flavors inserted`);\n        }\n    });\n    return _newRecords;\n}\n\nconst insertSizes = async pageID => {\n    let _newRecords = 0;\n\n    const _sizes = await getSizes(basePageID);\n\n    const docs = new Array();\n    for (const element of _sizes) {\n        const newRec = new Size({\n            id: element.id,\n            size: element.size,\n            slices: element.slices,\n            split: element.split,\n            pageId: pageID\n        });\n        docs.push(newRec);\n    }\n\n    await Size.insertMany(docs, (err, result) => {\n        if (err) {\n            console.error('Error while inserting sizes', err);\n            throw err;\n        }\n        else {\n            _newRecords = result.length;\n            console.info(`${pageID}: ${_newRecords} sizes inserted`);\n        }\n    });\n\n    return _newRecords;\n}\n\nconst insertBeverages = async pageID => {\n    let _newRecords = 0;\n\n    const _docs = await getBeverages(basePageID);\n\n    const docs = new Array();\n    for (const element of _docs) {\n        const newRec = new Beverage({\n            id: element.id,\n            kind: element.kind,\n            name: element.name,\n            price: element.price,\n            pageId: pageID\n        });\n        docs.push(newRec);\n    }\n\n    await Beverage.insertMany(docs, (err, result) => {\n        if (err) {\n            console.error('Error while inserting beverages', err);\n            throw err;\n        }\n        else {\n            _newRecords = result.length;\n            console.info(`${pageID}: ${_newRecords} beverages inserted`);\n        }\n    });\n\n    return _newRecords;\n}\n\nconst insertPricings = async pageID => {\n    let _newRecords = 0;\n\n    const _pricings = await getPricings(basePageID);\n\n    const docs = new Array();\n    for (const element of _pricings) {\n        const newRec = new Pricing({\n            id: element.id,\n            kind: element.kind,\n            sizeId: element.sizeId,\n            price: element.price,\n            pageId: pageID\n        });\n        docs.push(newRec);\n    }\n\n    await Pricing.insertMany(docs, (err, result) => {\n        if (err) {\n            console.error('Error while inserting pricings', err);\n            throw err;\n        }\n        else {\n            _newRecords = result.length;\n            console.info(`${pageID}: ${_newRecords} pricings inserted`);\n        }\n    });\n    return _newRecords;\n}\n\nconst insertStores = async (pageID, pageName) => {\n    let _newRecords = 0;\n\n    const _stores = await getStores(basePageID);\n\n    const docs = new Array();\n    for (const element of _stores) {\n        const newRec = new Store({\n            pageId: pageID,\n            name: pageName,\n            id: element.id,\n            hol_is_open: element.hol_is_open,\n            hol_open: element.hol_open,\n            hol_close: element.hol_close,\n            sun_is_open: element.sun_is_open,\n            mon_is_open: element.mon_is_open,\n            tue_is_open: element.tue_is_open,\n            wed_is_open: element.wed_is_open,\n            thu_is_open: element.thu_is_open,\n            fri_is_open: element.fri_is_open,\n            sat_is_open: element.sat_is_open,\n            sun_open: element.sun_open,\n            mon_open: element.mon_open,\n            tue_open: element.tue_open,\n            wed_open: element.wed_open,\n            thu_open: element.thu_open,\n            fri_open: element.fri_open,\n            sat_open: element.sat_open,\n            sun_close: element.sun_close,\n            mon_close: element.mon_close,\n            tue_close: element.tue_close,\n            wed_close: element.wed_close,\n            thu_close: element.thu_close,\n            fri_close: element.fri_close,\n            sat_close: element.sat_close,\n        });\n        docs.push(newRec);\n    }\n\n    await Store.insertMany(docs, (err, result) => {\n        if (err) {\n            console.error('Error while inserting stores', err);\n            throw err;\n        }\n        else {\n            _newRecords = result.length;\n            console.info(`${_newRecords} stores inserted`);\n        }\n    });\n\n    return _newRecords;\n}"],"file":"systemController.js"}