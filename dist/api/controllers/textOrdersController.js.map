{"version":3,"sources":["../../../src/api/controllers/textOrdersController.js"],"names":["ORDERSTATUS_PENDING","ORDERSTATUS_CONFIRMED","ORDERSTATUS_VIEWED","ORDERSTATUS_ACCEPTED","ORDERSTATUS_PRINTED","ORDERSTATUS_DELIVERED","ORDERSTATUS_REJECTED","ORDERSTATUS_CANCELLED","text_order_get_all","req","res","sortObj","query","sort","rangeObj","range","filterObj","filter","queryParam","currentUser","activePage","$gte","filterField","length","i","value","filterValues","Array","isArray","dateIni","DateTime","fromISO","set","hour","minute","second","setZone","dateEnd","invalid","toISO","$lt","$in","date","endsWith","replace","rezonedIni","rezonedEnd","plus","days","Object","values","TextOrder","find","exec","findError","result","console","error","status","json","message","_rangeIni","_rangeEnd","offset","limit","_totalCount","ordersArray","asideTotalAmount","asideTotalItems","order","total","textOrder","deliverAt","deliverTime","fromJSDate","confirmedAt","minutes","jsonOrder","id","pageId","customerId","userId","phone","details","status2","status3","createdAt","updatedAt","deliveredAt","push","setHeader","util","format","orderGetAllErr","text_order_get_one","params","getOrderJson","orderGetOneError","text_order_update","body","operation","findOne","doc","rejectionExplanation","sent_reject_notification","local","rejection_reason","source","sent_shipping_notification","info","save","deleteManyTextOrders","pageID","deleteMany","orderId","customer","customerName","first_name","last_name","getOrderJsonErr","Error","updateOrder","orderData","user","confirmOrder","customerID","customerData","profile_pic","select","resultLastId","record","updateTextOrderErr","getOrderPending","_order","headerOrder","getLastOrder","orders","getOrdersCustomerStat","total_spent","nb_orders","first_order","Date","now","last_order","cancelOrder","findOneAndRemove","err","cancelItems"],"mappings":"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","sourcesContent":["import TextOrder from '../models/texto_orders';\nimport util from 'util';\nimport { updateCustomer, getCustomerById } from './customersController';\nimport { getStoreData, calcDeliveryFee } from './storesController';\nimport {\n    configSortQuery, configRangeQueryNew,\n    configFilterQueryMultiple, distanceBetweenCoordinates,\n} from '../util/util';\nimport { DateTime } from 'luxon';\n// import { Bot, Elements } from 'facebook-messenger-bot';\n// import { getOnePageToken } from './pagesController';\nimport { sendShippingNotification, sendRejectionNotification } from '../bot/botController';\nimport { emitEvent } from './redisController';\n\nexport const ORDERSTATUS_PENDING = 0;\nexport const ORDERSTATUS_CONFIRMED = 1;\nexport const ORDERSTATUS_VIEWED = 2;\nexport const ORDERSTATUS_ACCEPTED = 3;\nexport const ORDERSTATUS_PRINTED = 4;\nexport const ORDERSTATUS_DELIVERED = 5;\nexport const ORDERSTATUS_REJECTED = 8;\nexport const ORDERSTATUS_CANCELLED = 9;\n\n\n// List all orders\n// TODO: use filters in the query req.query\nexport const text_order_get_all = async (req, res) => {\n    try {\n        const sortObj = configSortQuery(req.query.sort);\n        const rangeObj = configRangeQueryNew(req.query.range);\n        const filterObj = configFilterQueryMultiple(req.query.filter);\n\n        let queryParam = {};\n        if (req.currentUser.activePage) {\n            queryParam['pageId'] = req.currentUser.activePage;\n        }\n\n        queryParam['status'] = { $gte: ORDERSTATUS_CONFIRMED };\n\n        if (!sortObj) {\n            sortObj['createdAt'] = 'DESC';\n        }\n\n        if (filterObj && filterObj.filterField && filterObj.filterField.length) {\n            for (let i = 0; i < filterObj.filterField.length; i++) {\n                let filter = filterObj.filterField[i];\n                const value = filterObj.filterValues[i];\n                if (Array.isArray(value)) {\n                    if (value.length === 2) {\n                        const dateIni = DateTime.fromISO(value[0]).set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                        const dateEnd = DateTime.fromISO(value[1]).set({ hour: 23, minute: 59, second: 59 }).setZone('UTC');\n\n                        if (!dateIni.invalid && !dateEnd.invalid)// is date\n                            queryParam[filter] = { $gte: dateIni.toISO(), $lt: dateEnd.toISO() };\n                        else\n                            queryParam[filter] = { $in: value };\n                    } else\n                        queryParam[filter] = { $in: value };\n                } else {\n                    const date = DateTime.fromISO(value);\n                    if (!date.invalid) { // is a date\n                        // date comes with the current time, so, I am setting it to midnight.\n                        // Mongoose stores data on GMT timezone\n                        if (filter.endsWith('_rangestart')) {\n                            filter = filter.replace('_rangestart', '');\n                            const rezonedIni = date.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                            queryParam[filter] = { $gte: rezonedIni.toISO() };\n                        } else if (filter.endsWith('_rangeend')) {\n                            filter = filter.replace('_rangeend', '');\n                            const rezonedIni = date.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                            const rezonedEnd = rezonedIni.plus({ days: 1 });\n                            if (queryParam[filter])\n                                queryParam[filter] = { $gte: Object.values(queryParam[filter])[0], $lt: rezonedEnd.toISO() };\n                            else\n                                queryParam[filter] = { $lt: rezonedEnd.toISO() };\n                        } else {\n                            const rezonedIni = date.set({ hour: 0, minute: 0, second: 0 }).setZone('UTC');\n                            const rezonedEnd = rezonedIni.plus({ days: 1 });\n                            queryParam[filter] = { $gte: rezonedIni.toISO(), $lt: rezonedEnd.toISO() };\n\n                        }\n                    } else\n                        queryParam[filter] = value;\n                }\n            }\n        }\n\n        TextOrder.find(queryParam).sort(sortObj).exec(async (findError, result) => {\n            if (findError) {\n                console.error({ findError });\n                res.status(500).json({ message: findError.message });\n            } else {\n                let _rangeIni = 0;\n                let _rangeEnd = result.length;\n                if (rangeObj) {\n                    _rangeIni = rangeObj.offset <= result.length ? rangeObj.offset : result.length;\n                    _rangeEnd = (rangeObj.offset + rangeObj.limit) <= result.length ? rangeObj.offset + rangeObj.limit : result.length;\n                }\n                let _totalCount = result.length;\n                let ordersArray = [];\n                if (result && result.length && result.length > 0) {\n\n                    // workaround to show totalamount and totalitems in the frontend, because\n                    // I am only sending part of the list (pagination)\n                    let asideTotalAmount = 0;\n                    let asideTotalItems = result.length;\n                    for (const order of result) {\n                        asideTotalAmount = asideTotalAmount + order.total;\n                    }\n                    // workaround end: all orders will receive these values.\n\n                    for (let i = _rangeIni; i < _rangeEnd; i++) {\n                        const textOrder = result[i];\n                        const deliverAt = textOrder.deliverTime\n                            ? DateTime.fromJSDate(textOrder.confirmedAt).plus({ minutes: textOrder.deliverTime })\n                            : textOrder.confirmedAt;\n\n                        let jsonOrder = {\n                            id: textOrder.id,\n                            pageId: textOrder.pageId,\n                            customerId: textOrder.customerId,\n                            userId: textOrder.userId,\n                            phone: textOrder.phone,\n                            details: textOrder.details,\n                            deliverTime: textOrder.deliverTime,\n                            status: textOrder.status,\n                            status2: textOrder.status2,\n                            status3: textOrder.status3,\n                            total: textOrder.total,\n                            deliverAt: deliverAt,\n                            createdAt: textOrder.createdAt,\n                            updatedAt: textOrder.updatedAt,\n                            confirmedAt: textOrder.confirmedAt,\n                            deliveredAt: textOrder.deliveredAt,\n                            asideTotalAmount: asideTotalAmount,\n                            asideTotalItems: asideTotalItems,\n                        }\n                        ordersArray.push(jsonOrder);\n                    }\n                }\n                res.setHeader('Content-Range',\n                    util.format('text_orders %d-%d/%d',\n                        _rangeIni, _rangeEnd, _totalCount));\n                res.status(200).json(ordersArray);\n            }\n        });\n    } catch (orderGetAllErr) {\n        console.error({ orderGetAllErr })\n        res.status(500).json({ message: orderGetAllErr.message });\n    }\n};\n\n// List one record by filtering by ID\nexport const text_order_get_one = async (req, res) => {\n    if (req.params && req.params.id) {\n        try {\n            const pageId = req.currentUser.activePage ? req.currentUser.activePage : null;\n            const jsonOrder = await getOrderJson(pageId, req.params.id);\n            res.status(200).json(jsonOrder);\n        } catch (orderGetOneError) {\n            console.error({ orderGetOneError });\n            res.status(500).json({ message: orderGetOneError.message });\n        }\n    }\n}\n\n// UPDATE\nexport const text_order_update = async (req, res) => {\n    if (req.body && req.body.id) {\n        try {\n            const { id, operation } = req.body;\n            const pageId = req.currentUser.activePage;\n            const doc = await TextOrder.findOne({ pageId: pageId, id: id });\n\n            if (operation === 'REJECT') {\n                const { rejectionExplanation } = req.body;\n\n                doc.status = ORDERSTATUS_REJECTED;\n                doc.sent_reject_notification = DateTime.local();\n                doc.rejection_reason = rejectionExplanation;\n                sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            } else if (operation === 'VIEW') {\n                doc.status = ORDERSTATUS_VIEWED;\n                // sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            } else if (operation === 'ACCEPT') {\n                doc.status = ORDERSTATUS_ACCEPTED;\n                // sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            } else if (operation === 'PRINT') {\n                doc.status = ORDERSTATUS_PRINTED;\n                // sendRejectionNotification(doc.pageId, doc.userId, doc.id, rejectionExplanation);\n            } else if (operation === 'DELIVER') {\n                doc.status = ORDERSTATUS_DELIVERED;\n                if (doc.source !== 'whatsapp') {\n                    if (!doc.sent_shipping_notification) {\n                        await sendShippingNotification(doc.pageId, doc.userId, doc.id);\n                        doc.sent_shipping_notification = DateTime.local();\n                    }\n                }\n            } else {\n                if (req.body.status2 === 'ordered') {\n                    doc.status = ORDERSTATUS_CONFIRMED;\n                } else if (req.body.status2 === 'delivered') {\n                    doc.status = ORDERSTATUS_DELIVERED;\n                    doc.deliveredAt = DateTime.local();\n                } else if (req.body.status2 === 'cancelled') {\n                    doc.status = ORDERSTATUS_DELIVERED;\n                }\n\n                if (doc.status === ORDERSTATUS_DELIVERED) {\n                    if (doc.source !== 'whatsapp') {\n                        if (!doc.sent_shipping_notification) {\n                            console.info('I am going to send to ' + doc.userId + ', about the order number:' + doc.id + ' a shipping notification');\n                            await sendShippingNotification(doc.pageId, doc.userId, doc.id);\n                            doc.sent_shipping_notification = DateTime.local();\n                        }\n                    }\n                }\n            }\n            await doc.save();\n            const jsonOrder = await getOrderJson(pageId, doc.id);\n            res.status(200).json(jsonOrder);\n        } catch (orderUpdateErr) {\n            console.error(orderUpdateErr);\n            res.status(500).json({ message: orderUpdateErr.message });\n        }\n    }\n}\n\n/**\n * Delete all records from a pageID\n * @param {*} pageID\n */\nexport const deleteManyTextOrders = async (pageID) => {\n    return await TextOrder.deleteMany({ pageId: pageID }).exec();\n}\n\n// export const sendShippingNotification = async order => {\n//     const { accessToken } = await getOnePageToken(order.pageId);\n\n//     const _txt = 'O seu pedido número ' + order.id + ' acabou de sair para entrega. Bom apetite!';\n\n//     const out = new Elements();\n//     out.add({ text: _txt });\n//     await Bot.send_message_tag(accessToken, order.userId, out);\n// }\n\n// List one record by filtering by ID\nexport const getOrderJson = async (pageId, orderId) => {\n    try {\n        const order = await TextOrder.findOne({ pageId: pageId, id: orderId });\n        const customer = await getCustomerById(pageId, order.customerId);\n        const deliverAt = order.deliverTime\n            ? DateTime.fromJSDate(order.confirmedAt).plus({ minutes: order.deliverTime })\n            : order.confirmedAt;\n\n        let jsonOrder = {\n            id: order.id,\n            customerId: order.customerId,\n            customerName: customer.first_name + ' ' + customer.last_name,\n            phone: order.phone,\n            deliverAt: deliverAt,\n            deliverTime: order.deliverTime,\n            status: order.status,\n            status2: order.status2,\n            status3: order.status3,\n            total: order.total,\n            createdAt: order.createdAt,\n            confirmedAt: order.confirmedAt,\n            deliveredAt: order.deliveredAt,\n        }\n        return jsonOrder;\n    } catch (getOrderJsonErr) {\n        console.error({ getOrderJsonErr });\n        throw new Error(getOrderJsonErr.message);\n    }\n}\n\n\nexport const updateOrder = async orderData => {\n    try {\n        const {\n            pageId,\n            userId,\n            user,\n            details,\n            deliverTime,\n            phone,\n            confirmOrder } = orderData;\n\n        let customerID = 0;\n        let customerData = {}\n        customerData.pageId = pageId;\n        customerData.userId = userId;\n        if (user) {\n            const { first_name, last_name, profile_pic } = user;\n            customerData.first_name = first_name;\n            customerData.last_name = last_name;\n            customerData.profile_pic = profile_pic;\n        }\n        customerData.phone = phone;\n        customerID = await updateCustomer(customerData);\n        const textOrder = await TextOrder.findOne({\n            pageId: pageId,\n            userId: userId,\n            status: ORDERSTATUS_PENDING,\n        }).exec();\n\n        if (textOrder) {\n            orderData.orderId = textOrder.id;\n\n            let updateOrder = false;\n\n            if (deliverTime) {\n                textOrder.deliverTime = deliverTime;\n                updateOrder = true;\n            }\n\n            if (customerID > 0) {\n                textOrder.customerId = customerID;\n                updateOrder = true;\n            }\n\n            if (phone) {\n                textOrder.phone = phone;\n                updateOrder = true;\n            }\n\n            if (confirmOrder) {\n                textOrder.status = ORDERSTATUS_CONFIRMED;\n                textOrder.confirmedAt = DateTime.local();\n                updateOrder = true;\n            }\n\n            if (details) {\n                textOrder.details = details;\n                updateOrder = true;\n            }\n\n            if (updateOrder)\n                await textOrder.save();\n\n            if (confirmOrder) {\n                emitEvent(pageId, 'new-order', { id: textOrder.id, confirmedAt: textOrder.confirmedAt });\n            }\n\n        } else {\n            const resultLastId = await TextOrder.find({ pageId: pageId }).select('id').sort('-id').limit(1).exec();\n            let orderId = 1;\n            if (resultLastId && resultLastId.length) orderId = resultLastId[0].id + 1;\n\n            const record = new TextOrder({\n                id: orderId,\n                pageId: pageId,\n                userId: userId,\n                status: ORDERSTATUS_PENDING,\n            });\n            await record.save();\n        }\n    } catch (updateTextOrderErr) {\n        console.error({ updateTextOrderErr });\n        throw updateTextOrderErr;\n    }\n}\n\nexport const getOrderPending = async orderData => {\n    const { userId, pageId } = orderData;\n\n    const _order = await TextOrder.findOne({\n        userId: userId, pageId: pageId,\n        status: ORDERSTATUS_PENDING,\n    }).exec();\n\n    if (_order) {\n        const headerOrder = {\n            order: _order,\n        }\n        return headerOrder;\n    } else return null;\n}\n\nexport const getLastOrder = async orderData => {\n    const { userId, pageId } = orderData;\n\n    const orders = await TextOrder.find({\n        pageId: pageId,\n        userId: userId,\n        status: ORDERSTATUS_CONFIRMED,\n    }).select('id confirmedAt')\n        .sort('-confirmedAt')\n        .exec();\n\n    if (orders && orders.length)\n        return orders;\n    else return [];\n}\n\n\nexport const getOrdersCustomerStat = async orderData => {\n    const { pageId, customerId } = orderData;\n\n    const orders = await TextOrder.find({ pageId: pageId, customerId: customerId }).select('createdAt total').sort('createdAt').exec();\n    let total_spent = 0;\n    let nb_orders = 0;\n    let first_order = Date.now();\n    let last_order = null;\n    for (const order of orders) {\n        total_spent += order.total;\n        nb_orders += 1;\n\n        if (first_order >= order.createdAt) {\n            first_order = order.createdAt;\n        }\n        if (last_order <= order.createdAt) {\n            last_order = order.createdAt;\n        }\n    }\n    return { total_spent, nb_orders, first_order, last_order };\n}\n\nexport const cancelOrder = async orderData => {\n    const { pageId, userId } = orderData;\n\n    await TextOrder.findOneAndRemove({ pageId: pageId, userId: userId, status: ORDERSTATUS_PENDING },\n        async (err, res) => {\n            if (!err) {\n                if (res) {\n                    const orderId = res.id;\n                    await cancelItems(pageId, orderId);\n                } else {\n                    console.error('Items from this order shall be deleted manually');\n                    console.info(res);\n                }\n            } else {\n                console.error('Order.findOneAndDelete');\n                console.error(err);\n            }\n        });\n}\n"],"file":"textOrdersController.js"}