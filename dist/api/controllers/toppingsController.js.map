{"version":3,"sources":["../../../src/api/controllers/toppingsController.js"],"names":["topping_get_all","req","res","sortObj","query","sort","topping","rangeObj","range","queryObj","filter","filterObj","filterField","length","i","value","filterValues","Array","isArray","$in","currentUser","activePage","Topping","find","exec","err","result","status","json","message","errmsg","_rangeIni","_rangeEnd","offset","limit","_totalCount","toppingsArray","push","setHeader","util","format","topping_get_one","params","id","pageID","findOne","pageId","doc","topping_create","body","select","lastId","newRecord","save","then","catch","code","topping_update","topping_delete","findOneAndRemove","getToppings","queryTopping","getToppingsNames","toppingsModel","toppingsNamesArray","topObj","getToppingsFull","deleteManyToppings","deleteMany"],"mappings":"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","sourcesContent":["import Topping from '../models/toppings';\nimport util from 'util';\nimport stringCapitalizeName from 'string-capitalize-name';\nimport { configSortQuery, configRangeQuery, configFilterQueryMultiple } from '../util/util';\n\n\n// List all toppings\nexport const topping_get_all = async (req, res) => {\n    // Getting the sort from the requisition\n    let sortObj = req.query.sort ? configSortQuery(req.query.sort) : { topping: 'ASC' };\n    // Getting the range from the requisition\n    let rangeObj = configRangeQuery(req.query.range);\n\n    let queryObj = {};\n    if (req.query.filter) {\n        const filterObj = configFilterQueryMultiple(req.query.filter);\n\n        if (filterObj && filterObj.filterField && filterObj.filterField.length) {\n            for (let i = 0; i < filterObj.filterField.length; i++) {\n                const filter = filterObj.filterField[i];\n                const value = filterObj.filterValues[i];\n                if (Array.isArray(value)) {\n                    queryObj[filter] = { $in: value };\n                } else\n                    queryObj[filter] = value;\n            }\n        }\n    }\n    if (req.currentUser.activePage) {\n        queryObj['pageId'] = req.currentUser.activePage;\n    }\n\n    Topping.find(queryObj).sort(sortObj).exec((err, result) => {\n        if (err) {\n            res.status(500).json({ message: err.errmsg });\n        } else {\n            let _rangeIni = 0;\n            let _rangeEnd = result.length;\n            if (rangeObj) {\n                _rangeIni = rangeObj.offset <= result.length ? rangeObj.offset : result.length;\n                _rangeEnd = (rangeObj.offset + rangeObj.limit) <= result.length ? rangeObj.offset + rangeObj.limit : result.length;\n            }\n            let _totalCount = result.length;\n            let toppingsArray = [];\n            for (let i = _rangeIni; i < _rangeEnd; i++) {\n                toppingsArray.push(result[i])\n            }\n            res.setHeader('Content-Range', util.format('toppings %d-%d/%d', _rangeIni, _rangeEnd, _totalCount));\n            res.status(200).json(toppingsArray);\n        }\n    });\n}\n\n// List one record by filtering by ID\nexport const topping_get_one = (req, res) => {\n    if (req.params && req.params.id) {\n        const pageID = req.currentUser.activePage ? req.currentUser.activePage : null;\n\n        Topping.findOne({ pageId: pageID, id: req.params.id }, (err, doc) => {\n            if (err) {\n                res.status(500).json({ message: err.errmsg });\n            }\n            else {\n                res.status(200).json({ id: doc.id, topping: doc.topping });\n            }\n        });\n    }\n}\n\n// CREATE A NEW RECORD\nexport const topping_create = async (req, res) => {\n    if (req.body) {\n        const pageID = req.currentUser.activePage ? req.currentUser.activePage : null;\n\n        let { id } = req.body;\n\n        if (!id || id === 0) {\n            const lastId = await Topping.find({ pageId: pageID }).select('id').sort('-id').limit(1).exec();\n            id = 1;\n            if (lastId && lastId.length)\n                id = lastId[0].id + 1;\n        }\n\n        const newRecord = new Topping({\n            id: id,\n            topping: stringCapitalizeName(req.body.topping),\n            pageId: pageID,\n        });\n\n        newRecord.save()\n            .then((result) => {\n                res.status(200).json(result);\n            })\n            .catch((err) => {\n                if (err.code === 11000) {\n                    res.status(500).json({ message: 'pos.messages.duplicatedKey' });\n                } else {\n                    res.status(500).json({ message: err.errmsg });\n                }\n            });\n    }\n}\n\n// UPDATE\nexport const topping_update = (req, res) => {\n\n    const pageID = req.currentUser.activePage;\n\n    Topping.findOne({ pageId: pageID, id: req.body.id }, (err, doc) => {\n        if (!err) {\n            doc.topping = stringCapitalizeName(req.body.topping);\n            doc.save((err, doc) => {\n                if (err) {\n                    res.status(500).json({ message: err.errmsg });\n                } else {\n                    res.status(200).json({\n                        id: doc.id,\n                        topping: doc.topping,\n                    });\n                }\n            });\n        } else {\n            res.status(500).json({ message: err.errmsg });\n        }\n    });\n\n\n}\n\n// DELETE\nexport const topping_delete = (req, res) => {\n    const pageID = req.currentUser.activePage;\n\n    Topping.findOneAndRemove({ pageId: pageID, id: req.params.id })\n        .then((result) => {\n            res.status(200).json({\n                id: result.id,\n                topping: result.topping,\n            });\n        })\n        .catch((err) => {\n            res.status(500).json({ message: err.errmsg });\n        });\n};\n\nexport const getToppings = async (toppingsArray, pageID) => {\n    var queryTopping = Topping.find({ pageId: pageID, id: { $in: toppingsArray } });\n    queryTopping.sort('topping');\n    queryTopping.select('topping');\n    return await queryTopping.exec();\n}\n\nexport const getToppingsNames = async (toppingsArray, pageID) => {\n    const toppingsModel = await getToppings(toppingsArray, pageID);\n    const toppingsNamesArray = [];\n    for (let topObj of toppingsModel) {\n        toppingsNamesArray.push(topObj.topping);\n    }\n    return toppingsNamesArray;\n}\n\nexport const getToppingsFull = async (pageID) => {\n    let query = Topping.find({ pageId: pageID });\n    query.sort('topping');\n    return await query.exec();\n}\n\n\n/**\n * Delete all records from a pageID\n * @param {*} pageID\n */\nexport const deleteManyToppings = async (pageID) => {\n    return await Topping.deleteMany({ pageId: pageID }).exec();\n}\n\n"],"file":"toppingsController.js"}