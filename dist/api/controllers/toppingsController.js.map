{"version":3,"sources":["../../../src/api/controllers/toppingsController.js"],"names":["topping_get_all","req","res","sortObj","query","sort","topping","rangeObj","range","filterObj","filter","queryParam","filterValues","filterField","$in","Topping","find","skip","offset","limit","estimatedDocumentCount","count","exec","err","result","status","json","message","errmsg","setHeader","util","format","length","topping_get_one","params","id","findOne","doc","topping_create","body","newRecord","save","then","catch","topping_update","topping_delete","findOneAndRemove","getToppings","toppingsArray","queryTopping","select","getToppingsNames","toppingsModel","toppingsNamesArray","Array","topObj","push"],"mappings":"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","sourcesContent":["import Topping from '../models/toppings';\nimport util from \"util\";\nimport stringCapitalizeName from 'string-capitalize-name';\nimport { configSortQuery, configRangeQueryNew, configFilterQuery } from '../util/util';\n\n\n// List all toppings\nexport const topping_get_all = async (req, res) => {\n    let sortObj = req.query.sort ? configSortQuery(req.query.sort) : { topping: 'ASC' };\n    const rangeObj = configRangeQueryNew(req.query.range);\n    const filterObj = configFilterQuery(req.query.filter);\n\n    let queryParam = {};\n    if (filterObj) {\n        if (typeof filterObj.filterValues === 'Array') {\n            queryParam[filterObj.filterField] = { $in: filterObj.filterValues };\n        } else {\n            queryParam[filterObj.filterField] = filterObj.filterValues;\n        }\n    }\n\n    let query;\n    if (rangeObj) {\n        query = Topping.find(queryParam).sort(sortObj).skip(rangeObj.offset).limit(rangeObj.limit);\n    } else {\n        query = Topping.find(queryParam).sort(sortObj);\n    }\n\n    const count = await Topping.estimatedDocumentCount();\n\n    query.exec((err, result) => {\n        if (err) {\n            res.status(500).json({ message: err.errmsg });\n        } else {\n            res.setHeader('Content-Range', util.format(\"toppings %d-%d/%d\", 1, result.length - 1, count));\n            res.status(200).json(result);\n        }\n    });\n}\n\n// List one record by filtering by ID\nexport const topping_get_one = (req, res) => {\n    if (req.params && req.params.id) {\n        Topping.findOne({ id: req.params.id }, (err, doc) => {\n            if (err) {\n                res.status(500).json({ message: err.errmsg });\n            }\n            else {\n                res.status(200).json({ id: doc.id, topping: doc.topping });\n            }\n        });\n    }\n}\n\n// CREATE A NEW RECORD\nexport const topping_create = (req, res) => {\n    if (req.body) {\n        const newRecord = new Topping({\n            id: req.body.id,\n            topping: stringCapitalizeName(req.body.topping),\n        });\n\n        newRecord.save()\n            .then((result) => {\n                res.status(200).json({\n                    id: result.id,\n                    topping: result.topping,\n                });\n            })\n            .catch((err) => {\n                res.status(500).json({ message: err.errmsg });\n            });\n    }\n}\n\n// UPDATE\nexport const topping_update = (req, res) => {\n    Topping.findOne({ id: req.body.id }, (err, doc) => {\n        if (!err) {\n            doc.topping = stringCapitalizeName(req.body.topping);\n            doc.save((err, doc) => {\n                if (err) {\n                    res.status(500).json({ message: err.errmsg });\n                } else {\n                    res.status(200).json({\n                        id: doc.id,\n                        topping: doc.topping,\n                    });\n                }\n            });\n        } else {\n            res.status(500).json({ message: err.errmsg });\n        }\n    });\n\n\n}\n\n// DELETE\nexport const topping_delete = (req, res) => {\n    Topping.findOneAndRemove({ id: req.params.id })\n        .then((result) => {\n            res.status(200).json({\n                id: result.id,\n                topping: result.topping\n            });\n        })\n        .catch((err) => {\n            res.status(500).json({ message: err.errmsg });\n        });\n};\n\nexport const getToppings = async (toppingsArray) => {\n    var queryTopping = Topping.find({ id: { $in: toppingsArray } });\n    queryTopping.sort('topping');\n    queryTopping.select('topping');\n    return await queryTopping.exec();\n}\n\nexport const getToppingsNames = async (toppingsArray) => {\n    const toppingsModel = await getToppings(toppingsArray);\n    const toppingsNamesArray = new Array();\n    for (let topObj of toppingsModel) {\n        toppingsNamesArray.push(topObj.topping);\n    }\n    return toppingsNamesArray;\n}"],"file":"toppingsController.js"}