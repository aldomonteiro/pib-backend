{"version":3,"sources":["../../../src/api/models/stores.js"],"names":["Schema","mongoose","schema","id","type","Number","required","pageId","String","name","address","city","state","phone","delivery_fee","location_lat","location_long","delivery_time","pickup_time","hol_is_open","Boolean","default","hol_open","hol_close","sun_is_open","mon_is_open","tue_is_open","wed_is_open","thu_is_open","fri_is_open","sat_is_open","sun_open","mon_open","tue_open","wed_open","thu_open","fri_open","sat_open","sun_close","mon_close","tue_close","wed_close","thu_close","fri_close","sat_close","printer","timestamps","index","unique","plugin","paginate","model"],"mappings":"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","sourcesContent":["import mongoose from \"mongoose\";\nimport paginate from 'mongoose-paginate';\n\nconst Schema = mongoose.Schema;\n\nconst schema = new Schema(\n    {\n        id: { type: Number, required: true },\n        pageId: { type: String, required: true },\n        name: { type: String, required: true },\n        address: { type: String },\n        city: { type: String },\n        state: { type: String },\n        phone: { type: String },\n        delivery_fee: { type: Number },\n        location_lat: { type: Number },\n        location_long: { type: Number },\n        delivery_time: { type: Number },\n        pickup_time: { type: Number },\n        // Holydays\n        hol_is_open: { type: Boolean, default: true },\n        hol_open: { type: String, required: true },\n        hol_close: { type: String, required: true },\n        // Weekdays\n        sun_is_open: { type: Boolean, default: true },\n        mon_is_open: { type: Boolean, default: true },\n        tue_is_open: { type: Boolean, default: true },\n        wed_is_open: { type: Boolean, default: true },\n        thu_is_open: { type: Boolean, default: true },\n        fri_is_open: { type: Boolean, default: true },\n        sat_is_open: { type: Boolean, default: true },\n        sun_open: { type: String, required: true },\n        mon_open: { type: String, required: true },\n        tue_open: { type: String, required: true },\n        wed_open: { type: String, required: true },\n        thu_open: { type: String, required: true },\n        fri_open: { type: String, required: true },\n        sat_open: { type: String, required: true },\n        sun_close: { type: String, required: true },\n        mon_close: { type: String, required: true },\n        tue_close: { type: String, required: true },\n        wed_close: { type: String, required: true },\n        thu_close: { type: String, required: true },\n        fri_close: { type: String, required: true },\n        sat_close: { type: String, required: true },\n        printer: { type: String },\n    }, { timestamps: true },\n);\n\nschema.index({ pageId: 1, id: 1 }, { unique: true });\nschema.index({ phone: 1 }, { unique: true });\n\nschema.plugin(paginate);\n\n\nexport default mongoose.model(\"stores\", schema);\n"],"file":"stores.js"}