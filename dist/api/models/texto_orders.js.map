{"version":3,"sources":["../../../src/api/models/texto_orders.js"],"names":["Schema","mongoose","schema","id","type","Number","required","userId","String","pageId","customerId","phone","details","status","status2","status3","address","total","confirmedAt","Date","deliveredAt","deliverTime","timestamps","pre","next","model"],"mappings":";;;;;;;AAAA;;;;AAEA,IAAMA,MAAM,GAAGC,qBAASD,MAAxB;AAEA,IAAME,MAAM,GAAG,IAAIF,MAAJ,CAAW;AACtBG,EAAAA,EAAE,EAAE;AAAEC,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GADkB;AAEtBC,EAAAA,MAAM,EAAE;AAAEH,IAAAA,IAAI,EAAEI,MAAR;AAAgBF,IAAAA,QAAQ,EAAE;AAA1B,GAFc;AAGtBG,EAAAA,MAAM,EAAE;AAAEL,IAAAA,IAAI,EAAEI,MAAR;AAAgBF,IAAAA,QAAQ,EAAE;AAA1B,GAHc;AAItBI,EAAAA,UAAU,EAAE;AAAEN,IAAAA,IAAI,EAAEC;AAAR,GAJU;AAKtBM,EAAAA,KAAK,EAAE;AAAEP,IAAAA,IAAI,EAAEI;AAAR,GALe;AAMtBI,EAAAA,OAAO,EAAE;AAAER,IAAAA,IAAI,EAAEI;AAAR,GANa;AAOtBK,EAAAA,MAAM,EAAE;AAAET,IAAAA,IAAI,EAAEC;AAAR,GAPc;AAQtBS,EAAAA,OAAO,EAAE;AAAEV,IAAAA,IAAI,EAAEI;AAAR,GARa;AAStBO,EAAAA,OAAO,EAAE;AAAEX,IAAAA,IAAI,EAAEI;AAAR,GATa;AAUtBQ,EAAAA,OAAO,EAAE;AAAEZ,IAAAA,IAAI,EAAEI;AAAR,GAVa;AAWtBS,EAAAA,KAAK,EAAE;AAAEb,IAAAA,IAAI,EAAEC;AAAR,GAXe;AAYtBa,EAAAA,WAAW,EAAE;AAAEd,IAAAA,IAAI,EAAEe;AAAR,GAZS;AAatBC,EAAAA,WAAW,EAAE;AAAEhB,IAAAA,IAAI,EAAEe;AAAR,GAbS;AActBE,EAAAA,WAAW,EAAE;AAAEjB,IAAAA,IAAI,EAAEC;AAAR;AAdS,CAAX,EAeZ;AAAEiB,EAAAA,UAAU,EAAE;AAAd,CAfY,CAAf;AAiBApB,MAAM,CAACqB,GAAP,CAAW,MAAX,EAAmB,UAAUC,IAAV,EAAgB;AAC/B,UAAQ,KAAKX,MAAb;AACI,SAAK,CAAL;AAAQ,WAAKC,OAAL,GAAe,SAAf;AAA0B,WAAKC,OAAL,GAAe,SAAf;AAA0B;;AAC5D,SAAK,CAAL;AAAQ,WAAKD,OAAL,GAAe,WAAf;AAA4B,WAAKC,OAAL,GAAe,SAAf;AAA0B;;AAC9D,SAAK,CAAL;AAAQ,WAAKD,OAAL,GAAe,QAAf;AAAyB,WAAKC,OAAL,GAAe,SAAf;AAA0B;;AAC3D,SAAK,CAAL;AAAQ,WAAKD,OAAL,GAAe,UAAf;AAA2B,WAAKC,OAAL,GAAe,SAAf;AAA0B;;AAC7D,SAAK,CAAL;AAAQ,WAAKD,OAAL,GAAe,SAAf;AAA0B,WAAKC,OAAL,GAAe,SAAf;AAA0B;;AAC5D,SAAK,CAAL;AAAQ,WAAKD,OAAL,GAAe,WAAf;AAA4B,WAAKC,OAAL,GAAe,WAAf;AAA4B;;AAChE,SAAK,CAAL;AAAQ,WAAKD,OAAL,GAAe,UAAf;AAA2B,WAAKC,OAAL,GAAe,WAAf;AAA4B;;AAC/D,SAAK,CAAL;AAAQ,WAAKD,OAAL,GAAe,WAAf;AAA4B,WAAKC,OAAL,GAAe,WAAf;AAA4B;;AAChE;AACI;AAVR;;AAYAS,EAAAA,IAAI;AACP,CAdD;;eAgBevB,qBAASwB,KAAT,CAAe,aAAf,EAA8BvB,MAA9B,C","sourcesContent":["import mongoose from 'mongoose';\n\nconst Schema = mongoose.Schema;\n\nconst schema = new Schema({\n    id: { type: Number, required: true },\n    userId: { type: String, required: true },\n    pageId: { type: String, required: true },\n    customerId: { type: Number },\n    phone: { type: String },\n    details: { type: String },\n    status: { type: Number },\n    status2: { type: String },\n    status3: { type: String },\n    address: { type: String },\n    total: { type: Number },\n    confirmedAt: { type: Date },\n    deliveredAt: { type: Date },\n    deliverTime: { type: Number },\n}, { timestamps: true });\n\nschema.pre('save', function (next) {\n    switch (this.status) {\n        case 0: this.status2 = 'pending'; this.status3 = 'pending'; break;\n        case 1: this.status2 = 'confirmed'; this.status3 = 'pending'; break;\n        case 2: this.status2 = 'viewed'; this.status3 = 'pending'; break;\n        case 3: this.status2 = 'accepted'; this.status3 = 'pending'; break;\n        case 4: this.status2 = 'printed'; this.status3 = 'pending'; break;\n        case 5: this.status2 = 'delivered'; this.status3 = 'delivered'; break;\n        case 8: this.status2 = 'rejected'; this.status3 = 'cancelled'; break;\n        case 9: this.status2 = 'cancelled'; this.status3 = 'cancelled'; break;\n        default:\n            break;\n    }\n    next();\n});\n\nexport default mongoose.model('text_orders', schema);\n"],"file":"texto_orders.js"}