{"version":3,"sources":["../../../src/api/whatsapp/whatSimpleController.js"],"names":["delayedTimeoutMSGS","w_controller","args","console","log","dir","myId","message","userId","contactName","profileImg","quotedMsg","processedMsg","names","split","first_name","shift","last_name","length","join","_profile_pic","decodeURIComponent","replace","user","profile_pic","store","info","name","pageId","sendActions","action","pageID","userID","text","autoReplyMsg","autoreply_notification","order","timeout","autoreply_delay","sent_autoreply","key","setTimeout","directReply","clearTimeout","whatsAppId","multiple","data","payload","location","out","error","waboxapp_sendMessage","to","myToken","uid","custom_uid","encodeURIComponent","Math","random","qText","waboxApp","axios","get"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n    basicOption,\n    basicComments,\n    basicPostComments,\n    basicAutoReply,\n} from '../bot/simpleBotController';\nimport { getStoreByPhone } from '../controllers/storesController';\nimport { emitEventBotWhats } from '../controllers/redisController';\n\nvar delayedTimeoutMSGS = {};\n\n/**\n * Receives the user and message from whatsapp and\n * returns a message from the system.\n * @param {*} args\n */\nexport const w_controller = async (args) => {\n    console.log('###### w_controller SIMPLE ######');\n    console.dir(args);\n    const { myId, message, userId, contactName, profileImg, quotedMsg } = args;\n    // If user is referencing a message (quotedMsg), insert it into processedMsg.\n    // Otherwise, processdMsg is the same message sent.\n    const processedMsg = quotedMsg ? quotedMsg + '\\n' + message : message;\n\n    const names = contactName.split(' ');\n    const first_name = names.shift();\n    const last_name = names.length >= 1 ? names.join(' ') : null;\n    const _profile_pic = profileImg && decodeURIComponent(profileImg.replace('https://web.whatsapp.com/pp?e=', ''));\n    const user = {\n        first_name: first_name,\n        last_name: last_name,\n        profile_pic: _profile_pic,\n    }\n\n\n    const store = await getStoreByPhone(myId);\n    if (store) {\n        console.info(`store name: ${store.name}`);\n        const { pageId } = store;\n\n        const order = await sendActions({\n            action: 'BASIC_UPDATE_POSTCOMMENTS',\n            pageID: pageId,\n            userID: userId,\n            text: processedMsg,\n            user: user,\n            autoReplyMsg: store.autoreply_notification,\n        });\n\n        const timeout = store.autoreply_delay * 1000;\n\n        if (store.autoreply_notification) {\n            if (!order.sent_autoreply) {\n                const key = order.pageId + order.userId;\n                if (!delayedTimeoutMSGS[key]) {\n                    delayedTimeoutMSGS[key] = setTimeout(directReply, timeout, myId, pageId, order.userId, store.autoreply_notification);\n                } else {\n                    clearTimeout(delayedTimeoutMSGS[key]);\n                    delayedTimeoutMSGS[key] = setTimeout(directReply, timeout, myId, pageId, order.userId, store.autoreply_notification);\n                }\n            }\n        }\n\n        return true;\n    }\n}\n\nconst directReply = (whatsAppId, pageId, userId, message) => {\n    const key = pageId + userId;\n    delayedTimeoutMSGS[key] = null;\n    basicAutoReply(pageId, userId, message);\n    emitEventBotWhats(whatsAppId, userId, message);\n}\n\n// /**\n//  * Receives the user and message from whatsapp and\n//  * returns a message from the system.\n//  * @param {*} args\n//  */\n// export const w_controller = async (args) => {\n//     console.log('###### w_controller SIMPLE ######');\n//     console.dir(args);\n//     const { myId, message, userId, match, contactName, profileImg, quotedMsg } = args;\n//     // If user is referencing a message (quotedMsg), insert it into processedMsg.\n//     // Otherwise, processdMsg is the same message sent.\n//     const processedMsg = quotedMsg ? quotedMsg + '\\n' + message : message;\n\n//     const names = contactName.split(' ');\n//     const first_name = names.shift();\n//     const last_name = names.length >= 1 ? names.join(' ') : null;\n//     const _profile_pic = profileImg && decodeURIComponent(profileImg.replace('https://web.whatsapp.com/pp?e=', ''));\n//     const user = {\n//         first_name: first_name,\n//         last_name: last_name,\n//         profile_pic: _profile_pic,\n//     }\n\n\n//     const store = await getStoreByPhone(myId);\n//     if (store) {\n//         console.info(`store name: ${store.name}, match:${match}`);\n//         const { pageId } = store;\n\n//         // No option match, plain text.\n//         if (!match) {\n//             const pendingOrder = await getOrderPending({ pageId: pageId, userId: userId });\n//             // Found a pending order\n//             if (pendingOrder && pendingOrder.order) {\n//                 console.log(`pendingorder id:${pendingOrder.order.id} \n//                 waitingFor:${pendingOrder.order.waitingFor}\n//                 coments:${pendingOrder.order.comments}`);\n\n//                 let result;\n\n//                 if (pendingOrder.order.waitingFor === 'typed_comments') {\n//                     const oldComments = pendingOrder.order.comments;\n\n//                     // Order not yet accepted\n//                     if (pendingOrder.order.status < ORDERSTATUS_ACCEPTED) {\n//                         // concat old comments and the new comments\n//                         let updatedComents = oldComments ? oldComments + '\\n' + processedMsg : processedMsg;\n\n//                         result = await sendActions({\n//                             action: 'BASIC_UPDATE_COMMENTS',\n//                             pageID: pageId,\n//                             userID: userId,\n//                             text: updatedComents,\n//                             user: user,\n//                         });\n\n//                     } else { // Order already accepted\n//                         result = await sendActions({\n//                             action: 'BASIC_UPDATE_POSTCOMMENTS',\n//                             pageID: pageId,\n//                             userID: userId,\n//                             text: processedMsg,\n//                             user: user,\n//                         });\n//                     }\n//                 }\n//                 return result;\n//             } else { // No pending order found.\n//                 const page = await getOnePageData(pageId);\n//                 const store = await getStoreData(pageId);\n//                 // Get the last order from this customer.\n//                 const lastOrder = await getLastUserOrder({ pageId, userId, status: ORDERSTATUS_REJECTED });\n\n//                 if (lastOrder) {\n//                     console.log('>> Found lastOrder:', lastOrder.id);\n\n//                     const orderDay = DateTime.fromJSDate(lastOrder.createdAt).get('day');\n//                     const today = DateTime.local().get('day');\n\n//                     if (orderDay === today && lastOrder.status < ORDERSTATUS_FINISHED) {\n//                         console.log(' from today...');\n//                         return;\n//                     }\n//                 }\n//                 const tempoEntregar = store.delivery_time ? `(+ ou - ${store.delivery_time} min.)` : '';\n//                 const tempoRetirar = store.pickup_time ? `(+ ou - ${store.pickup_time} min.)` : '';\n\n//                 let replyText = page.firstResponseText.replace('$NAME', contactName);\n//                 replyText = replyText + '\\n\\n';\n\n//                 if (lastOrder && lastOrder.comments) {\n//                     replyText = replyText + 'Seu último pedido:\\n';\n//                     replyText = replyText + lastOrder.comments + '\\n';\n//                     replyText = replyText + 'Envie *REPETIR* para fazer o mesmo pedido OU envie os dados do pedido:\\n';\n\n//                     return await sendActions({\n//                         action: 'BASIC_OPTION',\n//                         pageID: pageId,\n//                         userID: userId,\n//                         text: replyText,\n//                         payload: lastOrder.comments,\n//                         data: 'REPETIR',\n//                         user: user,\n//                         message: processedMsg,\n//                     });\n//                 } else {\n//                     replyText = replyText + page.orderExample + '\\n';\n//                     replyText = replyText.replace('$TEMPOENTREGAR', tempoEntregar);\n//                     replyText = replyText.replace('$TEMPORETIRAR', tempoRetirar);\n\n//                     return await sendActions({\n//                         action: 'BASIC_REPLY',\n//                         pageID: pageId,\n//                         userID: userId,\n//                         text: replyText,\n//                         user: user,\n//                         data: processedMsg,\n//                     });\n//                 }\n\n//             }\n//         } else {\n//             if (match.hasOwnProperty('text') && match.text === 'REPETIR') {\n//                 return await sendActions({\n//                     action: 'BASIC_REPLY',\n//                     pageID: pageId,\n//                     userID: userId,\n//                     text: 'Ok, vamos repetir o pedido.',\n//                     user: user,\n//                     data: match.subText,\n//                 });\n//             }\n//         }\n//     } else {\n//         console.info(`### w_controller ### did not find store for myId: ${myId}`);\n//     }\n// }\n\nexport const sendActions = async ({\n    action, pageID, userID, multiple, data, payload,\n    location, text, message, user, autoReplyMsg }) => {\n    try {\n        let out;\n        switch (action) {\n            case 'BASIC_REPLY':\n                out = await directReply(pageID, userID, text, user, data);\n                break;\n            case 'BASIC_OPTION':\n                out = await basicOption(pageID, userID, text, data, payload, user, message);\n                break;\n            case 'BASIC_UPDATE_COMMENTS':\n                out = await basicComments(pageID, userID, text, user);\n                break;\n            case 'BASIC_UPDATE_POSTCOMMENTS':\n                out = await basicPostComments(pageID, userID, text, user, autoReplyMsg);\n                break;\n            default:\n                break;\n        }\n        return out;\n    } catch (sendActionsErr) {\n        console.error('action:', action, 'data:', data, 'err:', sendActionsErr);\n        throw sendActionsErr;\n    }\n}\n\n/**\n * Used in waboxapp\n * @param {*} to\n * @param {*} text\n */\nexport const waboxapp_sendMessage = async (to, text) => {\n    const myToken = '3207ecb3e9815b97c7efea3f45e7f8205c646bc16cd19';\n    const uid = '554499485760';\n    const custom_uid = encodeURIComponent(Math.random() * 100);\n    const qText = encodeURIComponent(text);\n    // eslint-disable-next-line max-len\n    const waboxApp = `https://www.waboxapp.com/api/send/chat?token=${myToken}&uid=${uid}&to=${to}&custom_uid=${custom_uid}&text=${qText}`;\n\n    console.info('**** Ready to send: ****');\n    console.info(waboxApp);\n\n    return await axios.get(waboxApp);\n}\n"],"file":"whatSimpleController.js"}