{"version":3,"sources":["../src/server-bot.js"],"names":["dotenv","config","env","process","NODE_ENV","debug","mongo_url","DEV_MONGODB_URL","PRD_MONGODB_URL","RETRY_TIMEOUT","options","useNewUrlParser","autoReconnect","keepAlive","reconnectInterval","reconnectTries","isConnectedBefore","connect","mongoose","catch","err","console","error","set","Promise","connection","on","setTimeout","info","close","warn","exit","global","pagesKeyID","Object","pagesMarketing","app","bot","Bot","FB_VERIFY_TOKEN","logger","token","req","res","tz","format","use","bodyParser","urlencoded","extended","json","next","doNext","body","object","entry","length","pageID","id","marketing","timerIdentifier","Math","random","time","accessToken","name","timeEnd","expressAppUseGetTokenError","log","router","listen","FB_WEBHOOK_PORT","message","sender","recipient","event","action","last_answer","data","outError","stopTyping","send","location","text","substr","_orderFlow","userID","mktContact","_data","final","startTyping","wait","answer","onMessageError","quick_reply","payload","quickReplyError"],"mappings":"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","sourcesContent":["import \"@babel/polyfill\";\nimport express from \"express\";\nimport logger from \"morgan\";\nimport bodyParser from \"body-parser\";\nimport dotenv from \"dotenv\";\nimport moment from 'moment-timezone';\nimport mongoose from 'mongoose';\nimport Debug from 'debug';\nimport { Bot } from 'facebook-messenger-bot';\nimport { getOnePageToken, getAllPages, getOnePageData } from './api/controllers/pagesController';\nimport { getPricingSizing } from './api/controllers/pricingsController';\nimport getCardapio from './api/bot/show_cardapio';\nimport { choices_sizes } from './api/util/util';\nimport {\n  sendWelcomeMessage,\n  sendErrorMsg,\n  sendMainMenu,\n  sendCardapio,\n  askForPhone,\n  showPhone,\n  askToTypePhone,\n  askForQuantity,\n  askForQuantityMore,\n  showQuantity,\n  askForSize,\n  showSize,\n  askForFlavor,\n  showFlavor,\n  showOrderOrNextItem,\n  askForLocation,\n  confirmAddressOrAskLocation,\n  confirmLocationAddress,\n  showAddress,\n  confirmOrder,\n  askToTypeAddress,\n  confirmTypedText,\n  sendHorario,\n  basicReply,\n  askForChangeOrder,\n  askForSplitFlavorOrConfirm,\n  askForFlavorOrConfirm,\n  askForSpecificItem,\n  updateItemAskOptions,\n  showOrderOrAskForPhone,\n  showSplit\n} from './api/bot/botController';\n\nimport { sendActions, mapEventsActions } from './api/bot/actionsController';\nimport { getMktContact } from \"./api/controllers/mkt_contact_controller\";\nimport { m_checkLastQuestion } from \"./api/bot/botMarkController\";\n\ndotenv.config();\nconst env = process.env.NODE_ENV || 'production';\n\nconst debug = Debug('server-bot');\n\n// --- START MongoDB connection -----------------------------\nlet mongo_url = process.env.DEV_MONGODB_URL;\nif (env === 'production')\n  mongo_url = process.env.PRD_MONGODB_URL;\n\n\nconst RETRY_TIMEOUT = 3000\n\nconst options = {\n  useNewUrlParser: true,\n  autoReconnect: true,\n  keepAlive: 30000,\n  reconnectInterval: RETRY_TIMEOUT,\n  reconnectTries: 10000\n}\n\nlet isConnectedBefore = false\n\nconst connect = () => {\n  return mongoose.connect(mongo_url, options)\n    .catch(err => console.error('Mongoose connect(...) failed with err: ', err))\n}\n\nconnect();\n\nmongoose.set('useCreateIndex', true);\nmongoose.Promise = Promise;\n\nmongoose.connection.on('error', () => {\n  console.error('Could not connect to MongoDB')\n});\n\nmongoose.connection.on('disconnected', () => {\n  console.error('Lost MongoDB connection...')\n  if (!isConnectedBefore) {\n    setTimeout(() => connect(), RETRY_TIMEOUT)\n  }\n});\n\nmongoose.connection.on('connected', () => {\n  isConnectedBefore = true\n  console.info('Connection established to MongoDB')\n});\n\nmongoose.connection.on('reconnected', () => {\n  console.info('Reconnected to MongoDB')\n});\n\n// Close the Mongoose connection, when receiving SIGINT\nprocess.on('SIGINT', () => {\n  mongoose.connection.close(function () {\n    console.warn('Force to close the MongoDB connection after SIGINT')\n    process.exit(0)\n  })\n});\n// --- END MongoDB connection -----------------------------\n\n\nglobal.pagesKeyID = new Object();\nglobal.pagesMarketing = new Object();\n\nconst app = express();\n\nconst bot = new Bot(process.env.FB_VERIFY_TOKEN, true);\n\n// Beggining - That is all to log in the local timezone\n// https://medium.com/front-end-hacking/node-js-logs-in-local-timezone-on-morgan-and-winston-9e98b2b9ca45\n// [Node.js] Logs in Local Timezone on Morgan\nlogger.token('date', (req, res, tz) => {\n  return moment().tz(tz).format();\n})\nlogger.format('myformat', '[:date[America/Sao_Paulo]] \":method :url\" :status :res[content-length] - :response-time ms');\n\napp.use(logger(\"myformat\"));\n// End - That is all to log in the right timezone\n\napp.set('json spaces', 2);\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\napp.use('/buckets/facebook', async (req, res, next) => {\n  let doNext = true;\n  if (req.body && req.body.object === 'page') {\n    if (req.body.entry.length > 0) {\n      try {\n        // Iterates over each entry - there may be multiple if batched\n        // for (let i = 0; i < req.body.entry.length; i++) {\n        let pageID = req.body.entry[0].id;\n        if (global.pagesKeyID[pageID] && global.pagesKeyID[pageID] !== '') {\n          req.token = global.pagesKeyID[pageID];\n          req.marketing = global.pagesMarketing[pageID];\n        }\n        else {\n          let timerIdentifier = \"getOnePageToken\" + Math.random();\n          console.time(timerIdentifier);\n          const { accessToken, name, marketing } = await getOnePageToken(pageID);\n          console.timeEnd(timerIdentifier);\n\n          req.token = accessToken;\n          req.marketing = marketing;\n          debug('server-bot use buckets req.marketing:', req.marketing);\n          console.info(`\\x1b[45m /buckets/facebook \\x1b[0m, pageID:\\x1b[32m${pageID}\\x1b[0m, page name:\\x1b[32m${name}\\x1b[0m, req.mkt:\\x1b[32m${req.marketing}\\x1b[0m`);\n\n          global.pagesKeyID[pageID] = accessToken;\n          global.pagesMarketing[pageID] = marketing;\n        }\n\n        // const _time = req.body.entry[0].time;\n        // const messageTime = new Date(_time).toLocaleTimeString('pt-BR');\n        // console.info(`${messageTime} From ${pageID} memory tokens:${Object.keys(global.pagesKeyID).length}`);\n\n      } catch (expressAppUseGetTokenError) {\n        console.error({ expressAppUseGetTokenError });\n      }\n    }\n  }\n  else {\n    console.log('Something came, not a page...');\n  }\n  if (doNext)\n    next();\n});\n\napp.use('/buckets/facebook', bot.router());\napp.listen(process.env.FB_WEBHOOK_PORT, () => console.log(`Bot server listening on port ${process.env.FB_WEBHOOK_PORT}`));\n\n/**\n * Event triggered when the button \"GET_STARTED\" is pressed.\n */\nbot.on('GET_STARTED', async (message) => {\n  const { sender, recipient } = message;\n  console.info(`\\x1b[43mGET_STARTED\\x1b[0m, event:\\x1b[32m${message.event}\\x1b[0m, sender.id:\\x1b[32m${sender.id}\\x1b[0m, recipient.id:\\x1b[32m${recipient.id}\\x1b[0m, bot.mkt:\\x1b[32m${bot.marketing}\\x1b[0m`);\n\n  try {\n    await sendActions({ action: 'SEND_WELCOME', bot, sender, pageID: recipient.id, last_answer: message.event });\n    if (bot.marketing) {\n      await sendActions({ action: 'PIZZAIBOT_MARKETING', bot, sender, pageID: recipient.id, data: 'GET_STARTED' });\n    } else {\n      // Send Main Menu\n      await sendActions({ action: 'SEND_MAIN_MENU', bot, sender, pageID: recipient.id, last_answer: message.event });\n    }\n  } catch (error) {\n    console.error('GET_STARTED error:', error.message);\n    const outError = await sendErrorMsg(error.message);\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, outError);\n  }\n});\n\n// all postbacks are emitted via 'postback'\nbot.on('postback', async (event, message, data) => {\n  const { sender, recipient } = message;\n  console.info(`\\x1b[43mPostback\\x1b[0m, event:\\x1b[32m${event}\\x1b[0m, data:\\x1b[32m${data}\\x1b[0m, sender.id:\\x1b[32m${sender.id}\\x1b[0m, recipient.id:\\x1b[32m${recipient.id}\\x1b[0m, bot.mkt:\\x1b[32m${bot.marketing}\\x1b[0m`);\n\n  if (event === 'PIZZAIBOT_MARKETING') {\n    if (data === 'testtypecustomer_begin') {\n      await sendActions({ action: 'SEND_MAIN_MENU', bot, sender, pageID: recipient.id, last_answer: message.event });\n    } else {\n      await sendActions({ action: 'PIZZAIBOT_MARKETING', bot, sender, pageID: recipient.id, data });\n    }\n  } else {\n    await mapEventsActions({ event, data, bot, sender, pageID: recipient.id })\n  }\n});\n\n/**\n * Question No.02 (location)\n * clicked \"Fazer Pedido\"\n * gonna ask for QUANTITY\n */\nbot.on('message', async (message) => {\n  const { sender, recipient, location } = message;\n  console.info(`\\x1b[43m on message \\x1b[0m, sender.id:\\x1b[32m${sender.id}\\x1b[0m, recipient.id:\\x1b[32m${recipient.id}\\x1b[0m, message.text:\\x1b[32m${message.text.substr(0, 15)}\\x1b[0m, bot.mkt:\\x1b[32m${bot.marketing}\\x1b[0m`);\n\n  try {\n    if (location) {\n      await sendActions({ action: 'LOCATION_CONFIRM_ADDRESS', bot, sender, pageID: recipient.id, location });\n    }\n    else if (message.text === 'hello' || message.text === 'hi') {\n      await sendActions({ action: 'BASIC_REPLY', bot, sender, pageID: recipient.id, data: 'Hello, how are you doing? Currently, I am working only in Portuguese, but, soon enough, your favorite restaurant will be with me.' });\n    }\n    else {\n      let _orderFlow = true;\n      if (bot.marketing) {\n        _orderFlow = false; // if it is an action from the marketing, so, this assures the order flow isn't called.\n        const mktContact = await getMktContact({ pageID: recipient.id, userID: sender.id });\n\n        if (mktContact.last_answer === 'testtype_customer') {\n          _orderFlow = true; // this assures the order flow will continue and marketing won't be called.\n        } else {\n          let _data = 'open_question';\n\n          if (mktContact.final === true) {\n            _data = 'returned_customer';\n          }\n          else if (mktContact.last_answer === 'finalquestion_mail')\n            _data = 'contact_mail';\n          else if (mktContact.last_answer === 'finalquestion_phone')\n            _data = 'contact_phone';\n          else if (mktContact.last_answer === 'type_phone' || mktContact.last_answer === 'retype_phone')\n            _data = 'contact_phone';\n          else if (mktContact.last_answer === 'orderConfirmation_question')\n            _data = 'open_question';\n          else _data = await m_checkLastQuestion(recipient.id, sender.id);\n          await sendActions({ action: 'PIZZAIBOT_MARKETING', bot, sender, pageID: message.recipient.id, data: _data, text: message.text });\n        }\n      }\n      // only when it is from the order flow, not from the marketing.\n      if (_orderFlow) {\n        await bot.startTyping(sender.id);\n        await Bot.wait(1000);\n        const answer = await confirmTypedText(recipient.id, sender.id, message);\n        await bot.stopTyping(sender.id);\n        await bot.send(sender.id, answer);\n      }\n    }\n  } catch (onMessageError) {\n    console.error({ onMessageError });\n    const outError = await sendErrorMsg(onMessageError.message);\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, outError);\n  }\n});\n\n/**\n * clicked \"Fazer Pedido\"\n * gonna ask for QUANTITY\n * Dealing with marketing.\n */\nbot.on('quick-reply', async (message, quick_reply) => {\n\n  const { sender, recipient } = message;\n  const { payload } = quick_reply;\n\n  console.info(`\\x1b[43m quick-reply \\x1b[0m, sender.id:\\x1b[32m${sender.id}\\x1b[0m, recipient.id:\\x1b[32m${recipient.id}\\x1b[0m, payload:\\x1b[32m${payload}\\x1b[0m, bot.mkt:\\x1b[32m${bot.marketing}\\x1b[0m`);\n\n\n  try {\n    if (payload) {\n      /**\n       * Both marketing and Order flow use this quick_reply answer, so, I am\n       * checking if marketing is in a state where an test order has been placed and, if so,\n       * I redirect the flow to the order.\n       */\n      let _orderFlow = true;\n\n      if (bot.marketing) {\n        _orderFlow = false; // if it is an action from the marketing, so, this assures the order flow isn't called.\n\n        const mktContact = await getMktContact({ pageID: recipient.id, userID: sender.id });\n\n        if (mktContact.last_answer === 'testtype_customer') {\n          _orderFlow = true; // this assures the order flow will continue and marketing won't be called.\n        } else {\n          await sendActions({ action: 'PIZZAIBOT_MARKETING', bot, sender, pageID: recipient.id, payload: payload, data: 'contact_phone' });\n        }\n      }\n      // only when it is from the order flow, not from the marketing.\n      if (_orderFlow) {\n        await sendActions({ action: 'SHOW_PHONE', bot, sender, pageID: recipient.id, payload: payload });\n        await sendActions({ action: 'ASK_FOR_QUANTITY', bot, sender, pageID: recipient.id });\n      }\n    }\n  } catch (quickReplyError) {\n    console.error({ quickReplyError });\n    const outError = await sendErrorMsg(quickReplyError.message);\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, outError);\n  }\n});"],"file":"server-bot.js"}