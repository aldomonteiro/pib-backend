{"version":3,"sources":["../src/server-bot.js"],"names":["dotenv","config","env","process","NODE_ENV","debug","mongo_url","DEV_MONGODB_URL","PRD_MONGODB_URL","RETRY_TIMEOUT","options","useNewUrlParser","autoReconnect","keepAlive","reconnectInterval","reconnectTries","isConnectedBefore","connect","mongoose","catch","err","console","error","set","Promise","connection","on","setTimeout","info","close","warn","exit","global","pagesKeyID","Object","pagesMarketing","app","bot","Bot","FB_VERIFY_TOKEN","logger","token","req","res","tz","format","use","bodyParser","urlencoded","extended","json","next","doNext","body","object","entry","length","pageID","id","marketing","timerIdentifier","Math","random","time","accessToken","name","timeEnd","expressAppUseGetTokenError","log","router","listen","FB_WEBHOOK_PORT","message","sender","action","recipient","last_answer","event","data","outError","stopTyping","send","location","text","_orderFlow","userID","mktContact","_data","final","startTyping","wait","answer","onMessageError","quick_reply","payload","quickReplyError"],"mappings":"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A;AAAA;AAAA,mBAkCZrB,GAAG,CAAC4C,IAAJ,CAASR,MAAM,CAACf,EAAhB,EAAoBqB,QAApB,CAlCY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA,K,CAsCA;;AACA;;;;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;;;;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAGA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAGA;;;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;;;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import \"@babel/polyfill\";\nimport express from \"express\";\nimport logger from \"morgan\";\nimport bodyParser from \"body-parser\";\nimport dotenv from \"dotenv\";\nimport moment from 'moment-timezone';\nimport mongoose from 'mongoose';\nimport Debug from 'debug';\nimport { Bot } from 'facebook-messenger-bot';\nimport { getOnePageToken, getAllPages, getOnePageData } from './api/controllers/pagesController';\nimport { getPricingSizing } from './api/controllers/pricingsController';\nimport getCardapio from './api/bot/show_cardapio';\nimport { choices_sizes } from './api/util/util';\nimport {\n  sendWelcomeMessage,\n  sendErrorMsg,\n  sendMainMenu,\n  sendCardapio,\n  askForPhone,\n  showPhone,\n  askToTypePhone,\n  askForQuantity,\n  askForQuantityMore,\n  showQuantity,\n  askForSize,\n  showSize,\n  askForFlavor,\n  showFlavor,\n  showOrderOrNextItem,\n  askForLocation,\n  confirmAddressOrAskLocation,\n  confirmLocationAddress,\n  showAddress,\n  confirmOrder,\n  askToTypeAddress,\n  confirmTypedText,\n  sendHorario,\n  basicReply,\n  askForChangeOrder,\n  askForSplitFlavorOrConfirm,\n  askForFlavorOrConfirm,\n  askForSpecificItem,\n  updateItemAskOptions,\n  showOrderOrAskForPhone,\n  showSplit\n} from './api/bot/botController';\n\nimport { sendActions, mapEventsActions } from './api/bot/actionsController';\nimport { getMktContact } from \"./api/controllers/mkt_contact_controller\";\nimport { m_checkLastQuestion } from \"./api/bot/botMarkController\";\n\ndotenv.config();\nconst env = process.env.NODE_ENV || 'production';\n\nconst debug = Debug('server-bot');\n\n// --- START MongoDB connection -----------------------------\nlet mongo_url = process.env.DEV_MONGODB_URL;\nif (env === 'production')\n  mongo_url = process.env.PRD_MONGODB_URL;\n\n\nconst RETRY_TIMEOUT = 3000\n\nconst options = {\n  useNewUrlParser: true,\n  autoReconnect: true,\n  keepAlive: 30000,\n  reconnectInterval: RETRY_TIMEOUT,\n  reconnectTries: 10000\n}\n\nlet isConnectedBefore = false\n\nconst connect = () => {\n  return mongoose.connect(mongo_url, options)\n    .catch(err => console.error('Mongoose connect(...) failed with err: ', err))\n}\n\nconnect();\n\nmongoose.set('useCreateIndex', true);\nmongoose.Promise = Promise;\n\nmongoose.connection.on('error', () => {\n  console.error('Could not connect to MongoDB')\n});\n\nmongoose.connection.on('disconnected', () => {\n  console.error('Lost MongoDB connection...')\n  if (!isConnectedBefore) {\n    setTimeout(() => connect(), RETRY_TIMEOUT)\n  }\n});\n\nmongoose.connection.on('connected', () => {\n  isConnectedBefore = true\n  console.info('Connection established to MongoDB')\n});\n\nmongoose.connection.on('reconnected', () => {\n  console.info('Reconnected to MongoDB')\n});\n\n// Close the Mongoose connection, when receiving SIGINT\nprocess.on('SIGINT', () => {\n  mongoose.connection.close(function () {\n    console.warn('Force to close the MongoDB connection after SIGINT')\n    process.exit(0)\n  })\n});\n// --- END MongoDB connection -----------------------------\n\n\nglobal.pagesKeyID = new Object();\nglobal.pagesMarketing = new Object();\n\nconst app = express();\n\nconst bot = new Bot(process.env.FB_VERIFY_TOKEN, true);\n\n// Beggining - That is all to log in the local timezone\n// https://medium.com/front-end-hacking/node-js-logs-in-local-timezone-on-morgan-and-winston-9e98b2b9ca45\n// [Node.js] Logs in Local Timezone on Morgan\nlogger.token('date', (req, res, tz) => {\n  return moment().tz(tz).format();\n})\nlogger.format('myformat', '[:date[America/Sao_Paulo]] \":method :url\" :status :res[content-length] - :response-time ms');\n\napp.use(logger(\"myformat\"));\n// End - That is all to log in the right timezone\n\napp.set('json spaces', 2);\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\napp.use('/buckets/facebook', async (req, res, next) => {\n  let doNext = true;\n  if (req.body && req.body.object === 'page') {\n    if (req.body.entry.length > 0) {\n      try {\n        // Iterates over each entry - there may be multiple if batched\n        // for (let i = 0; i < req.body.entry.length; i++) {\n        let pageID = req.body.entry[0].id;\n        if (global.pagesKeyID[pageID] && global.pagesKeyID[pageID] !== '') {\n          req.token = global.pagesKeyID[pageID];\n          req.marketing = global.pagesMarketing[pageID];\n        }\n        else {\n          let timerIdentifier = \"getOnePageToken\" + Math.random();\n          console.time(timerIdentifier);\n          const { accessToken, name, marketing } = await getOnePageToken(pageID);\n          console.timeEnd(timerIdentifier);\n\n          req.token = accessToken;\n          req.marketing = marketing;\n          debug('req.marketing:', req.marketing);\n\n          global.pagesKeyID[pageID] = accessToken;\n          global.pagesMarketing[pageID] = marketing;\n        }\n\n        // const _time = req.body.entry[0].time;\n        // const messageTime = new Date(_time).toLocaleTimeString('pt-BR');\n        // console.info(`${messageTime} From ${pageID} memory tokens:${Object.keys(global.pagesKeyID).length}`);\n\n      } catch (expressAppUseGetTokenError) {\n        console.error({ expressAppUseGetTokenError });\n      }\n    }\n  }\n  else {\n    console.log('Something came, not a page...');\n  }\n  if (doNext)\n    next();\n});\n\napp.use('/buckets/facebook', bot.router());\napp.listen(process.env.FB_WEBHOOK_PORT, () => console.log(`Bot server listening on port ${process.env.FB_WEBHOOK_PORT}`));\n\n/**\n * Event triggered when the button \"GET_STARTED\" is pressed.\n */\nbot.on('GET_STARTED', async (message) => {\n  const { sender } = message;\n  try {\n    await sendActions({ action: 'SEND_WELCOME', bot, sender, pageID: message.recipient.id, last_answer: message.event });\n    if (bot.marketing) {\n      await sendActions({ action: 'PIZZAIBOT_MARKETING', bot, sender, pageID: message.recipient.id, data: 'GET_STARTED' });\n    } else {\n      // Send Main Menu\n      await sendActions({ action: 'SEND_MAIN_MENU', bot, sender, pageID: message.recipient.id, last_answer: message.event });\n    }\n  } catch (error) {\n    console.error('GET_STARTED error:', error.message);\n    const outError = await sendErrorMsg(error.message);\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, outError);\n  }\n});\n\n// all postbacks are emitted via 'postback'\nbot.on('postback', async (event, message, data) => {\n  const { sender, recipient } = message;\n  console.info(`postback, event:${event}, data:${data}.`);\n  console.info(message);\n\n  if (event === 'PIZZAIBOT_MARKETING') {\n    if (data === 'testtypecustomer_begin') {\n      await sendActions({ action: 'SEND_MAIN_MENU', bot, sender, pageID: recipient.id, last_answer: message.event });\n    } else {\n      await sendActions({ action: 'PIZZAIBOT_MARKETING', bot, sender, pageID: recipient.id, data });\n    }\n  } else {\n    await mapEventsActions({ event, data, bot, sender, pageID: recipient.id })\n  }\n});\n\n/**\n * Question No.02 (location)\n * clicked \"Fazer Pedido\"\n * gonna ask for QUANTITY\n */\nbot.on('message', async (message) => {\n  const { sender, recipient, location } = message;\n\n  console.info('on message:', message);\n\n  try {\n    if (location) {\n      await sendActions({ action: 'LOCATION_CONFIRM_ADDRESS', bot, sender, pageID: recipient.id, location });\n    }\n    else if (message.text === 'hello' || message.text === 'hi') {\n      await sendActions({ action: 'BASIC_REPLY', bot, sender, pageID: recipient.id, data: 'Hello, how are you doing? Currently, I am working only in Portuguese, but, soon enough, your favorite restaurant will be with me.' });\n    }\n    else {\n      let _orderFlow = true;\n      if (bot.marketing) {\n        _orderFlow = false; // if it is an action from the marketing, so, this assures the order flow isn't called.\n        const mktContact = await getMktContact({ pageID: recipient.id, userID: sender.id });\n\n        if (mktContact.last_answer === 'testtype_customer') {\n          _orderFlow = true; // this assures the order flow will continue and marketing won't be called.\n        } else {\n          let _data = 'open_question';\n\n          if (mktContact.final === true) {\n            _data = 'returned_customer';\n          }\n          else if (mktContact.last_answer === 'finalquestion_mail')\n            _data = 'contact_mail';\n          else if (mktContact.last_answer === 'finalquestion_phone')\n            _data = 'contact_phone';\n          else if (mktContact.last_answer === 'type_phone' || mktContact.last_answer === 'retype_phone')\n            _data = 'contact_phone';\n          else if (mktContact.last_answer === 'orderConfirmation_question')\n            _data = 'open_question';\n          else _data = await m_checkLastQuestion(recipient.id, sender.id);\n          await sendActions({ action: 'PIZZAIBOT_MARKETING', bot, sender, pageID: message.recipient.id, data: _data, text: message.text });\n        }\n      }\n      // only when it is from the order flow, not from the marketing.\n      if (_orderFlow) {\n        await bot.startTyping(sender.id);\n        await Bot.wait(1000);\n        const answer = await confirmTypedText(recipient.id, sender.id, message);\n        await bot.stopTyping(sender.id);\n        await bot.send(sender.id, answer);\n      }\n    }\n  } catch (onMessageError) {\n    console.error({ onMessageError });\n    const outError = await sendErrorMsg(onMessageError.message);\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, outError);\n  }\n});\n\n/**\n * clicked \"Fazer Pedido\"\n * gonna ask for QUANTITY\n * Dealing with marketing.\n */\nbot.on('quick-reply', async (message, quick_reply) => {\n\n  const { sender, recipient } = message;\n  const { payload } = quick_reply;\n  try {\n    if (payload) {\n      /**\n       * Both marketing and Order flow use this quick_reply answer, so, I am\n       * checking if marketing is in a state where an test order has been placed and, if so,\n       * I redirect the flow to the order.\n       */\n      let _orderFlow = true;\n\n      if (bot.marketing) {\n        _orderFlow = false; // if it is an action from the marketing, so, this assures the order flow isn't called.\n\n        const mktContact = await getMktContact({ pageID: recipient.id, userID: sender.id });\n\n        if (mktContact.last_answer === 'testtype_customer') {\n          _orderFlow = true; // this assures the order flow will continue and marketing won't be called.\n        } else {\n          await sendActions({ action: 'PIZZAIBOT_MARKETING', bot, sender, pageID: recipient.id, payload: payload, data: 'contact_phone' });\n        }\n      }\n      // only when it is from the order flow, not from the marketing.\n      if (_orderFlow) {\n        await sendActions({ action: 'SHOW_PHONE', bot, sender, pageID: recipient.id, payload: payload });\n        await sendActions({ action: 'ASK_FOR_QUANTITY', bot, sender, pageID: recipient.id });\n      }\n    }\n  } catch (quickReplyError) {\n    console.error({ quickReplyError });\n    const outError = await sendErrorMsg(quickReplyError.message);\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, outError);\n  }\n});\n\n// TESTAR\n/**\n * answered CORRECT_SAVED_ADDRESS\n * gonna ask for phone\n */\n// bot.on('LOCATION_ADDRESS', async (message, data) => {\n//   const { sender, recipient } = message;\n\n//   try {\n//     if (data === 'incorrect_address') {\n//       await sendActions({ action: 'ASK_TO_TYPE_ADDRESS', bot, sender, pageID: recipient.id });\n//     }\n//     else {\n//       await sendActions({ action: 'SHOW_ADDRESS', bot, sender, pageID: recipient.id, data: data });\n\n//       await sendActions({ action: 'SHOW_ORDER_OR_ASK_FOR_PHONE', bot, sender, pageID: recipient.id });\n//     }\n//   } catch (error) {\n//     console.error('LOCATION_ADDRESS:', error.message);\n//     const outError = await sendErrorMsg(error.message);\n//     await bot.stopTyping(sender.id);\n//     await bot.send(sender.id, outError);\n//   }\n// });\n\n// TESTAR\n/**\n * answered CORRECT_SAVED_ADDRESS\n * gonna ask for phone\n */\n// bot.on('WRONG_SAVED_ADDRESS', async (message, data) => {\n//   const { sender, recipient } = message;\n//   try {\n\n//     await sendActions({ action: 'ASK_FOR_LOCATION', bot, sender, pageID: recipient.id });\n\n//   } catch (error) {\n//     console.error('WRONG_SAVED_ADDRESS:', error.message);\n//     const outError = await sendErrorMsg(error.message);\n//     await bot.stopTyping(sender.id);\n//     await bot.send(sender.id, outError);\n//   }\n// });\n\n// bot.on('PHONE_CONFIRMED', async (message, data) => {\n//   const { sender, recipient } = message;\n//   try {\n//     if (data === 'change_phone') {\n//       await sendActions({ action: 'ASK_TO_TYPE_PHONE', bot, sender, pageID: recipient.id });\n//     }\n//     else {\n//       await sendActions({ action: 'SHOW_PHONE', bot, sender, pageID: recipient.id, data: data });\n\n//       await sendActions({ action: 'ASK_FOR_QUANTITY', bot, sender, pageID: recipient.id });\n//     }\n//   } catch (error) {\n//     console.error('PHONE_CONFIRMED:', error.message);\n//     const outError = await sendErrorMsg(error.message);\n//     await bot.stopTyping(sender.id);\n//     await bot.send(sender.id, outError);\n//   }\n\n// });\n\n\n/**\n * answered ORDER_QTY\n * gonna ask for SIZE\n */\n// bot.on('ORDER_QTY', async (message, data) => {\n//   const { sender, recipient } = message;\n//   try {\n//     if (data && data === 'qty_more') {\n//       await bot.startTyping(sender.id);\n//       await Bot.wait(1000);\n//       const out = await askForQuantityMore(recipient.id, sender.id);\n//       await bot.stopTyping(sender.id);\n//       await bot.send(sender.id, out);\n//     }\n//     else {\n//       // show what the user chose\n//       await bot.startTyping(sender.id);\n//       await Bot.wait(1000);\n//       const answer = await showQuantity(recipient.id, sender.id, data);\n//       await bot.stopTyping(sender.id);\n//       await bot.send(sender.id, answer);\n//       // next question\n//       await bot.startTyping(sender.id);\n//       await Bot.wait(1000);\n//       const out = await askForSize(recipient.id, sender.id);\n//       await bot.stopTyping(sender.id);\n//       await bot.send(sender.id, out);\n//     }\n//   } catch (error) {\n//     console.error('ORDER_QTY:', error.message);\n//     const outError = await sendErrorMsg(error.message);\n//     await bot.stopTyping(sender.id);\n//     await bot.send(sender.id, outError);\n//   }\n// });\n\n/**\n * answered ORDER_SIZE\n * gonna ask for FLAVOR\n */\n// bot.on('ORDER_SIZE', async (message, data) => {\n//   const { sender, recipient } = message;\n\n//   try {\n//     // show what the user chose\n//     await bot.startTyping(sender.id);\n//     await Bot.wait(900);\n//     const answer = await showSize(recipient.id, sender.id, data);\n//     await bot.stopTyping(sender.id);\n//     await bot.send(sender.id, answer);\n\n//     // check if the size is splitable.\n//     await bot.startTyping(sender.id);\n//     await Bot.wait(900);\n//     const out = await askForSplitFlavorOrConfirm(message.recipient.id, sender.id, 1);\n//     await bot.stopTyping(sender.id);\n//     await bot.send(sender.id, out);\n\n//   } catch (error) {\n//     console.error('ORDER_SIZE:', error.message);\n//     const outError = await sendErrorMsg(error.message);\n//     await bot.stopTyping(sender.id);\n//     await bot.send(sender.id, outError);\n//   }\n// });\n\n\n// bot.on('ORDER_SPLIT', async (message, data) => {\n//   const { sender, recipient } = message;\n\n//   await bot.startTyping(sender.id);\n//   await Bot.wait(900);\n//   const answer = await showSplit(recipient.id, sender.id, data);\n//   await bot.stopTyping(sender.id);\n//   await bot.send(sender.id, answer);\n\n//   const split = Number(data);\n\n//   // next question\n//   await bot.startTyping(sender.id);\n//   await Bot.wait(250);\n//   const out = await askForFlavorOrConfirm(message.recipient.id, sender.id, 1, split);\n//   await bot.stopTyping(sender.id);\n//   await bot.send(sender.id, out);\n// });\n\n/**\n * answered ORDER_FLAVOR\n * gonna ask for confirmation\n */\n// bot.on('ORDER_FLAVOR', async (message, data) => {\n//   const { sender, recipient } = message;\n//   try {\n//     if (data && data.option && data.option === 'flavors_more') {\n//       await sendActions({ action: 'ASK_FOR_FLAVOR', bot, sender, pageID: recipient.id, multiple: data.multiple })\n//     }\n//     else {\n//       await sendActions({ action: 'SHOW_FLAVOR', bot, sender, pageID: recipient.id, data })\n\n//       // show summary\n//       await bot.startTyping(sender.id);\n//       await Bot.wait(1000);\n//       const summary = await showOrderOrNextItem(recipient.id, sender.id);\n//       await bot.stopTyping(sender.id);\n//       await bot.send(sender.id, summary);\n//     }\n//   } catch (error) {\n//     console.error('ORDER_FLAVOR:', error.message);\n//     const outError = await sendErrorMsg(error.message);\n//     await bot.stopTyping(sender.id);\n//     await bot.send(sender.id, outError);\n//   }\n// });\n\n/**\n * answered ORDER_SIZE\n * gonna ask for FLAVOR\n */\n// bot.on('ORDER_CONFIRM_BEVERAGE', async (message, data) => {\n//   const { sender, recipient } = message;\n\n//   try {\n//     if (data === 'beverage_yes')\n//       await sendActions({ action: 'ASK_FOR_BEVERAGE_OPTIONS', bot, sender, pageID: recipient.id, multiple: 1 })\n//     else {\n//       await sendActions({ action: 'SHOW_NO_BEVERAGE', bot, sender, pageID: recipient.id })\n//       await sendActions({ action: 'SHOW_FULL_ORDER', bot, sender, pageID: recipient.id })\n//     }\n\n//   } catch (orderConfirmBeverageErr) {\n//     console.error({ orderConfirmBeverageErr });\n//     const outError = await sendErrorMsg(orderConfirmBeverageErr.message);\n//     await bot.stopTyping(sender.id);\n//     await bot.send(sender.id, outError);\n//   }\n// });\n\n/**\n * answered ORDER_BEVERAGE\n * gonna ask for confirmation\n */\n// bot.on('ORDER_BEVERAGE', async (message, data) => {\n//   const { sender, recipient } = message;\n//   try {\n//     if (data && data.option && data.option === 'beverages_more') {\n//       // more beverages\n//       await sendActions({ action: 'ASK_FOR_BEVERAGE_OPTIONS', bot, sender, pageID: recipient.id, multiple: data.multiple })\n//     }\n//     else if (data && data.option && data.option === 'beverages_cancel') {\n//       await sendActions({ action: 'SHOW_NO_BEVERAGE', bot, sender, pageID: recipient.id })\n//       await sendActions({ action: 'SHOW_FULL_ORDER', bot, sender, pageID: recipient.id })\n//     }\n//     else {\n//       await sendActions({ action: 'SHOW_BEVERAGE', bot, sender, pageID: recipient.id, data: data })\n\n//       await sendActions({ action: 'SHOW_FULL_ORDER', bot, sender, pageID: recipient.id })\n//     }\n//   } catch (orderBeverageErr) {\n//     console.error({ orderBeverageErr });\n//     const outError = await sendErrorMsg(orderBeverageErr.message);\n//     await bot.stopTyping(sender.id);\n//     await bot.send(sender.id, outError);\n//   }\n// });\n\n/**\n * answered ORDER_PIZZA_CONFIRMATION\n */\n// bot.on('ORDER_PIZZA_CONFIRMATION', async (message, data) => {\n//   const { sender, recipient } = message;\n\n//   try {\n//     if (data === 'confirmation_yes') {\n//       await sendActions({ action: 'ASK_FOR_WANT_BEVERAGE', bot, sender, pageID: recipient.id });\n//     }\n//     else if (data === 'confirmation_no') {\n//       await bot.startTyping(sender.id);\n//       await Bot.wait(1000);\n//       const out = await askForChangeOrder(recipient.id, sender.id);\n//       await bot.stopTyping(sender.id);\n//       await bot.send(sender.id, out);\n//     }\n//   } catch (orderConfirmationError) {\n//     console.error({ orderConfirmationError });\n//     const outError = await sendErrorMsg(orderConfirmationError.message);\n//     await bot.stopTyping(sender.id);\n//     await bot.send(sender.id, outError);\n//   }\n\n// });\n\n\n/**\n * answered ORDER_CONFIRMATION\n */\n// bot.on('ORDER_CONFIRMATION', async (message, data) => {\n//   const { sender, recipient } = message;\n\n//   try {\n//     if (data === 'confirmation_yes') {\n//       await sendActions({ action: 'CONFIRM_ORDER', bot, sender, pageID: recipient.id });\n\n//       if (bot.marketing) { // marketing. if the order is confirmed, go on in the conversation\n//         await sendActions({ action: 'PIZZAIBOT_MARKETING', bot, sender, pageID: message.recipient.id, data: 'confirmation_yes' });\n//       }\n//     }\n//     else if (data === 'confirmation_no') {\n//       await bot.startTyping(sender.id);\n//       await Bot.wait(1000);\n//       const out = await askForChangeOrder(recipient.id, sender.id);\n//       await bot.stopTyping(sender.id);\n//       await bot.send(sender.id, out);\n//     }\n//   } catch (orderConfirmationErr) {\n//     console.error({ orderConfirmationErr });\n//     const outError = await sendErrorMsg(orderConfirmationErr.message);\n//     await bot.stopTyping(sender.id);\n//     await bot.send(sender.id, outError);\n//   }\n\n// });\n\n/**\n * answered wants change something in the order\n */\n// bot.on('ORDER_WANT_CHANGE', async (message, data) => {\n//   const { sender, recipient } = message;\n\n//   try {\n//     await bot.startTyping(sender.id);\n//     await Bot.wait(1000);\n//     const out = await askForSpecificItem(recipient.id, sender.id);\n//     await bot.stopTyping(sender.id);\n//     await bot.send(sender.id, out);\n//   } catch (error) {\n//     console.error('ORDER_WANT_CHANGE:', error.message);\n//     const outError = await sendErrorMsg(error.message);\n//     await bot.stopTyping(sender.id);\n//     await bot.send(sender.id, outError);\n//   }\n\n// });\n\n// bot.on('ORDER_CHANGE', async (message, data) => {\n//   const { sender, recipient } = message;\n\n//   try {\n//     await bot.startTyping(sender.id);\n//     await Bot.wait(500);\n//     let out;\n//     if (data === 'change_quantity') {\n//       out = await askForQuantity(recipient.id, sender.id);\n//     }\n//     else if (data === 'change_size') {\n//       out = await askForSize(recipient.id, sender.id);\n//     }\n//     else if (data === 'change_flavor') {\n//       out = await askForFlavor(message.recipient.id, sender.id, 1);\n//     }\n//     else if (data === 'change_address') {\n//       out = await askForLocation();\n//     }\n//     await bot.stopTyping(sender.id);\n//     await bot.send(sender.id, out);\n//   } catch (error) {\n//     console.error('ORDER_CHANGE:', error.message);\n//     const outError = await sendErrorMsg(error.message);\n//     await bot.stopTyping(sender.id);\n//     await bot.send(sender.id, outError);\n//   }\n// });\n\n// bot.on('ORDER_CHANGE_SELECT_ITEM', async (message, data) => {\n//   const { sender, recipient } = message;\n//   try {\n//     await bot.startTyping(sender.id);\n//     await Bot.wait(1000);\n//     const out = await updateItemAskOptions(recipient.id, sender.id, data);\n//     await bot.stopTyping(sender.id);\n//     await bot.send(sender.id, out);\n//   } catch (error) {\n//     console.error('ORDER_CHANGE_SELECT_ITEM:', error.message);\n//     const outError = await sendErrorMsg(error.message);\n//     await bot.stopTyping(sender.id);\n//     await bot.send(sender.id, outError);\n//   }\n// });\n\n\n"],"file":"server-bot.js"}