{"version":3,"sources":["../src/server-bot.js"],"names":["dotenv","config","env","process","NODE_ENV","debug","mongo_url","DEV_MONGODB_URL","PRD_MONGODB_URL","RETRY_TIMEOUT","options","useNewUrlParser","autoReconnect","keepAlive","reconnectInterval","reconnectTries","isConnectedBefore","connect","mongoose","err","console","error","set","Promise","connection","on","setTimeout","info","close","warn","exit","global","pagesKeyID","pagesMarketing","app","bot","Bot","FB_VERIFY_TOKEN","logger","token","req","res","tz","format","use","bodyParser","urlencoded","extended","json","next","header","method","sendStatus","doNext","body","object","entry","length","pageID","id","marketing","timerIdentifier","Math","random","time","accessToken","name","timeEnd","expressAppUseGetTokenError","log","event","message","sender","contact","uid","type","dir","text","response","args","replyData","router","listen","FB_WEBHOOK_PORT","recipient","action","last_answer","data","outError","stopTyping","send","location","substr","_orderFlow","userID","mktContact","_data","eAgradecimento","agradecimentosFinais","i","includes","onMessageError","quick_reply","payload","quickReplyError"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAIA;;AAIA;;AACA;;AACA;;;;;;;;AAKAA,mBAAOC,MAAP;;AACA,IAAMC,GAAG,GAAGC,OAAO,CAACD,GAAR,CAAYE,QAAZ,IAAwB,YAApC;AAEA,IAAMC,KAAK,GAAG,uBAAM,YAAN,CAAd,C,CAEA;;AACA,IAAIC,SAAS,GAAGH,OAAO,CAACD,GAAR,CAAYK,eAA5B;AACA,IAAIL,GAAG,KAAK,YAAZ,EACII,SAAS,GAAGH,OAAO,CAACD,GAAR,CAAYM,eAAxB;AAGJ,IAAMC,aAAa,GAAG,IAAtB;AAEA,IAAMC,OAAO,GAAG;AACZC,EAAAA,eAAe,EAAE,IADL;AAEZC,EAAAA,aAAa,EAAE,IAFH;AAGZC,EAAAA,SAAS,EAAE,KAHC;AAIZC,EAAAA,iBAAiB,EAAEL,aAJP;AAKZM,EAAAA,cAAc,EAAE;AALJ,CAAhB;AAQA,IAAIC,iBAAiB,GAAG,KAAxB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAClB,SAAOC,qBAASD,OAAT,CAAiBX,SAAjB,EAA4BI,OAA5B,WACI,UAAAS,GAAG;AAAA,WAAIC,OAAO,CAACC,KAAR,CAAc,yCAAd,EAAyDF,GAAzD,CAAJ;AAAA,GADP,CAAP;AAEH,CAHD;;AAKAF,OAAO;;AAEPC,qBAASI,GAAT,CAAa,gBAAb,EAA+B,IAA/B;;AACAJ,qBAASI,GAAT,CAAa,kBAAb,EAAiC,KAAjC;;AACAJ,qBAASK,OAAT,GAAmBA,OAAnB;;AAEAL,qBAASM,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAAgC,YAAM;AAClCL,EAAAA,OAAO,CAACC,KAAR,CAAc,8BAAd;AACH,CAFD;;AAIAH,qBAASM,UAAT,CAAoBC,EAApB,CAAuB,cAAvB,EAAuC,YAAM;AACzCL,EAAAA,OAAO,CAACC,KAAR,CAAc,4BAAd;;AACA,MAAI,CAACL,iBAAL,EAAwB;AACpBU,IAAAA,UAAU,CAAC;AAAA,aAAMT,OAAO,EAAb;AAAA,KAAD,EAAkBR,aAAlB,CAAV;AACH;AACJ,CALD;;AAOAS,qBAASM,UAAT,CAAoBC,EAApB,CAAuB,WAAvB,EAAoC,YAAM;AACtCT,EAAAA,iBAAiB,GAAG,IAApB;AACAI,EAAAA,OAAO,CAACO,IAAR,CAAa,mCAAb;AACH,CAHD;;AAKAT,qBAASM,UAAT,CAAoBC,EAApB,CAAuB,aAAvB,EAAsC,YAAM;AACxCL,EAAAA,OAAO,CAACO,IAAR,CAAa,wBAAb;AACH,CAFD,E,CAIA;;;AACAxB,OAAO,CAACsB,EAAR,CAAW,QAAX,EAAqB,YAAM;AACvBP,uBAASM,UAAT,CAAoBI,KAApB,CAA0B,YAAY;AAClCR,IAAAA,OAAO,CAACS,IAAR,CAAa,oDAAb;AACA1B,IAAAA,OAAO,CAAC2B,IAAR,CAAa,CAAb;AACH,GAHD;AAIH,CALD,E,CAMA;;AAGAC,MAAM,CAACC,UAAP,GAAoB,EAApB;AACAD,MAAM,CAACE,cAAP,GAAwB,EAAxB;AAEA,IAAMC,GAAG,GAAG,0BAAZ;AAEA,IAAMC,GAAG,GAAG,IAAIC,yBAAJ,CAAQjC,OAAO,CAACD,GAAR,CAAYmC,eAApB,EAAqC,IAArC,CAAZ,C,CAEA;AACA;AACA;AACA;;AACAC,mBAAOC,KAAP,CAAa,MAAb,EAAqB,UAACC,GAAD,EAAMC,GAAN,EAAWC,EAAX,EAAkB;AACnC,SAAO,kCAASA,EAAT,CAAYA,EAAZ,EAAgBC,MAAhB,EAAP;AACH,CAFD,E,CAGA;;;AACAL,mBAAOK,MAAP,CAAc,UAAd,EAA0B,4FAA1B;;AAEAT,GAAG,CAACU,GAAJ,CAAQ,wBAAO,UAAP,CAAR,E,CACA;;AAEAV,GAAG,CAACZ,GAAJ,CAAQ,aAAR,EAAuB,CAAvB;AACAY,GAAG,CAACU,GAAJ,CAAQC,uBAAWC,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AACAb,GAAG,CAACU,GAAJ,CAAQC,uBAAWG,IAAX,EAAR;AAEAd,GAAG,CAACU,GAAJ,CAAQ,UAAUJ,GAAV,EAAeC,GAAf,EAAoBQ,IAApB,EAA0B;AAC9BR,EAAAA,GAAG,CAACS,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAT,EAAAA,GAAG,CAACS,MAAJ,CAAW,kCAAX,EAA+C,IAA/C;AACAT,EAAAA,GAAG,CAACS,MAAJ,CAAW,8BAAX,EAA2C,6BAA3C;AACAT,EAAAA,GAAG,CAACS,MAAJ,CAAW,8BAAX,EACI,0FADJ;AAEAT,EAAAA,GAAG,CAACS,MAAJ,CAAW,+BAAX,EAA4C,eAA5C;;AAEA,MAAIV,GAAG,CAACW,MAAJ,KAAe,SAAnB,EAA8B;AAC1BV,IAAAA,GAAG,CAACW,UAAJ,CAAe,GAAf;AACH,GAFD,MAEO;AACHH,IAAAA,IAAI;AACP;AACJ,CAbD;AAgBAf,GAAG,CAACU,GAAJ,CAAQ,mBAAR;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA6B,iBAAOJ,GAAP,EAAYC,GAAZ,EAAiBQ,IAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrBI,YAAAA,MADqB,GACZ,IADY;;AAAA,kBAErBb,GAAG,CAACc,IAAJ,IAAYd,GAAG,CAACc,IAAJ,CAASC,MAAT,KAAoB,MAFX;AAAA;AAAA;AAAA;;AAAA,kBAGjBf,GAAG,CAACc,IAAJ,CAASE,KAAT,CAAeC,MAAf,GAAwB,CAHP;AAAA;AAAA;AAAA;;AAAA;AAKb;AACA;AACIC,YAAAA,MAPS,GAOAlB,GAAG,CAACc,IAAJ,CAASE,KAAT,CAAe,CAAf,EAAkBG,EAPlB;;AAAA,kBAQT5B,MAAM,CAACC,UAAP,CAAkB0B,MAAlB,KAA6B3B,MAAM,CAACC,UAAP,CAAkB0B,MAAlB,MAA8B,EARlD;AAAA;AAAA;AAAA;;AASTlB,YAAAA,GAAG,CAACD,KAAJ,GAAYR,MAAM,CAACC,UAAP,CAAkB0B,MAAlB,CAAZ;AACAlB,YAAAA,GAAG,CAACoB,SAAJ,GAAgB7B,MAAM,CAACE,cAAP,CAAsByB,MAAtB,CAAhB;AAVS;AAAA;;AAAA;AAYLG,YAAAA,eAZK,GAYa,oBAAoBC,IAAI,CAACC,MAAL,EAZjC;AAaT3C,YAAAA,OAAO,CAAC4C,IAAR,CAAaH,eAAb;AAbS;AAAA,mBAcsC,sCAAgBH,MAAhB,CAdtC;;AAAA;AAAA;AAcDO,YAAAA,WAdC,SAcDA,WAdC;AAcYC,YAAAA,IAdZ,SAcYA,IAdZ;AAckBN,YAAAA,SAdlB,SAckBA,SAdlB;AAeTxC,YAAAA,OAAO,CAAC+C,OAAR,CAAgBN,eAAhB;AAEArB,YAAAA,GAAG,CAACD,KAAJ,GAAY0B,WAAZ;AACAzB,YAAAA,GAAG,CAACoB,SAAJ,GAAgBA,SAAhB;AACAvD,YAAAA,KAAK,CAAC,uCAAD,EAA0CmC,GAAG,CAACoB,SAA9C,CAAL;AACAxC,YAAAA,OAAO,CAACO,IAAR,8DAAmE+B,MAAnE,wCAAuGQ,IAAvG,sCAAuI1B,GAAG,CAACoB,SAA3I;AAEA7B,YAAAA,MAAM,CAACC,UAAP,CAAkB0B,MAAlB,IAA4BO,WAA5B;AACAlC,YAAAA,MAAM,CAACE,cAAP,CAAsByB,MAAtB,IAAgCE,SAAhC;;AAvBS;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgCbxC,YAAAA,OAAO,CAACC,KAAR,CAAc;AAAE+C,cAAAA,0BAA0B;AAA5B,aAAd;;AAhCa;AAAA;AAAA;;AAAA;AAoCrBhD,YAAAA,OAAO,CAACiD,GAAR,CAAY,+BAAZ;;AApCqB;AAsCzB,gBAAIhB,MAAJ,EACIJ,IAAI;;AAvCiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B;;AAAA;AAAA;AAAA;AAAA;AA0CAf,GAAG,CAACU,GAAJ,CAAQ,mBAAR;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA6B,kBAAOJ,GAAP,EAAYC,GAAZ,EAAiBQ,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACrBT,GAAG,CAACc,IADiB;AAAA;AAAA;AAAA;;AAAA,kBAGjBd,GAAG,CAACc,IAAJ,CAASgB,KAAT,KAAmB,SAHF;AAAA;AAAA;AAAA;;AAAA;AAKPC,YAAAA,OALO,GAKG/B,GAAG,CAACc,IALP;AAMblC,YAAAA,OAAO,CAACO,IAAR,CAAa,+BAAb;AACAP,YAAAA,OAAO,CAACO,IAAR,CAAa4C,OAAb;AACAnD,YAAAA,OAAO,CAACO,IAAR,CAAa,+BAAb;AAEM6C,YAAAA,MAVO,GAUED,OAAO,CAACE,OAAR,CAAgBC,GAVlB;;AAAA,kBAWTH,OAAO,CAACA,OAAR,CAAgBI,IAAhB,KAAyB,MAAzB,IAAmCJ,OAAO,CAACA,OAAR,CAAgBK,GAAhB,KAAwB,GAXlD;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAYU,qCAZV;;AAAA;AAYHC,YAAAA,IAZG;AAAA;AAAA,mBAac,0CAAqBL,MAArB,EAA6BK,IAA7B,CAbd;;AAAA;AAaHC,YAAAA,QAbG;AAeT1D,YAAAA,OAAO,CAACO,IAAR,CAAa,+BAAb;AACAP,YAAAA,OAAO,CAACO,IAAR,CAAamD,QAAb;AACA1D,YAAAA,OAAO,CAACO,IAAR,CAAa,+BAAb;;AAjBS;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqBbP,YAAAA,OAAO,CAACC,KAAR,CAAc;AAAEF,cAAAA,GAAG;AAAL,aAAd;;AArBa;AAAA;AAAA;;AAAA;AAwBjB;AACQ4D,YAAAA,IAzBS,GAyBAvC,GAAG,CAACc,IAzBJ,CAyBTyB,IAzBS;;AAAA,iBA2BbA,IA3Ba;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA4BW,kCAAaA,IAAb,CA5BX;;AAAA;AA4BPC,YAAAA,SA5BO;AA6BbvC,YAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEuB,cAAAA,OAAO,EAAES;AAAX,aAAT;;AA7Ba;AAAA;AAAA;;AAAA;AAiCrB5D,YAAAA,OAAO,CAACO,IAAR,CAAa,sBAAb;AACAP,YAAAA,OAAO,CAACO,IAAR,CAAaa,GAAb;;AAlCqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B;;AAAA;AAAA;AAAA;AAAA;AAuCAN,GAAG,CAACU,GAAJ,CAAQ,mBAAR,EAA6BT,GAAG,CAAC8C,MAAJ,EAA7B;AACA/C,GAAG,CAACgD,MAAJ,CAAW/E,OAAO,CAACD,GAAR,CAAYiF,eAAvB,EAAwC;AAAA,SAAM/D,OAAO,CAACiD,GAAR,wCAA4ClE,OAAO,CAACD,GAAR,CAAYiF,eAAxD,EAAN;AAAA,CAAxC;AAEA;;;;AAGAhD,GAAG,CAACV,EAAJ,CAAO,aAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAsB,kBAAO8C,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACVC,YAAAA,MADU,GACYD,OADZ,CACVC,MADU,EACFY,SADE,GACYb,OADZ,CACFa,SADE;AAElBhE,YAAAA,OAAO,CAACO,IAAR,qDAA0D4C,OAAO,CAACD,KAAlE,wCAAqGE,MAAM,CAACb,EAA5G,2CAA+IyB,SAAS,CAACzB,EAAzJ,sCAAuLxB,GAAG,CAACyB,SAA3L;AAFkB;AAAA;AAAA,mBAKR,oCAAY;AAAEyB,cAAAA,MAAM,EAAE,cAAV;AAA0BlD,cAAAA,GAAG,EAAHA,GAA1B;AAA+BqC,cAAAA,MAAM,EAANA,MAA/B;AAAuCd,cAAAA,MAAM,EAAE0B,SAAS,CAACzB,EAAzD;AAA6D2B,cAAAA,WAAW,EAAEf,OAAO,CAACD;AAAlF,aAAZ,CALQ;;AAAA;AAAA,iBAMVnC,GAAG,CAACyB,SANM;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAOJ,oCAAY;AAAEyB,cAAAA,MAAM,EAAE,qBAAV;AAAiClD,cAAAA,GAAG,EAAHA,GAAjC;AAAsCqC,cAAAA,MAAM,EAANA,MAAtC;AAA8Cd,cAAAA,MAAM,EAAE0B,SAAS,CAACzB,EAAhE;AAAoE4B,cAAAA,IAAI,EAAE;AAA1E,aAAZ,CAPI;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAUJ,oCAAY;AAAEF,cAAAA,MAAM,EAAE,gBAAV;AAA4BlD,cAAAA,GAAG,EAAHA,GAA5B;AAAiCqC,cAAAA,MAAM,EAANA,MAAjC;AAAyCd,cAAAA,MAAM,EAAE0B,SAAS,CAACzB,EAA3D;AAA+D2B,cAAAA,WAAW,EAAEf,OAAO,CAACD;AAApF,aAAZ,CAVI;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAadlD,YAAAA,OAAO,CAACC,KAAR,CAAc,oBAAd,EAAoC,aAAMkD,OAA1C;AAbc;AAAA,mBAcS,iCAAa,aAAMA,OAAnB,CAdT;;AAAA;AAcRiB,YAAAA,QAdQ;AAAA;AAAA,mBAeRrD,GAAG,CAACsD,UAAJ,CAAejB,MAAM,CAACb,EAAtB,CAfQ;;AAAA;AAAA;AAAA,mBAgBRxB,GAAG,CAACuD,IAAJ,CAASlB,MAAM,CAACb,EAAhB,EAAoB6B,QAApB,CAhBQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA,K,CAoBA;;AACArD,GAAG,CAACV,EAAJ,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAmB,kBAAO6C,KAAP,EAAcC,OAAd,EAAuBgB,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AACPf,YAAAA,MADO,GACeD,OADf,CACPC,MADO,EACCY,SADD,GACeb,OADf,CACCa,SADD;AAEfhE,YAAAA,OAAO,CAACO,IAAR,kDAAuD2C,KAAvD,mCAAqFiB,IAArF,wCAAuHf,MAAM,CAACb,EAA9H,2CAAiKyB,SAAS,CAACzB,EAA3K,sCAAyMxB,GAAG,CAACyB,SAA7M;;AAFe,kBAIXU,KAAK,KAAK,qBAJC;AAAA;AAAA;AAAA;;AAAA,kBAKPiB,IAAI,KAAK,wBALF;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMD,oCAAY;AAAEF,cAAAA,MAAM,EAAE,gBAAV;AAA4BlD,cAAAA,GAAG,EAAHA,GAA5B;AAAiCqC,cAAAA,MAAM,EAANA,MAAjC;AAAyCd,cAAAA,MAAM,EAAE0B,SAAS,CAACzB,EAA3D;AAA+D2B,cAAAA,WAAW,EAAEf,OAAO,CAACD;AAApF,aAAZ,CANC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAQD,oCAAY;AAAEe,cAAAA,MAAM,EAAE,qBAAV;AAAiClD,cAAAA,GAAG,EAAHA,GAAjC;AAAsCqC,cAAAA,MAAM,EAANA,MAAtC;AAA8Cd,cAAAA,MAAM,EAAE0B,SAAS,CAACzB,EAAhE;AAAoE4B,cAAAA,IAAI,EAAJA;AAApE,aAAZ,CARC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAWL,yCAAiB;AAAEjB,cAAAA,KAAK,EAALA,KAAF;AAASiB,cAAAA,IAAI,EAAJA,IAAT;AAAepD,cAAAA,GAAG,EAAHA,GAAf;AAAoBqC,cAAAA,MAAM,EAANA,MAApB;AAA4Bd,cAAAA,MAAM,EAAE0B,SAAS,CAACzB;AAA9C,aAAjB,CAXK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAAA;AAAA;AAAA;AAAA;AAeA;;;;;;AAKAxB,GAAG,CAACV,EAAJ,CAAO,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAkB,kBAAO8C,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACNC,YAAAA,MADM,GACgCD,OADhC,CACNC,MADM,EACEY,SADF,GACgCb,OADhC,CACEa,SADF,EACaO,QADb,GACgCpB,OADhC,CACaoB,QADb,EACuBd,IADvB,GACgCN,OADhC,CACuBM,IADvB;AAEdzD,YAAAA,OAAO,CAACO,IAAR,0DAA+D6C,MAAM,CAACb,EAAtE,2CAAyGyB,SAAS,CAACzB,EAAnH,2CAAsJkB,IAAI,IAAIA,IAAI,CAACe,MAAL,CAAY,CAAZ,EAAe,EAAf,CAA9J,sCAA4MzD,GAAG,CAACyB,SAAhN;AAFc;;AAAA,iBAKN+B,QALM;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMA,oCAAY;AAAEN,cAAAA,MAAM,EAAE,0BAAV;AAAsClD,cAAAA,GAAG,EAAHA,GAAtC;AAA2CqC,cAAAA,MAAM,EAANA,MAA3C;AAAmDd,cAAAA,MAAM,EAAE0B,SAAS,CAACzB,EAArE;AAAyEgC,cAAAA,QAAQ,EAARA;AAAzE,aAAZ,CANA;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAOCd,IAAI,KAAK,OAAT,IAAoBA,IAAI,KAAK,IAP9B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAQA,oCAAY;AAAEQ,cAAAA,MAAM,EAAE,aAAV;AAAyBlD,cAAAA,GAAG,EAAHA,GAAzB;AAA8BqC,cAAAA,MAAM,EAANA,MAA9B;AAAsCd,cAAAA,MAAM,EAAE0B,SAAS,CAACzB,EAAxD;AAA4D4B,cAAAA,IAAI,EAAE;AAAlE,aAAZ,CARA;;AAAA;AAAA;AAAA;;AAAA;AAUFM,YAAAA,UAVE,GAUW,IAVX;;AAAA,iBAWF1D,GAAG,CAACyB,SAXF;AAAA;AAAA;AAAA;;AAYFiC,YAAAA,UAAU,GAAG,KAAb,CAZE,CAYkB;;AAZlB;AAAA,mBAauB,2CAAc;AAAEnC,cAAAA,MAAM,EAAE0B,SAAS,CAACzB,EAApB;AAAwBmC,cAAAA,MAAM,EAAEtB,MAAM,CAACb;AAAvC,aAAd,CAbvB;;AAAA;AAaIoC,YAAAA,UAbJ;;AAAA,kBAeEA,UAAU,CAACT,WAAX,KAA2B,mBAf7B;AAAA;AAAA;AAAA;;AAgBEO,YAAAA,UAAU,GAAG,IAAb,CAhBF,CAgBqB;;AAhBrB;AAAA;;AAAA;AAkBMG,YAAAA,KAlBN,GAkBc,eAlBd;AAmBMC,YAAAA,cAnBN,GAmBuB,KAnBvB;;AAAA,kBAqBMF,UAAU,SAAV,KAAqB,IArB3B;AAAA;AAAA;AAAA;;AAsBYG,YAAAA,oBAtBZ,GAsBmC,CAAC,SAAD,EAAY,SAAZ,EAAuB,QAAvB,EAAiC,KAAjC,EAAwC,OAAxC,EAAiD,gBAAjD,EAAmE,MAAnE,EAA2E,WAA3E,EAAwF,OAAxF,EAAiG,IAAjG,CAtBnC;AAuBeC,YAAAA,CAvBf,GAuBmB,CAvBnB;;AAAA;AAAA,kBAuBsBA,CAAC,GAAGD,oBAAoB,CAACzC,MAvB/C;AAAA;AAAA;AAAA;;AAAA,iBAwBcoB,IAAI,CAACuB,QAAL,CAAcF,oBAAoB,CAACC,CAAD,CAAlC,CAxBd;AAAA;AAAA;AAAA;;AAyBcF,YAAAA,cAAc,GAAG,IAAjB;AAzBd;;AAAA;AAuBuDE,YAAAA,CAAC,EAvBxD;AAAA;AAAA;;AAAA;AA6BM,gBAAI,CAACF,cAAL,EACID,KAAK,GAAG,mBAAR;AA9BV;AAAA;;AAAA;AAAA,kBA+BaD,UAAU,CAACT,WAAX,KAA2B,oBA/BxC;AAAA;AAAA;AAAA;;AAgCMU,YAAAA,KAAK,GAAG,cAAR;AAhCN;AAAA;;AAAA;AAAA,kBAiCWD,UAAU,CAACT,WAAX,KAA2B,qBAjCtC;AAAA;AAAA;AAAA;;AAkCMU,YAAAA,KAAK,GAAG,eAAR;AAlCN;AAAA;;AAAA;AAAA,kBAmCWD,UAAU,CAACT,WAAX,KAA2B,YAA3B,IAA2CS,UAAU,CAACT,WAAX,KAA2B,cAnCjF;AAAA;AAAA;AAAA;;AAoCMU,YAAAA,KAAK,GAAG,eAAR;AApCN;AAAA;;AAAA;AAAA,kBAqCWD,UAAU,CAACT,WAAX,KAA2B,4BArCtC;AAAA;AAAA;AAAA;;AAsCMU,YAAAA,KAAK,GAAG,eAAR;AAtCN;AAAA;;AAAA;AAAA;AAAA,mBAuCqB,4CAAoBZ,SAAS,CAACzB,EAA9B,EAAkCa,MAAM,CAACb,EAAzC,CAvCrB;;AAAA;AAuCOqC,YAAAA,KAvCP;;AAAA;AAAA,gBAyCOC,cAzCP;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA0CY,oCAAY;AAAEZ,cAAAA,MAAM,EAAE,qBAAV;AAAiClD,cAAAA,GAAG,EAAHA,GAAjC;AAAsCqC,cAAAA,MAAM,EAANA,MAAtC;AAA8Cd,cAAAA,MAAM,EAAEa,OAAO,CAACa,SAAR,CAAkBzB,EAAxE;AAA4E4B,cAAAA,IAAI,EAAES,KAAlF;AAAyFnB,cAAAA,IAAI,EAAJA;AAAzF,aAAZ,CA1CZ;;AAAA;AAAA,iBA8CFgB,UA9CE;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA+CI,uCAAe;AAAE1D,cAAAA,GAAG,EAAHA,GAAF;AAAOqC,cAAAA,MAAM,EAANA,MAAP;AAAed,cAAAA,MAAM,EAAE0B,SAAS,CAACzB,EAAjC;AAAqCkB,cAAAA,IAAI,EAAJA;AAArC,aAAf,CA/CJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmDVzD,YAAAA,OAAO,CAACC,KAAR,CAAc;AAAEgF,cAAAA,cAAc;AAAhB,aAAd;AAnDU;AAAA,mBAoDa,iCAAa,aAAe9B,OAA5B,CApDb;;AAAA;AAoDJiB,YAAAA,QApDI;AAAA;AAAA,mBAqDJrD,GAAG,CAACsD,UAAJ,CAAejB,MAAM,CAACb,EAAtB,CArDI;;AAAA;AAAA;AAAA,mBAsDJxB,GAAG,CAACuD,IAAJ,CAASlB,MAAM,CAACb,EAAhB,EAAoB6B,QAApB,CAtDI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA;AA0DA;;;;;;AAKArD,GAAG,CAACV,EAAJ,CAAO,aAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAsB,kBAAO8C,OAAP,EAAgB+B,WAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEV9B,YAAAA,MAFU,GAEYD,OAFZ,CAEVC,MAFU,EAEFY,SAFE,GAEYb,OAFZ,CAEFa,SAFE;AAGVmB,YAAAA,OAHU,GAGED,WAHF,CAGVC,OAHU;AAKlBnF,YAAAA,OAAO,CAACO,IAAR,2DAAgE6C,MAAM,CAACb,EAAvE,2CAA0GyB,SAAS,CAACzB,EAApH,sCAAkJ4C,OAAlJ,sCAAqLpE,GAAG,CAACyB,SAAzL;AALkB;;AAAA,iBASV2C,OATU;AAAA;AAAA;AAAA;;AAUV;;;;;AAKIV,YAAAA,UAfM,GAeO,IAfP;;AAAA,iBAiBN1D,GAAG,CAACyB,SAjBE;AAAA;AAAA;AAAA;;AAkBNiC,YAAAA,UAAU,GAAG,KAAb,CAlBM,CAkBc;;AAlBd;AAAA,mBAoBmB,2CAAc;AAAEnC,cAAAA,MAAM,EAAE0B,SAAS,CAACzB,EAApB;AAAwBmC,cAAAA,MAAM,EAAEtB,MAAM,CAACb;AAAvC,aAAd,CApBnB;;AAAA;AAoBAoC,YAAAA,UApBA;;AAAA,kBAsBFA,UAAU,CAACT,WAAX,KAA2B,mBAtBzB;AAAA;AAAA;AAAA;;AAuBFO,YAAAA,UAAU,GAAG,IAAb,CAvBE,CAuBiB;;AAvBjB;AAAA;;AAAA;AAAA;AAAA,mBAyBI,oCAAY;AAAER,cAAAA,MAAM,EAAE,qBAAV;AAAiClD,cAAAA,GAAG,EAAHA,GAAjC;AAAsCqC,cAAAA,MAAM,EAANA,MAAtC;AAA8Cd,cAAAA,MAAM,EAAE0B,SAAS,CAACzB,EAAhE;AAAoE4C,cAAAA,OAAO,EAAEA,OAA7E;AAAsFhB,cAAAA,IAAI,EAAE;AAA5F,aAAZ,CAzBJ;;AAAA;AAAA,iBA6BNM,UA7BM;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA8BA,oCAAY;AAAER,cAAAA,MAAM,EAAE,YAAV;AAAwBlD,cAAAA,GAAG,EAAHA,GAAxB;AAA6BqC,cAAAA,MAAM,EAANA,MAA7B;AAAqCd,cAAAA,MAAM,EAAE0B,SAAS,CAACzB,EAAvD;AAA2D4C,cAAAA,OAAO,EAAEA;AAApE,aAAZ,CA9BA;;AAAA;AAAA;AAAA,mBA+BA,oCAAY;AAAElB,cAAAA,MAAM,EAAE,kBAAV;AAA8BlD,cAAAA,GAAG,EAAHA,GAA9B;AAAmCqC,cAAAA,MAAM,EAANA,MAAnC;AAA2Cd,cAAAA,MAAM,EAAE0B,SAAS,CAACzB;AAA7D,aAAZ,CA/BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmCdvC,YAAAA,OAAO,CAACC,KAAR,CAAc;AAAEmF,cAAAA,eAAe;AAAjB,aAAd;AAnCc;AAAA,mBAoCS,iCAAa,aAAgBjC,OAA7B,CApCT;;AAAA;AAoCRiB,YAAAA,QApCQ;AAAA;AAAA,mBAqCRrD,GAAG,CAACsD,UAAJ,CAAejB,MAAM,CAACb,EAAtB,CArCQ;;AAAA;AAAA;AAAA,mBAsCRxB,GAAG,CAACuD,IAAJ,CAASlB,MAAM,CAACb,EAAhB,EAAoB6B,QAApB,CAtCQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA;AA0CArD,GAAG,CAACV,EAAJ,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAe,kBAAO8C,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA;AAKApC,GAAG,CAACV,EAAJ,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAmB,kBAAO8C,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import '@babel/polyfill';\nimport express from 'express';\nimport logger from 'morgan';\nimport bodyParser from 'body-parser';\nimport dotenv from 'dotenv';\nimport moment from 'moment-timezone';\nimport mongoose from 'mongoose';\nimport Debug from 'debug';\nimport { Bot } from 'facebook-messenger-bot';\nimport { getOnePageToken } from './api/controllers/pagesController';\nimport {\n    sendErrorMsg,\n} from './api/bot/botController';\n\nimport {\n    sendActions, mapEventsActions,\n    checkTypedText,\n} from './api/bot/actionsController';\nimport { getMktContact } from './api/controllers/mkt_contact_controller';\nimport { m_checkLastQuestion } from './api/bot/botMarkController';\nimport {\n    w_sendMainMenu, waboxapp_sendMessage,\n    w_controller,\n} from './api/whatsapp/whatController';\n\ndotenv.config();\nconst env = process.env.NODE_ENV || 'production';\n\nconst debug = Debug('server-bot');\n\n// --- START MongoDB connection -----------------------------\nlet mongo_url = process.env.DEV_MONGODB_URL;\nif (env === 'production')\n    mongo_url = process.env.PRD_MONGODB_URL;\n\n\nconst RETRY_TIMEOUT = 3000\n\nconst options = {\n    useNewUrlParser: true,\n    autoReconnect: true,\n    keepAlive: 30000,\n    reconnectInterval: RETRY_TIMEOUT,\n    reconnectTries: 10000,\n}\n\nlet isConnectedBefore = false\n\nconst connect = () => {\n    return mongoose.connect(mongo_url, options)\n        .catch(err => console.error('Mongoose connect(...) failed with err: ', err))\n}\n\nconnect();\n\nmongoose.set('useCreateIndex', true);\nmongoose.set('useFindAndModify', false);\nmongoose.Promise = Promise;\n\nmongoose.connection.on('error', () => {\n    console.error('Could not connect to MongoDB')\n});\n\nmongoose.connection.on('disconnected', () => {\n    console.error('Lost MongoDB connection...')\n    if (!isConnectedBefore) {\n        setTimeout(() => connect(), RETRY_TIMEOUT)\n    }\n});\n\nmongoose.connection.on('connected', () => {\n    isConnectedBefore = true\n    console.info('Connection established to MongoDB')\n});\n\nmongoose.connection.on('reconnected', () => {\n    console.info('Reconnected to MongoDB')\n});\n\n// Close the Mongoose connection, when receiving SIGINT\nprocess.on('SIGINT', () => {\n    mongoose.connection.close(function () {\n        console.warn('Force to close the MongoDB connection after SIGINT')\n        process.exit(0)\n    })\n});\n// --- END MongoDB connection -----------------------------\n\n\nglobal.pagesKeyID = {};\nglobal.pagesMarketing = {};\n\nconst app = express();\n\nconst bot = new Bot(process.env.FB_VERIFY_TOKEN, true);\n\n// Beggining - That is all to log in the local timezone\n// eslint-disable-next-line max-len\n// https://medium.com/front-end-hacking/node-js-logs-in-local-timezone-on-morgan-and-winston-9e98b2b9ca45\n// [Node.js] Logs in Local Timezone on Morgan\nlogger.token('date', (req, res, tz) => {\n    return moment().tz(tz).format();\n})\n// eslint-disable-next-line max-len\nlogger.format('myformat', '[:date[America/Sao_Paulo]] \":method :url\" :status :res[content-length] - :response-time ms');\n\napp.use(logger('myformat'));\n// End - That is all to log in the right timezone\n\napp.set('json spaces', 2);\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\napp.use(function (req, res, next) {\n    res.header('Access-Control-Allow-Origin', '*');\n    res.header('Access-Control-Allow-Credentials', true);\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n    res.header('Access-Control-Allow-Headers',\n        'Authorization,Origin,X-Requested-With,Content-Type,Accept,application/json,Content-Range');\n    res.header('Access-Control-Expose-Headers', 'Content-Range');\n\n    if (req.method === 'OPTIONS') {\n        res.sendStatus(200);\n    } else {\n        next();\n    }\n});\n\n\napp.use('/buckets/facebook', async (req, res, next) => {\n    let doNext = true;\n    if (req.body && req.body.object === 'page') {\n        if (req.body.entry.length > 0) {\n            try {\n                // Iterates over each entry - there may be multiple if batched\n                // for (let i = 0; i < req.body.entry.length; i++) {\n                let pageID = req.body.entry[0].id;\n                if (global.pagesKeyID[pageID] && global.pagesKeyID[pageID] !== '') {\n                    req.token = global.pagesKeyID[pageID];\n                    req.marketing = global.pagesMarketing[pageID];\n                } else {\n                    let timerIdentifier = 'getOnePageToken' + Math.random();\n                    console.time(timerIdentifier);\n                    const { accessToken, name, marketing } = await getOnePageToken(pageID);\n                    console.timeEnd(timerIdentifier);\n\n                    req.token = accessToken;\n                    req.marketing = marketing;\n                    debug('server-bot use buckets req.marketing:', req.marketing);\n                    console.info(`\\x1b[45m /buckets/facebook \\x1b[0m, pageID:\\x1b[32m${pageID}\\x1b[0m, page name:\\x1b[32m${name}\\x1b[0m, req.mkt:\\x1b[32m${req.marketing}\\x1b[0m`);\n\n                    global.pagesKeyID[pageID] = accessToken;\n                    global.pagesMarketing[pageID] = marketing;\n                }\n\n                // const _time = req.body.entry[0].time;\n                // const messageTime = new Date(_time).toLocaleTimeString('pt-BR');\n                // eslint-disable-next-line max-len\n                // console.info(`${messageTime} From ${pageID} memory tokens:${Object.keys(global.pagesKeyID).length}`);\n\n            } catch (expressAppUseGetTokenError) {\n                console.error({ expressAppUseGetTokenError });\n            }\n        }\n    } else {\n        console.log('Something came, not a page...');\n    }\n    if (doNext)\n        next();\n});\n\napp.use('/buckets/whatsapp', async (req, res, next) => {\n    if (req.body) {\n        // ---------> Waboxapp <----------\n        if (req.body.event === 'message') {\n            try {\n                const message = req.body;\n                console.info('##### WHATSAPP req.body #####');\n                console.info(message);\n                console.info('#############################');\n\n                const sender = message.contact.uid;\n                if (message.message.type === 'chat' && message.message.dir === 'i') {\n                    const text = await w_sendMainMenu();\n                    const response = await waboxapp_sendMessage(sender, text);\n\n                    console.info('##### WHATSAPP response #####');\n                    console.info(response);\n                    console.info('#############################');\n                }\n\n            } catch (err) {\n                console.error({ err });\n            }\n        } else {\n            // ---------> Receiving data from Whatsapp Web <----------\n            const { args } = req.body;\n\n            if (args) {\n                const replyData = await w_controller(args);\n                res.json({ message: replyData });\n            }\n        }\n    } else {\n        console.info('***** No Body?? ****');\n        console.info(req);\n    }\n});\n\n\napp.use('/buckets/facebook', bot.router());\napp.listen(process.env.FB_WEBHOOK_PORT, () => console.log(`Bot server listening on port ${process.env.FB_WEBHOOK_PORT}`));\n\n/**\n * Event triggered when the button \"GET_STARTED\" is pressed.\n */\nbot.on('GET_STARTED', async (message) => {\n    const { sender, recipient } = message;\n    console.info(`\\x1b[43mGET_STARTED\\x1b[0m, event:\\x1b[32m${message.event}\\x1b[0m, sender.id:\\x1b[32m${sender.id}\\x1b[0m, recipient.id:\\x1b[32m${recipient.id}\\x1b[0m, bot.mkt:\\x1b[32m${bot.marketing}\\x1b[0m`);\n\n    try {\n        await sendActions({ action: 'SEND_WELCOME', bot, sender, pageID: recipient.id, last_answer: message.event });\n        if (bot.marketing) {\n            await sendActions({ action: 'PIZZAIBOT_MARKETING', bot, sender, pageID: recipient.id, data: 'GET_STARTED' });\n        } else {\n            // Send Main Menu\n            await sendActions({ action: 'SEND_MAIN_MENU', bot, sender, pageID: recipient.id, last_answer: message.event });\n        }\n    } catch (error) {\n        console.error('GET_STARTED error:', error.message);\n        const outError = await sendErrorMsg(error.message);\n        await bot.stopTyping(sender.id);\n        await bot.send(sender.id, outError);\n    }\n});\n\n// all postbacks are emitted via 'postback'\nbot.on('postback', async (event, message, data) => {\n    const { sender, recipient } = message;\n    console.info(`\\x1b[43mPostback\\x1b[0m, event:\\x1b[32m${event}\\x1b[0m, data:\\x1b[32m${data}\\x1b[0m, sender.id:\\x1b[32m${sender.id}\\x1b[0m, recipient.id:\\x1b[32m${recipient.id}\\x1b[0m, bot.mkt:\\x1b[32m${bot.marketing}\\x1b[0m`);\n\n    if (event === 'PIZZAIBOT_MARKETING') {\n        if (data === 'testtypecustomer_begin') {\n            await sendActions({ action: 'SEND_MAIN_MENU', bot, sender, pageID: recipient.id, last_answer: message.event });\n        } else {\n            await sendActions({ action: 'PIZZAIBOT_MARKETING', bot, sender, pageID: recipient.id, data });\n        }\n    } else {\n        await mapEventsActions({ event, data, bot, sender, pageID: recipient.id })\n    }\n});\n\n/**\n * Question No.02 (location)\n * clicked \"Fazer Pedido\"\n * gonna ask for QUANTITY\n */\nbot.on('message', async (message) => {\n    const { sender, recipient, location, text } = message;\n    console.info(`\\x1b[43m on message \\x1b[0m, sender.id:\\x1b[32m${sender.id}\\x1b[0m, recipient.id:\\x1b[32m${recipient.id}\\x1b[0m, message.text:\\x1b[32m${text && text.substr(0, 15)}\\x1b[0m, bot.mkt:\\x1b[32m${bot.marketing}\\x1b[0m`);\n\n    try {\n        if (location) {\n            await sendActions({ action: 'LOCATION_CONFIRM_ADDRESS', bot, sender, pageID: recipient.id, location });\n        } else if (text === 'hello' || text === 'hi') {\n            await sendActions({ action: 'BASIC_REPLY', bot, sender, pageID: recipient.id, data: 'Hello, how are you doing? Currently, I am working only in Portuguese, but, soon enough, your favorite restaurant will be with me.' });\n        } else {\n            let _orderFlow = true;\n            if (bot.marketing) {\n                _orderFlow = false; // if it is an action from the marketing, so, this assures the order flow isn't called.\n                const mktContact = await getMktContact({ pageID: recipient.id, userID: sender.id });\n\n                if (mktContact.last_answer === 'testtype_customer') {\n                    _orderFlow = true; // this assures the order flow will continue and marketing won't be called.\n                } else {\n                    let _data = 'open_question';\n                    let eAgradecimento = false;\n\n                    if (mktContact.final === true) {\n                        const agradecimentosFinais = ['obrigad', 'brigadu', 'thanks', 'tks', 'valeu', 'muito obrigado', 'show', 'muito bom', 'legal', 'ok'];\n                        for (let i = 0; i < agradecimentosFinais.length; i++) {\n                            if (text.includes(agradecimentosFinais[i])) {\n                                eAgradecimento = true;\n                                break;\n                            }\n                        }\n                        if (!eAgradecimento)\n                            _data = 'returned_customer';\n                    } else if (mktContact.last_answer === 'finalquestion_mail')\n                        _data = 'contact_mail';\n                    else if (mktContact.last_answer === 'finalquestion_phone')\n                        _data = 'contact_phone';\n                    else if (mktContact.last_answer === 'type_phone' || mktContact.last_answer === 'retype_phone')\n                        _data = 'contact_phone';\n                    else if (mktContact.last_answer === 'orderConfirmation_question')\n                        _data = 'open_question';\n                    else _data = await m_checkLastQuestion(recipient.id, sender.id);\n\n                    if (!eAgradecimento)\n                        await sendActions({ action: 'PIZZAIBOT_MARKETING', bot, sender, pageID: message.recipient.id, data: _data, text });\n                }\n            }\n            // only when it is from the order flow, not from the marketing.\n            if (_orderFlow) {\n                await checkTypedText({ bot, sender, pageID: recipient.id, text });\n            }\n        }\n    } catch (onMessageError) {\n        console.error({ onMessageError });\n        const outError = await sendErrorMsg(onMessageError.message);\n        await bot.stopTyping(sender.id);\n        await bot.send(sender.id, outError);\n    }\n});\n\n/**\n * clicked \"Fazer Pedido\"\n * gonna ask for QUANTITY\n * Dealing with marketing.\n */\nbot.on('quick-reply', async (message, quick_reply) => {\n\n    const { sender, recipient } = message;\n    const { payload } = quick_reply;\n\n    console.info(`\\x1b[43m quick-reply \\x1b[0m, sender.id:\\x1b[32m${sender.id}\\x1b[0m, recipient.id:\\x1b[32m${recipient.id}\\x1b[0m, payload:\\x1b[32m${payload}\\x1b[0m, bot.mkt:\\x1b[32m${bot.marketing}\\x1b[0m`);\n\n\n    try {\n        if (payload) {\n            /**\n       * Both marketing and Order flow use this quick_reply answer, so, I am\n       * checking if marketing is in a state where an test order has been placed and, if so,\n       * I redirect the flow to the order.\n       */\n            let _orderFlow = true;\n\n            if (bot.marketing) {\n                _orderFlow = false; // if it is an action from the marketing, so, this assures the order flow isn't called.\n\n                const mktContact = await getMktContact({ pageID: recipient.id, userID: sender.id });\n\n                if (mktContact.last_answer === 'testtype_customer') {\n                    _orderFlow = true; // this assures the order flow will continue and marketing won't be called.\n                } else {\n                    await sendActions({ action: 'PIZZAIBOT_MARKETING', bot, sender, pageID: recipient.id, payload: payload, data: 'contact_phone' });\n                }\n            }\n            // only when it is from the order flow, not from the marketing.\n            if (_orderFlow) {\n                await sendActions({ action: 'SHOW_PHONE', bot, sender, pageID: recipient.id, payload: payload });\n                await sendActions({ action: 'ASK_FOR_QUANTITY', bot, sender, pageID: recipient.id });\n            }\n        }\n    } catch (quickReplyError) {\n        console.error({ quickReplyError });\n        const outError = await sendErrorMsg(quickReplyError.message);\n        await bot.stopTyping(sender.id);\n        await bot.send(sender.id, outError);\n    }\n});\n\nbot.on('read', async (message) => {\n    // const { sender, recipient } = message;\n    // console.info(`\\x1b[43m read \\x1b[0m, sender.id:\\x1b[32m${sender.id}\\x1b[0m, recipient.id:\\x1b[32m${recipient.id}\\x1b[0m bot.mkt:\\x1b[32m${bot.marketing}\\x1b[0m`);\n});\n\nbot.on('delivery', async (message) => {\n    // const { sender, recipient } = message;\n    // console.info(`\\x1b[43m delivery \\x1b[0m, sender.id:\\x1b[32m${sender.id}\\x1b[0m, recipient.id:\\x1b[32m${recipient.id}\\x1b[0m bot.mkt:\\x1b[32m${bot.marketing}\\x1b[0m`);\n});\n"],"file":"server-bot.js"}