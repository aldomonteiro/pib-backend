{"version":3,"sources":["../src/server-bot.js"],"names":["ORDER_STATE_QUANTITY","ORDER_STATE_SIZE","ORDER_STATE_FLAVOR","dotenv","config","mongoose","connect","process","env","MONGODB_URL","useNewUrlParser","set","Promise","app","bot","Bot","then","pageArray","i","length","page","accessToken","fields","getFields","response","global","pagesKeyID","pageID","console","log","name","logger","token","req","res","tz","format","use","bodyParser","urlencoded","extended","json","next","body","object","entry","id","router","listen","FB_WEBHOOK_PORT","Array","orderState","on","message","sender","startTyping","recipient","out1","wait","stopTyping","send","out2","out3","event","data","info","keyState","out","fetchUser","user","answer","location","quick_reply","payload","summary","Elements","add","text"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAwBA,IACEA,oBAAoB,GAAG,CADzB;AAAA,IAEEC,gBAAgB,GAAG,CAFrB;AAAA,IAGEC,kBAAkB,GAAG,CAHvB;;AAKAC,gBAAOC,MAAP;;AAEAC,kBAASC,OAAT,CACEC,OAAO,CAACC,GAAR,CAAYC,WADd,EAEE;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CAFF;;AAIAL,kBAASM,GAAT,CAAa,gBAAb,EAA+B,IAA/B;;AACAN,kBAASO,OAAT,GAAmBA,OAAnB;AAEA,IAAMC,GAAG,GAAG,uBAAZ;AAEA,IAAMC,GAAG,GAAG,IAAIC,yBAAJ,CAAQ,eAAR,EAAyB,IAAzB,CAAZ;AACA,oCAAcC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAmB,iBAAOC,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACRC,YAAAA,CADQ,GACJ,CADI;;AAAA;AAAA,kBACDA,CAAC,GAAGD,SAAS,CAACE,MADb;AAAA;AAAA;AAAA;;AAETC,YAAAA,IAFS,GAEFH,SAAS,CAACC,CAAD,CAFP;AAGTG,YAAAA,WAHS,GAGKD,IAAI,CAACC,WAHV;AAITC,YAAAA,MAJS,GAIA,CAAC,UAAD,EAAa,aAAb,EAA4B,iBAA5B,CAJA;AAAA;AAAA,mBAKQR,GAAG,CAACS,SAAJ,CAAcD,MAAd,CALR;;AAAA;AAKTE,YAAAA,QALS;AAMfC,YAAAA,MAAM,CAACC,UAAP,CAAkBN,IAAI,CAACO,MAAvB,IAAiCN,WAAjC;AAEAO,YAAAA,OAAO,CAACC,GAAR,0BAA8BT,IAAI,CAACO,MAAnC,cAA6CP,IAAI,CAACU,IAAlD,QAA2DN,QAA3D;;AARe;AACqBN,YAAAA,CAAC,EADtB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAAA;AAAA;AAAA;AAAA,K,CAaA;AACA;AACA;;AACAa,gBAAOC,KAAP,CAAa,MAAb,EAAqB,UAACC,GAAD,EAAMC,GAAN,EAAWC,EAAX,EAAkB;AACrC,SAAO,+BAASA,EAAT,CAAYA,EAAZ,EAAgBC,MAAhB,EAAP;AACD,CAFD;;AAGAL,gBAAOK,MAAP,CAAc,UAAd,EAA0B,4FAA1B;;AAEAvB,GAAG,CAACwB,GAAJ,CAAQ,qBAAO,UAAP,CAAR,E,CACA;;AAEAxB,GAAG,CAACF,GAAJ,CAAQ,aAAR,EAAuB,CAAvB;AACAE,GAAG,CAACwB,GAAJ,CAAQC,oBAAWC,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AACA3B,GAAG,CAACwB,GAAJ,CAAQC,oBAAWG,IAAX,EAAR;AACA5B,GAAG,CAACwB,GAAJ,CAAQ,mBAAR,EAA6B,UAACJ,GAAD,EAAMC,GAAN,EAAWQ,IAAX,EAAoB;AAC/C,MAAIT,GAAG,CAACU,IAAJ,CAASC,MAAT,KAAoB,MAAxB,EAAgC;AAC9B,QAAIX,GAAG,CAACU,IAAJ,CAASE,KAAT,CAAe1B,MAAf,GAAwB,CAA5B,EAA+B;AAC7B;AACA;AACA,UAAIQ,MAAM,GAAGM,GAAG,CAACU,IAAJ,CAASE,KAAT,CAAe,CAAf,EAAkBC,EAA/B;AAEAlB,MAAAA,OAAO,CAACC,GAAR,wBAA4BF,MAA5B;;AAEA,UAAIF,MAAM,CAACC,UAAP,CAAkBC,MAAlB,CAAJ,EAA+B;AAC7BM,QAAAA,GAAG,CAACD,KAAJ,GAAYP,MAAM,CAACC,UAAP,CAAkBC,MAAlB,CAAZ;AACD,OAFD,MAGK;AACH,yCAAWA,MAAX,EAAmBX,IAAnB,CAAwB,UAACK,WAAD,EAAiB;AACvCY,UAAAA,GAAG,CAACD,KAAJ,GAAYX,WAAZ;AACAI,UAAAA,MAAM,CAACC,UAAP,CAAkBC,MAAlB,IAA4BN,WAA5B;AACAO,UAAAA,OAAO,CAACC,GAAR,0BAA8BF,MAA9B;AACD,SAJD;AAKD;;AAEDe,MAAAA,IAAI;AACL;AACF;AACF,CAvBD;AAwBA7B,GAAG,CAACwB,GAAJ,CAAQ,mBAAR,EAA6BvB,GAAG,CAACiC,MAAJ,EAA7B;AACAlC,GAAG,CAACmC,MAAJ,CAAWzC,OAAO,CAACC,GAAR,CAAYyC,eAAvB,EAAwC;AAAA,SAAMrB,OAAO,CAACC,GAAR,wCAA4CtB,OAAO,CAACC,GAAR,CAAYyC,eAAxD,EAAN;AAAA,CAAxC;AAEAxB,MAAM,CAACC,UAAP,GAAoB,IAAIwB,KAAJ,EAApB;AACAzB,MAAM,CAAC0B,UAAP,GAAoB,IAAID,KAAJ,EAApB;AAGApC,GAAG,CAACsC,EAAJ,CAAO,aAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAsB,kBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,YAAAA,MADY,GACDD,OADC,CACZC,MADY;AAAA;AAAA;AAAA,mBAIZxC,GAAG,CAACyC,WAAJ,CAAgBD,MAAM,CAACR,EAAvB,CAJY;;AAAA;AAAA;AAAA,mBAKC,uCAAmBQ,MAAnB,EAA2BD,OAAO,CAACG,SAAR,CAAkBV,EAA7C,CALD;;AAAA;AAKZW,YAAAA,IALY;AAAA;AAAA,mBAMZ1C,0BAAI2C,IAAJ,CAAS,IAAT,CANY;;AAAA;AAAA;AAAA,mBAOZ5C,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CAPY;;AAAA;AAAA;AAAA,mBAQZhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBW,IAApB,CARY;;AAAA;AAAA;AAAA,mBAWZ3C,GAAG,CAACyC,WAAJ,CAAgBD,MAAM,CAACR,EAAvB,CAXY;;AAAA;AAAA;AAAA,mBAYC,kCAZD;;AAAA;AAYZe,YAAAA,IAZY;AAAA;AAAA,mBAaZ9C,0BAAI2C,IAAJ,CAAS,IAAT,CAbY;;AAAA;AAAA;AAAA,mBAcZ5C,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CAdY;;AAAA;AAAA;AAAA,mBAeZhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBe,IAApB,CAfY;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkBlBjC,YAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkC,aAAML,QAAxC;AAlBkB;AAAA,mBAoBC,kCApBD;;AAAA;AAoBZsC,YAAAA,IApBY;AAAA;AAAA,mBAqBZhD,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CArBY;;AAAA;AAAA;AAAA,mBAsBZhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBgB,IAApB,CAtBY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA,K,CA2BA;;AACAhD,GAAG,CAACsC,EAAJ,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAmB,kBAAOW,KAAP,EAAcV,OAAd,EAAuBW,IAAvB;AAAA;AAAA;AAAA;AAAA;AACjBpC,YAAAA,OAAO,CAACqC,IAAR,yBAA8BD,IAA9B;AACApC,YAAAA,OAAO,CAACqC,IAAR,CAAaZ,OAAb;;AAFiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAAA;AAAA;AAAA;AAAA,K,CAKA;;AACAvC,GAAG,CAACsC,EAAJ,CAAO,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAoB,kBAAOC,OAAP,EAAgBW,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACVV,YAAAA,MADU,GACYD,OADZ,CACVC,MADU,EACFE,SADE,GACYH,OADZ,CACFG,SADE;AAEZU,YAAAA,QAFY,GAEDZ,MAAM,CAACR,EAAP,GAAYU,SAAS,CAACV,EAFrB;AAAA;AAAA;AAAA,mBAKVhC,GAAG,CAACyC,WAAJ,CAAgBD,MAAM,CAACR,EAAvB,CALU;;AAAA;AAAA,kBAMZkB,IAAI,KAAK,kBANG;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAOI,iCAAaX,OAAO,CAACG,SAAR,CAAkBV,EAA/B,CAPJ;;AAAA;AAORqB,YAAAA,GAPQ;AAAA;AAAA,mBAQRrD,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CARQ;;AAAA;AAAA;AAAA,mBASRhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBqB,GAApB,CATQ;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAWLH,IAAI,KAAK,gBAXJ;AAAA;AAAA;AAAA;;AAYdvC,YAAAA,MAAM,CAAC0B,UAAP,CAAkBe,QAAlB,IAA8BlE,oBAA9B,CAZc,CAcd;;AAdc;AAAA,mBAeRc,GAAG,CAACyC,WAAJ,CAAgBD,MAAM,CAACR,EAAvB,CAfQ;;AAAA;AAAA;AAAA,mBAgBR/B,0BAAI2C,IAAJ,CAAS,IAAT,CAhBQ;;AAAA;AAAA;AAAA,mBAiBK5C,GAAG,CAACsD,SAAJ,CAAcd,MAAM,CAACR,EAArB,CAjBL;;AAAA;AAiBRuB,YAAAA,IAjBQ;AAAA;AAAA,mBAkBO,gDAA4Bb,SAAS,CAACV,EAAtC,EAA0CQ,MAAM,CAACR,EAAjD,EAAqDuB,IAArD,CAlBP;;AAAA;AAkBRC,YAAAA,MAlBQ;AAAA;AAAA,mBAmBRxD,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CAnBQ;;AAAA;AAAA;AAAA,mBAoBRhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBwB,MAApB,CApBQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAuBVxD,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CAvBU;;AAAA;AAyBhB,gBAAI,aAAItB,QAAR,EAAkBI,OAAO,CAACC,GAAR,CAAY,aAAIL,QAAhB,EAAlB,KACKI,OAAO,CAACC,GAAR;;AA1BW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAAA;AAAA;AAAA;AAAA;AAgCA;;;;;AAIAf,GAAG,CAACsC,EAAJ,CAAO,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAkB,kBAAOC,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChBzB,YAAAA,OAAO,CAACqC,IAAR,CAAa;AAAEZ,cAAAA,OAAO,EAAPA;AAAF,aAAb;AAEQC,YAAAA,MAHQ,GAGwBD,OAHxB,CAGRC,MAHQ,EAGAE,SAHA,GAGwBH,OAHxB,CAGAG,SAHA,EAGWe,QAHX,GAGwBlB,OAHxB,CAGWkB,QAHX;;AAAA,iBAKZA,QALY;AAAA;AAAA;AAAA;;AAMd3C,YAAAA,OAAO,CAACqC,IAAR,CAAa;AAAEM,cAAAA,QAAQ,EAARA;AAAF,aAAb;AANc;AAAA,mBAQRzD,GAAG,CAACyC,WAAJ,CAAgBD,MAAM,CAACR,EAAvB,CARQ;;AAAA;AAAA;AAAA,mBASR/B,0BAAI2C,IAAJ,CAAS,IAAT,CATQ;;AAAA;AAAA;AAAA,mBAUK5C,GAAG,CAACsD,SAAJ,CAAcd,MAAM,CAACR,EAArB,CAVL;;AAAA;AAURuB,YAAAA,IAVQ;AAAA;AAAA,mBAWO,2CAAuBb,SAAS,CAACV,EAAjC,EAAqCQ,MAAM,CAACR,EAA5C,EAAgDyB,QAAhD,EAA0DF,IAA1D,CAXP;;AAAA;AAWRC,YAAAA,MAXQ;AAAA;AAAA,mBAYRxD,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CAZQ;;AAAA;AAAA;AAAA,mBAaRhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBwB,MAApB,CAbQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAgBRxD,GAAG,CAACyC,WAAJ,CAAgBD,MAAM,CAACR,EAAvB,CAhBQ;;AAAA;AAAA;AAAA,mBAiBR/B,0BAAI2C,IAAJ,CAAS,IAAT,CAjBQ;;AAAA;AAAA;AAAA,mBAkBO,wCAAoBF,SAAS,CAACV,EAA9B,EAAkCQ,MAAM,CAACR,EAAzC,EAA6CO,OAA7C,CAlBP;;AAAA;AAkBRiB,YAAAA,OAlBQ;AAAA;AAAA,mBAmBRxD,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CAnBQ;;AAAA;AAAA;AAAA,mBAoBRhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBwB,OAApB,CApBQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA;AAwBA;;;;;AAIAxD,GAAG,CAACsC,EAAJ,CAAO,aAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAsB,kBAAOC,OAAP,EAAgBmB,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACpB5C,YAAAA,OAAO,CAACqC,IAAR,CAAa;AAAEZ,cAAAA,OAAO,EAAPA;AAAF,aAAb;AAEQC,YAAAA,MAHY,GAGUD,OAHV,CAGZC,MAHY,EAGJE,SAHI,GAGUH,OAHV,CAGJG,SAHI;AAIZiB,YAAAA,OAJY,GAIAD,WAJA,CAIZC,OAJY;;AAAA,iBAMhBA,OANgB;AAAA;AAAA;AAAA;;AAOlB7C,YAAAA,OAAO,CAACqC,IAAR,CAAa;AAAEQ,cAAAA,OAAO,EAAPA;AAAF,aAAb;AAPkB;AAAA,mBASZ3D,GAAG,CAACyC,WAAJ,CAAgBD,MAAM,CAACR,EAAvB,CATY;;AAAA;AAAA;AAAA,mBAUZ/B,0BAAI2C,IAAJ,CAAS,IAAT,CAVY;;AAAA;AAAA;AAAA,mBAWG,8BAAUF,SAAS,CAACV,EAApB,EAAwBQ,MAAM,CAACR,EAA/B,EAAmC2B,OAAnC,CAXH;;AAAA;AAWZH,YAAAA,MAXY;AAAA;AAAA,mBAYZxD,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CAZY;;AAAA;AAAA;AAAA,mBAaZhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBwB,MAApB,CAbY;;AAAA;AAAA;AAAA,mBAgBA,oCAhBA;;AAAA;AAgBZH,YAAAA,GAhBY;AAAA;AAAA,mBAiBZpD,0BAAI2C,IAAJ,CAAS,IAAT,CAjBY;;AAAA;AAAA;AAAA,mBAkBZ5C,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CAlBY;;AAAA;AAAA;AAAA,mBAmBZhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBqB,GAApB,CAnBY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAAA;AAAA;AAAA;AAAA;AAuBA;;;;;AAIArD,GAAG,CAACsC,EAAJ,CAAO,uBAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAgC,kBAAOC,OAAP,EAAgBW,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBV,YAAAA,MADsB,GACAD,OADA,CACtBC,MADsB,EACdE,SADc,GACAH,OADA,CACdG,SADc,EAG9B;;AAH8B;AAAA,mBAIxB1C,GAAG,CAACyC,WAAJ,CAAgBD,MAAM,CAACR,EAAvB,CAJwB;;AAAA;AAAA;AAAA,mBAKxB/B,0BAAI2C,IAAJ,CAAS,IAAT,CALwB;;AAAA;AAAA;AAAA,mBAMT,gCAAYF,SAAS,CAACV,EAAtB,EAA0BQ,MAAM,CAACR,EAAjC,EAAqCkB,IAArC,CANS;;AAAA;AAMxBM,YAAAA,MANwB;AAAA;AAAA,mBAOxBxD,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CAPwB;;AAAA;AAAA;AAAA,mBAQxBhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBwB,MAApB,CARwB;;AAAA;AAAA;AAAA,mBAWZ,iCAXY;;AAAA;AAWxBH,YAAAA,GAXwB;AAAA;AAAA,mBAYxBpD,0BAAI2C,IAAJ,CAAS,IAAT,CAZwB;;AAAA;AAAA;AAAA,mBAaxB5C,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CAbwB;;AAAA;AAAA;AAAA,mBAcxBhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBqB,GAApB,CAdwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhC;;AAAA;AAAA;AAAA;AAAA;AAiBA;;;;;AAIArD,GAAG,CAACsC,EAAJ,CAAO,kBAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA2B,kBAAOC,OAAP,EAAgBW,IAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACjBV,YAAAA,MADiB,GACKD,OADL,CACjBC,MADiB,EACTE,SADS,GACKH,OADL,CACTG,SADS;;AAAA,kBAGrBQ,IAAI,KAAK,mBAHY;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAIjBlD,GAAG,CAACyC,WAAJ,CAAgBD,MAAM,CAACR,EAAvB,CAJiB;;AAAA;AAAA;AAAA,mBAKjB/B,0BAAI2C,IAAJ,CAAS,IAAT,CALiB;;AAAA;AAAA;AAAA,mBAMF,qCAAiBF,SAAS,CAACV,EAA3B,EAA+BQ,MAAM,CAACR,EAAtC,CANE;;AAAA;AAMjBwB,YAAAA,MANiB;AAAA;AAAA,mBAOjBxD,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CAPiB;;AAAA;AAAA;AAAA,mBAQjBhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBwB,MAApB,CARiB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAYjBxD,GAAG,CAACyC,WAAJ,CAAgBD,MAAM,CAACR,EAAvB,CAZiB;;AAAA;AAAA;AAAA,mBAajB/B,0BAAI2C,IAAJ,CAAS,IAAT,CAbiB;;AAAA;AAAA;AAAA,mBAcF,gCAAYF,SAAS,CAACV,EAAtB,EAA0BQ,MAAM,CAACR,EAAjC,EAAqCkB,IAArC,CAdE;;AAAA;AAcjBM,YAAAA,QAdiB;AAAA;AAAA,mBAejBxD,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CAfiB;;AAAA;AAAA;AAAA,mBAgBjBhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBwB,QAApB,CAhBiB;;AAAA;AAAA;AAAA,mBAmBL,iCAnBK;;AAAA;AAmBjBH,YAAAA,GAnBiB;AAAA;AAAA,mBAoBjBpD,0BAAI2C,IAAJ,CAAS,IAAT,CApBiB;;AAAA;AAAA;AAAA,mBAqBjB5C,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CArBiB;;AAAA;AAAA;AAAA,mBAsBjBhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBqB,GAApB,CAtBiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA;AA2BA;;;;;AAIArD,GAAG,CAACsC,EAAJ,CAAO,qBAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA8B,kBAAOC,OAAP,EAAgBW,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBV,YAAAA,MADoB,GACED,OADF,CACpBC,MADoB,EACZE,SADY,GACEH,OADF,CACZG,SADY;AAAA;AAAA,mBAGV,oCAHU;;AAAA;AAGtBW,YAAAA,GAHsB;AAAA;AAAA,mBAItBpD,0BAAI2C,IAAJ,CAAS,IAAT,CAJsB;;AAAA;AAAA;AAAA,mBAKtB5C,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CALsB;;AAAA;AAAA;AAAA,mBAMtBhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBqB,GAApB,CANsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9B;;AAAA;AAAA;AAAA;AAAA;AAUA;;;;;AAIArD,GAAG,CAACsC,EAAJ,CAAO,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAoB,mBAAOC,OAAP,EAAgBW,IAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACVV,YAAAA,MADU,GACYD,OADZ,CACVC,MADU,EACFE,SADE,GACYH,OADZ,CACFG,SADE;AAEZU,YAAAA,QAFY,GAEDZ,MAAM,CAACR,EAAP,GAAYU,SAAS,CAACV,EAFrB;AAIlBrB,YAAAA,MAAM,CAAC0B,UAAP,CAAkBe,QAAlB,IAA8BhE,kBAA9B;;AAJkB,kBAMd8D,IAAI,IAAIA,IAAI,KAAK,UANH;AAAA;AAAA;AAAA;;AAOhBvC,YAAAA,MAAM,CAAC0B,UAAP,CAAkBe,QAAlB,IAA8BlE,oBAA9B;AAPgB;AAAA,mBASVc,GAAG,CAACyC,WAAJ,CAAgBD,MAAM,CAACR,EAAvB,CATU;;AAAA;AAAA;AAAA,mBAUV/B,0BAAI2C,IAAJ,CAAS,IAAT,CAVU;;AAAA;AAAA;AAAA,mBAWE,wCAXF;;AAAA;AAWVS,YAAAA,GAXU;AAAA;AAAA,mBAYVrD,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CAZU;;AAAA;AAAA;AAAA,mBAaVhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBqB,GAApB,CAbU;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAiBVrD,GAAG,CAACyC,WAAJ,CAAgBD,MAAM,CAACR,EAAvB,CAjBU;;AAAA;AAAA;AAAA,mBAkBV/B,0BAAI2C,IAAJ,CAAS,IAAT,CAlBU;;AAAA;AAAA;AAAA,mBAmBK,iCAAaF,SAAS,CAACV,EAAvB,EAA2BQ,MAAM,CAACR,EAAlC,EAAsCkB,IAAtC,CAnBL;;AAAA;AAmBVM,YAAAA,MAnBU;AAAA;AAAA,mBAoBVxD,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CApBU;;AAAA;AAAA;AAAA,mBAqBVhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBwB,MAApB,CArBU;;AAAA;AAAA;AAAA,mBAuBVxD,GAAG,CAACyC,WAAJ,CAAgBD,MAAM,CAACR,EAAvB,CAvBU;;AAAA;AAAA;AAAA,mBAwBV/B,0BAAI2C,IAAJ,CAAS,IAAT,CAxBU;;AAAA;AAAA;AAAA,mBAyBE,+BAAWF,SAAS,CAACV,EAArB,EAAyBQ,MAAM,CAACR,EAAhC,CAzBF;;AAAA;AAyBVqB,YAAAA,IAzBU;AAAA;AAAA,mBA0BVrD,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CA1BU;;AAAA;AAAA;AAAA,mBA2BVhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBqB,IAApB,CA3BU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAAA;AAAA;AAAA;AAAA;AA+BA;;;;;AAIArD,GAAG,CAACsC,EAAJ,CAAO,YAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAqB,mBAAOC,OAAP,EAAgBW,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACXV,YAAAA,MADW,GACWD,OADX,CACXC,MADW,EACHE,SADG,GACWH,OADX,CACHG,SADG;AAEbU,YAAAA,QAFa,GAEFZ,MAAM,CAACR,EAAP,GAAYU,SAAS,CAACV,EAFpB;AAInBrB,YAAAA,MAAM,CAAC0B,UAAP,CAAkBe,QAAlB,IAA8BjE,gBAA9B,CAJmB,CAMnB;;AANmB;AAAA,mBAOba,GAAG,CAACyC,WAAJ,CAAgBD,MAAM,CAACR,EAAvB,CAPa;;AAAA;AAAA;AAAA,mBAQb/B,0BAAI2C,IAAJ,CAAS,IAAT,CARa;;AAAA;AAAA;AAAA,mBASE,6BAASF,SAAS,CAACV,EAAnB,EAAuBQ,MAAM,CAACR,EAA9B,EAAkCkB,IAAlC,CATF;;AAAA;AASbM,YAAAA,MATa;AAAA;AAAA,mBAUbxD,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CAVa;;AAAA;AAAA;AAAA,mBAWbhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBwB,MAApB,CAXa;;AAAA;AAAA;AAAA,mBAcbxD,GAAG,CAACyC,WAAJ,CAAgBD,MAAM,CAACR,EAAvB,CAda;;AAAA;AAAA;AAAA,mBAeb/B,0BAAI2C,IAAJ,CAAS,IAAT,CAfa;;AAAA;AAAA;AAAA,mBAgBD,iCAAaL,OAAO,CAACG,SAAR,CAAkBV,EAA/B,CAhBC;;AAAA;AAgBbqB,YAAAA,GAhBa;AAAA;AAAA,mBAiBbrD,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CAjBa;;AAAA;AAAA;AAAA,mBAkBbhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBqB,GAApB,CAlBa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAAA;AAAA;AAAA;AAAA;AAsBA;;;;;AAIArD,GAAG,CAACsC,EAAJ,CAAO,cAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAuB,mBAAOC,OAAP,EAAgBW,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACbV,YAAAA,MADa,GACSD,OADT,CACbC,MADa,EACLE,SADK,GACSH,OADT,CACLG,SADK;AAEfU,YAAAA,QAFe,GAEJZ,MAAM,CAACR,EAAP,GAAYU,SAAS,CAACV,EAFlB;AAIrBrB,YAAAA,MAAM,CAAC0B,UAAP,CAAkBe,QAAlB,IAA8BhE,kBAA9B;;AAJqB,kBAMjB8D,IAAI,KAAK,aANQ;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAWblD,GAAG,CAACyC,WAAJ,CAAgBD,MAAM,CAACR,EAAvB,CAXa;;AAAA;AAAA;AAAA,mBAYb/B,0BAAI2C,IAAJ,CAAS,IAAT,CAZa;;AAAA;AAAA;AAAA,mBAaE,+BAAWF,SAAS,CAACV,EAArB,EAAyBQ,MAAM,CAACR,EAAhC,EAAoCkB,IAApC,CAbF;;AAAA;AAabM,YAAAA,MAba;AAAA;AAAA,mBAcbxD,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CAda;;AAAA;AAAA;AAAA,mBAebhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBwB,MAApB,CAfa;;AAAA;AAAA;AAAA,mBAmBbxD,GAAG,CAACyC,WAAJ,CAAgBD,MAAM,CAACR,EAAvB,CAnBa;;AAAA;AAAA;AAAA,mBAoBb/B,0BAAI2C,IAAJ,CAAS,IAAT,CApBa;;AAAA;AAAA;AAAA,mBAqBG,wCAAoBF,SAAS,CAACV,EAA9B,EAAkCQ,MAAM,CAACR,EAAzC,CArBH;;AAAA;AAqBb4B,YAAAA,OArBa;AAAA;AAAA,mBAsBb5D,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CAtBa;;AAAA;AAAA;AAAA,mBAuBbhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoB4B,OAApB,CAvBa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;AA4BA;;;;AAGA5D,GAAG,CAACsC,EAAJ,CAAO,oBAAP;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA6B,mBAAOC,OAAP,EAAgBW,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBV,YAAAA,MADmB,GACGD,OADH,CACnBC,MADmB,EACXE,SADW,GACGH,OADH,CACXG,SADW;AAErBU,YAAAA,QAFqB,GAEVZ,MAAM,CAACR,EAAP,GAAYU,SAAS,CAACV,EAFZ;AAI3BrB,YAAAA,MAAM,CAAC0B,UAAP,CAAkBe,QAAlB,IAA8BhE,kBAA9B;;AAJ2B,kBAMvB8D,IAAI,KAAK,kBANc;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAOnBlD,GAAG,CAACyC,WAAJ,CAAgBD,MAAM,CAACR,EAAvB,CAPmB;;AAAA;AAAA;AAAA,mBAQnB/B,0BAAI2C,IAAJ,CAAS,IAAT,CARmB;;AAAA;AAAA;AAAA,mBASP,iCAAaF,SAAS,CAACV,EAAvB,EAA2BQ,MAAM,CAACR,EAAlC,CATO;;AAAA;AASnBqB,YAAAA,GATmB;AAAA;AAAA,mBAUnBrD,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CAVmB;;AAAA;AAAA;AAAA,mBAWnBhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBqB,GAApB,CAXmB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAcnBrD,GAAG,CAACyC,WAAJ,CAAgBD,MAAM,CAACR,EAAvB,CAdmB;;AAAA;AAAA;AAAA,mBAenB/B,0BAAI2C,IAAJ,CAAS,IAAT,CAfmB;;AAAA;AAgBnBY,YAAAA,MAhBmB,GAgBV,IAAIK,8BAAJ,EAhBU;AAiBzBL,YAAAA,MAAM,CAACM,GAAP,CAAW;AAAEC,cAAAA,IAAI,EAAE;AAAR,aAAX;AAjByB;AAAA,mBAkBnB/D,GAAG,CAAC6C,UAAJ,CAAeL,MAAM,CAACR,EAAtB,CAlBmB;;AAAA;AAAA;AAAA,mBAmBnBhC,GAAG,CAAC8C,IAAJ,CAASN,MAAM,CAACR,EAAhB,EAAoBwB,MAApB,CAnBmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import \"@babel/polyfill\";\nimport express from \"express\";\nimport logger from \"morgan\";\nimport bodyParser from \"body-parser\";\nimport dotenv from \"dotenv\";\nimport moment from 'moment-timezone';\nimport mongoose from 'mongoose';\nimport { Bot, Elements, Buttons, QuickReplies } from 'facebook-messenger-bot';\nimport { getOnePage, getAllPages, getOnePageData } from './api/controllers/pagesController';\nimport { getPricingSizing } from './api/controllers/pricingsController';\nimport getCardapio from './api/bot/show_cardapio';\nimport { choices_sizes } from './api/util/util';\nimport {\n  sendWelcomeMessage,\n  sendErrorMsg,\n  sendMainMenu,\n  sendCardapio,\n  askForPhone,\n  showPhone,\n  askForQuantity,\n  askForQuantityMore,\n  showQuantity,\n  askForSize,\n  showSize,\n  askForFlavor,\n  showFlavor,\n  showOrderOrNextItem,\n  askForLocation,\n  confirmAddressOrAskLocation,\n  confirmLocationAddress,\n  showAddress,\n  confirmOrder,\n  askToTypeAddress,\n  confirmTypedAddress\n} from './api/bot/botController';\n\nconst\n  ORDER_STATE_QUANTITY = 1,\n  ORDER_STATE_SIZE = 2,\n  ORDER_STATE_FLAVOR = 3;\n\ndotenv.config();\n\nmongoose.connect(\n  process.env.MONGODB_URL,\n  { useNewUrlParser: true }\n);\nmongoose.set('useCreateIndex', true);\nmongoose.Promise = Promise;\n\nconst app = express();\n\nconst bot = new Bot('verify_my_bot', true);\ngetAllPages().then(async (pageArray) => {\n  for (let i = 0; i < pageArray.length; i++) {\n    const page = pageArray[i];\n    const accessToken = page.accessToken;\n    const fields = ['greeting', 'get_started', 'persistent_menu'];\n    const response = await bot.getFields(fields);\n    global.pagesKeyID[page.pageID] = accessToken;\n\n    console.log(`GET fields for ${page.pageID}-${page.name}:`, response);\n  }\n});\n\n\n// Beggining - That is all to log in the local timezone\n// https://medium.com/front-end-hacking/node-js-logs-in-local-timezone-on-morgan-and-winston-9e98b2b9ca45\n// [Node.js] Logs in Local Timezone on Morgan\nlogger.token('date', (req, res, tz) => {\n  return moment().tz(tz).format();\n})\nlogger.format('myformat', '[:date[America/Sao_Paulo]] \":method :url\" :status :res[content-length] - :response-time ms');\n\napp.use(logger(\"myformat\"));\n// End - That is all to log in the right timezone\n\napp.set('json spaces', 2);\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\napp.use('/buckets/facebook', (req, res, next) => {\n  if (req.body.object === 'page') {\n    if (req.body.entry.length > 0) {\n      // Iterates over each entry - there may be multiple if batched\n      // for (let i = 0; i < req.body.entry.length; i++) {\n      let pageID = req.body.entry[0].id;\n\n      console.log(`Message from ${pageID}`);\n\n      if (global.pagesKeyID[pageID]) {\n        req.token = global.pagesKeyID[pageID];\n      }\n      else {\n        getOnePage(pageID).then((accessToken) => {\n          req.token = accessToken;\n          global.pagesKeyID[pageID] = accessToken;\n          console.log(`Got token from ${pageID}`);\n        });\n      }\n\n      next();\n    }\n  }\n});\napp.use('/buckets/facebook', bot.router());\napp.listen(process.env.FB_WEBHOOK_PORT, () => console.log(`Bot server listening on port ${process.env.FB_WEBHOOK_PORT}`));\n\nglobal.pagesKeyID = new Array();\nglobal.orderState = new Array();\n\n\nbot.on('GET_STARTED', async (message) => {\n  const { sender } = message;\n  try {\n    // Send Welcome Message\n    await bot.startTyping(sender.id);\n    const out1 = await sendWelcomeMessage(sender, message.recipient.id)\n    await Bot.wait(1000);\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, out1);\n\n    // Send Main Menu\n    await bot.startTyping(sender.id);\n    const out2 = await sendMainMenu();\n    await Bot.wait(1000);\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, out2);\n\n  } catch (error) {\n    console.log('GET_STARTED error:', error.response);\n\n    const out3 = await sendErrorMsg();\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, out3);\n  }\n});\n\n\n// all postbacks are emitted via 'postback'\nbot.on('postback', async (event, message, data) => {\n  console.info(`postback from ${data}, you need to take care of this thing!`);\n  console.info(message);\n});\n\n// all postbacks are emitted via 'postback'\nbot.on('MAIN-MENU', async (message, data) => {\n  const { sender, recipient } = message;\n  const keyState = sender.id + recipient.id;\n\n  try {\n    await bot.startTyping(sender.id);\n    if (data === 'CARDAPIO_PAYLOAD') {\n      const out = await sendCardapio(message.recipient.id);\n      await bot.stopTyping(sender.id);\n      await bot.send(sender.id, out);\n\n    } else if (data === 'PEDIDO_PAYLOAD') {\n      global.orderState[keyState] = ORDER_STATE_QUANTITY;\n\n      // Show saved address or ask for location\n      await bot.startTyping(sender.id);\n      await Bot.wait(1000);\n      const user = await bot.fetchUser(sender.id);\n      const answer = await confirmAddressOrAskLocation(recipient.id, sender.id, user);\n      await bot.stopTyping(sender.id);\n      await bot.send(sender.id, answer);\n    }\n  } catch (err) {\n    await bot.stopTyping(sender.id);\n\n    if (err.response) console.log(err.response);\n    else console.log(err);\n  }\n});\n\n\n\n/**\n * clicked \"Fazer Pedido\"\n * gonna ask for QUANTITY\n */\nbot.on('message', async (message) => {\n  console.info({ message });\n\n  const { sender, recipient, location } = message;\n\n  if (location) {\n    console.info({ location });\n\n    await bot.startTyping(sender.id);\n    await Bot.wait(1000);\n    const user = await bot.fetchUser(sender.id);\n    const answer = await confirmLocationAddress(recipient.id, sender.id, location, user);\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, answer);\n  } else {\n\n    await bot.startTyping(sender.id);\n    await Bot.wait(1000);\n    const answer = await confirmTypedAddress(recipient.id, sender.id, message);\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, answer);\n  }\n});\n\n/**\n * clicked \"Fazer Pedido\"\n * gonna ask for QUANTITY\n */\nbot.on('quick-reply', async (message, quick_reply) => {\n  console.info({ message });\n\n  const { sender, recipient } = message;\n  const { payload } = quick_reply;\n\n  if (payload) {\n    console.info({ payload });\n\n    await bot.startTyping(sender.id);\n    await Bot.wait(1000);\n    const answer = await showPhone(recipient.id, sender.id, payload);\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, answer);\n\n    // next question\n    const out = await askForQuantity();\n    await Bot.wait(1000);\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, out);\n  }\n});\n\n/**\n * answered CORRECT_SAVED_ADDRESS\n * gonna ask for phone\n */\nbot.on('CORRECT_SAVED_ADDRESS', async (message, data) => {\n  const { sender, recipient } = message;\n\n  // show what the user chose\n  await bot.startTyping(sender.id);\n  await Bot.wait(1000);\n  const answer = await showAddress(recipient.id, sender.id, data);\n  await bot.stopTyping(sender.id);\n  await bot.send(sender.id, answer);\n\n  // next question\n  const out = await askForPhone();\n  await Bot.wait(1000);\n  await bot.stopTyping(sender.id);\n  await bot.send(sender.id, out);\n});\n\n/**\n * answered CORRECT_SAVED_ADDRESS\n * gonna ask for phone\n */\nbot.on('LOCATION_ADDRESS', async (message, data) => {\n  const { sender, recipient } = message;\n\n  if (data === 'incorrect_address') {\n    await bot.startTyping(sender.id);\n    await Bot.wait(1000);\n    const answer = await askToTypeAddress(recipient.id, sender.id);\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, answer);\n  }\n  else {\n    // show what the user chose\n    await bot.startTyping(sender.id);\n    await Bot.wait(1000);\n    const answer = await showAddress(recipient.id, sender.id, data);\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, answer);\n\n    // next question\n    const out = await askForPhone();\n    await Bot.wait(1000);\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, out);\n  }\n});\n\n\n/**\n * answered CORRECT_SAVED_ADDRESS\n * gonna ask for phone\n */\nbot.on('WRONG_SAVED_ADDRESS', async (message, data) => {\n  const { sender, recipient } = message;\n\n  const out = await askForLocation();\n  await Bot.wait(1000);\n  await bot.stopTyping(sender.id);\n  await bot.send(sender.id, out);\n});\n\n\n/**\n * answered ORDER_QTY\n * gonna ask for SIZE\n */\nbot.on('ORDER_QTY', async (message, data) => {\n  const { sender, recipient } = message;\n  const keyState = sender.id + recipient.id;\n\n  global.orderState[keyState] = ORDER_STATE_FLAVOR;\n\n  if (data && data === 'qty_more') {\n    global.orderState[keyState] = ORDER_STATE_QUANTITY;\n\n    await bot.startTyping(sender.id);\n    await Bot.wait(1000);\n    const out = await askForQuantityMore();\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, out);\n  }\n  else {\n    // show what the user chose\n    await bot.startTyping(sender.id);\n    await Bot.wait(1000);\n    const answer = await showQuantity(recipient.id, sender.id, data);\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, answer);\n    // next question\n    await bot.startTyping(sender.id);\n    await Bot.wait(1000);\n    const out = await askForSize(recipient.id, sender.id);\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, out);\n  }\n});\n\n/**\n * answered ORDER_SIZE\n * gonna ask for FLAVOR\n */\nbot.on('ORDER_SIZE', async (message, data) => {\n  const { sender, recipient } = message;\n  const keyState = sender.id + recipient.id;\n\n  global.orderState[keyState] = ORDER_STATE_SIZE;\n\n  // show what the user chose\n  await bot.startTyping(sender.id);\n  await Bot.wait(2000);\n  const answer = await showSize(recipient.id, sender.id, data);\n  await bot.stopTyping(sender.id);\n  await bot.send(sender.id, answer);\n\n  // next question\n  await bot.startTyping(sender.id);\n  await Bot.wait(2000);\n  const out = await askForFlavor(message.recipient.id);\n  await bot.stopTyping(sender.id);\n  await bot.send(sender.id, out);\n\n});\n\n/**\n * answered ORDER_FLAVOR\n * gonna ask for confirmation\n */\nbot.on('ORDER_FLAVOR', async (message, data) => {\n  const { sender, recipient } = message;\n  const keyState = sender.id + recipient.id;\n\n  global.orderState[keyState] = ORDER_STATE_FLAVOR;\n\n  if (data === 'flavor_more') {\n    // TODO: show more flavors\n  }\n  else {\n    // show what the user chose\n    await bot.startTyping(sender.id);\n    await Bot.wait(2000);\n    const answer = await showFlavor(recipient.id, sender.id, data);\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, answer);\n\n\n    // show summary\n    await bot.startTyping(sender.id);\n    await Bot.wait(1000);\n    const summary = await showOrderOrNextItem(recipient.id, sender.id);\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, summary);\n  }\n});\n\n\n/**\n * answered ORDER_CONFIRMATION\n */\nbot.on('ORDER_CONFIRMATION', async (message, data) => {\n  const { sender, recipient } = message;\n  const keyState = sender.id + recipient.id;\n\n  global.orderState[keyState] = ORDER_STATE_FLAVOR;\n\n  if (data === 'confirmation_yes') {\n    await bot.startTyping(sender.id);\n    await Bot.wait(1000);\n    const out = await confirmOrder(recipient.id, sender.id);\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, out);\n  }\n  else {\n    await bot.startTyping(sender.id);\n    await Bot.wait(1000);\n    const answer = new Elements();\n    answer.add({ text: \"Perguntar se precisa corrigir algo...\" });\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, answer);\n  }\n});\n"],"file":"server-bot.js"}