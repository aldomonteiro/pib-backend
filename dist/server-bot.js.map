{"version":3,"sources":["../src/server-bot.js"],"names":["ORDER_STATE_QUANTITY","ORDER_STATE_SIZE","ORDER_STATE_FLAVOR","app","dotenv","config","mongoose","connect","process","env","MONGODB_URL","useNewUrlParser","set","Promise","global","pagesKeyID","Array","orderState","bot","Bot","then","pageArray","i","length","page","accessToken","fields","getFields","response","pageID","console","log","name","on","message","sender","startTyping","id","recipient","out1","stopTyping","send","wait","out2","out3","keyState","Number","text","replies","QuickReplies","add","data","event","out","Elements","setQuickReplies","fetch","first_name","use","bodyParser","urlencoded","extended","json","req","res","next","body","object","entry","token","router","listen","FB_WEBHOOK_PORT"],"mappings":"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","sourcesContent":["import express from \"express\";\nimport logger from \"morgan\";\nimport bodyParser from \"body-parser\";\nimport dotenv from \"dotenv\";\nimport moment from 'moment-timezone';\nimport mongoose from 'mongoose';\nimport { Bot, Elements, Buttons, QuickReplies } from 'facebook-messenger-bot';\nimport { getOnePage, getAllPages, getOnePageData } from './api/controllers/pagesController';\nimport { getPricingSizing } from './api/controllers/pricingsController';\nimport getCardapio from './api/bot/show_cardapio';\nimport { choices_sizes } from './api/util/util';\nimport {\n  sendWelcomeMessage,\n  sendErrorMsg,\n  sendMainMenu,\n  sendCardapio,\n  askForQuantity,\n  askForQuantityMore,\n  askForSize,\n} from './api/bot/botController';\n\nconst\n  ORDER_STATE_QUANTITY = 1,\n  ORDER_STATE_SIZE = 2,\n  ORDER_STATE_FLAVOR = 3;\n\nconst app = express();\n\ndotenv.config();\n\nmongoose.connect(\n  process.env.MONGODB_URL,\n  { useNewUrlParser: true }\n);\nmongoose.set('useCreateIndex', true);\nmongoose.Promise = Promise;\n\nglobal.pagesKeyID = new Array();\nglobal.orderState = new Array();\n\nconst bot = new Bot('verify_my_bot', true);\n\n\ngetAllPages().then(async (pageArray) => {\n  for (let i = 0; i < pageArray.length; i++) {\n    const page = pageArray[i];\n    const accessToken = page.accessToken;\n    const fields = ['greeting', 'get_started', 'persistent_menu'];\n    const response = await bot.getFields(fields);\n    global.pagesKeyID[page.pageID] = accessToken;\n\n    console.log(`GET fields for ${page.pageID}-${page.name}:`, response);\n  }\n});\n\nbot.on('GET_STARTED', async (message) => {\n  const { sender } = message;\n  try {\n    // Send Welcome Message\n    await bot.startTyping(sender.id);\n    const out1 = await sendWelcomeMessage(sender, message.recipient.id)\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, out1);\n\n    // Send Main Menu\n    await bot.startTyping(sender.id);\n    await Bot.wait(2000);\n    const out2 = await sendMainMenu();\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, out2);\n\n  } catch (error) {\n    console.log('GET_STARTED error:', error.response);\n\n    const out3 = await sendErrorMsg();\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, out3);\n  }\n});\n\n\nbot.on('message', async (message) => {\n  console.log(\"on message\", message);\n\n  const { sender, recipient } = message;\n  const keyState = sender.id + recipient.id;\n\n  if (global.orderState[keyState]) {\n    const orderState = global.orderState[keyState];\n    if (orderState === ORDER_STATE_QUANTITY) {\n      if (Number(message.text) > 0) {\n        // TODO: Store the quantity\n        global.orderState[keyState] = ORDER_STATE_SIZE;\n        // ---- send quick reply for location\n        const replies = new QuickReplies();\n        replies.add({ text: 'Pequena', data: 'size_small', event: 'ORDER_SIZE' });\n        replies.add({ text: 'Média', data: 'size_medium', event: 'ORDER_SIZE' });\n        replies.add({ text: 'Grande', data: 'size_big', event: 'ORDER_SIZE' });\n        replies.add({ text: 'Gigante', data: 'size_large', event: 'ORDER_SIZE' });\n\n        const out = new Elements();\n        out.add({ text: 'Qual o tamanho da pizza?' });\n        out.setQuickReplies(replies);\n        await bot.send(sender.id, out);\n      }\n      else {\n        // TODO: invalid quantity\n      }\n    }\n  } else {\n    await sender.fetch('first_name');\n\n    const out = new Elements();\n    out.add({ text: `hey ${sender.first_name}, how are you!` });\n\n    await bot.send(sender.id, out);\n  }\n});\n\n// all postbacks are emitted via 'postback'\nbot.on('postback', async (event, message, data) => {\n  console.log(`postback from ${data}, you need to take care of this thing!`);\n  console.log(message);\n});\n\n// all postbacks are emitted via 'postback'\nbot.on('MAIN-MENU', async (message, data) => {\n  const { sender, recipient } = message;\n  const keyState = sender.id + recipient.id;\n\n  try {\n    await bot.startTyping(sender.id);\n    if (data === 'CARDAPIO_PAYLOAD') {\n      const out = await sendCardapio(message.recipient.id);\n      await bot.stopTyping(sender.id);\n      await bot.send(sender.id, out);\n\n    } else if (data === 'PEDIDO_PAYLOAD') {\n      global.orderState[keyState] = ORDER_STATE_QUANTITY;\n\n      const out = await askForQuantity();\n      await bot.stopTyping(sender.id);\n      await bot.send(sender.id, out);\n    }\n  } catch (err) {\n    await bot.stopTyping(sender.id);\n\n    if (err.response) console.log(err.response);\n    else console.log(err);\n  }\n});\n\n/**\n * answered ORDER_QTY\n * gonna ask for SIZE\n */\nbot.on('ORDER_QTY', async (message, data) => {\n  const { sender, recipient } = message;\n  const keyState = sender.id + recipient.id;\n\n  global.orderState[keyState] = ORDER_STATE_FLAVOR;\n\n  if (data && data === 'qty_more') {\n    global.orderState[keyState] = ORDER_STATE_QUANTITY;\n\n    await bot.startTyping(sender.id);\n    await Bot.wait(2000);\n    const out = await askForQuantityMore();\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, out);\n  }\n  else {\n    await bot.startTyping(sender.id);\n    const out = await askForSize(message.recipient.id);\n    await bot.stopTyping(sender.id);\n    await bot.send(sender.id, out);\n  }\n});\n\n/**\n * answered ORDER_SIZE\n * gonna ask for FLAVOR\n */\nbot.on('ORDER_SIZE', async (message, data) => {\n  const { sender, recipient } = message;\n  const keyState = sender.id + recipient.id;\n\n  global.orderState[keyState] = ORDER_STATE_SIZE;\n\n  const out = new Elements();\n  out.add({ text: 'Qual o sabor da pizza?' });\n  await bot.send(sender.id, out);\n});\n\n\n// Beggining - That is all to log in the local timezone\n// https://medium.com/front-end-hacking/node-js-logs-in-local-timezone-on-morgan-and-winston-9e98b2b9ca45\n// [Node.js] Logs in Local Timezone on Morgan\n// logger.token('date', (req, res, tz) => moment().tz(tz).format());\n// logger.format('myformat', '[:date[America/Sao_Paulo]] \":method :url\" :status :res[content-length] - :response-time ms');\n// app.use(logger(\"myformat\"));\n// End - That is all to log in the right timezone\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\napp.use('/buckets/facebook', (req, res, next) => {\n  if (req.body.object === 'page') {\n    if (req.body.entry.length > 0) {\n      // Iterates over each entry - there may be multiple if batched\n      // for (let i = 0; i < req.body.entry.length; i++) {\n      let pageID = req.body.entry[0].id;\n\n      console.log(`Message from ${pageID}`);\n\n      if (global.pagesKeyID[pageID]) {\n        req.token = global.pagesKeyID[pageID];\n      }\n      else {\n        getOnePage(pageID).then((accessToken) => {\n          req.token = accessToken;\n          global.pagesKeyID[pageID] = accessToken;\n          console.log(`Got token from ${pageID}`);\n        });\n      }\n\n      next();\n    }\n  }\n});\napp.use('/buckets/facebook', bot.router());\napp.listen(process.env.FB_WEBHOOK_PORT, () => console.log(`Bot server listening on port ${process.env.FB_WEBHOOK_PORT}`));"],"file":"server-bot.js"}