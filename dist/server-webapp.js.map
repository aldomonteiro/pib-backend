{"version":3,"sources":["../src/server-webapp.js"],"names":["app","logger","token","req","res","tz","format","use","set","bodyParser","urlencoded","extended","json","next","header","method","sendStatus","dotenv","config","mongoose","connect","process","env","MONGODB_URL","useNewUrlParser","Promise","users","flavors","toppings","pricings","beverages","stores","openingtimes","pages","sizes","extras","NODE_ENV","listen","console","log","https","createServer","key","fs","readFileSync","cert"],"mappings":"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","sourcesContent":["import \"@babel/polyfill\";\nimport express from \"express\";\nimport logger from \"morgan\";\nimport bodyParser from \"body-parser\";\nimport https from \"https\";\nimport fs from \"fs\";\nimport mongoose from \"mongoose\";\nimport dotenv from \"dotenv\";\nimport Promise from \"bluebird\";\nimport moment from 'moment-timezone';\n\nimport users from \"./api/routes/users\";\nimport flavors from \"./api/routes/flavors\";\nimport toppings from \"./api/routes/toppings\";\nimport pricings from \"./api/routes/pricings\";\nimport beverages from \"./api/routes/beverages\";\nimport stores from \"./api/routes/stores\";\nimport openingtimes from \"./api/routes/openingtimes\";\nimport pages from \"./api/routes/pages\";\nimport extras from \"./api/routes/extras\";\nimport sizes from \"./api/routes/sizes\";\n\nconst app = express();\n\n// Beggining - That is all to log in the local timezone\n// https://medium.com/front-end-hacking/node-js-logs-in-local-timezone-on-morgan-and-winston-9e98b2b9ca45\n// [Node.js] Logs in Local Timezone on Morgan\nlogger.token('date', (req, res, tz) => {\n  return moment().tz(tz).format();\n})\nlogger.format('myformat', '[:date[America/Sao_Paulo]] \":method :url\" :status :res[content-length] - :response-time ms');\n\napp.use(logger(\"myformat\"));\n// End - That is all to log in the right timezone\n\napp.set('json spaces', 2);\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\napp.use(function (req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", '*');\n  res.header(\"Access-Control-Allow-Credentials\", true);\n  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n  res.header(\"Access-Control-Allow-Headers\", 'Authorization,Origin,X-Requested-With,Content-Type,Accept,application/json,Content-Range');\n  res.header(\"Access-Control-Expose-Headers\", 'Content-Range');\n\n  if (req.method === 'OPTIONS') {\n    res.sendStatus(200);\n  }\n  else {\n    next();\n  }\n});\n\n// Connect to mongodb\ndotenv.config();\nmongoose.connect(\n  process.env.MONGODB_URL,\n  { useNewUrlParser: true }\n);\nmongoose.set('useCreateIndex', true);\nmongoose.Promise = Promise;\n\n// Setup the routes\napp.use(\"/users\", users);\napp.use(\"/flavors\", flavors);\napp.use(\"/toppings\", toppings);\napp.use(\"/pricings\", pricings);\napp.use(\"/beverages\", beverages);\napp.use(\"/stores\", stores);\napp.use(\"/openingtimes\", openingtimes);\napp.use(\"/pages\", pages);\napp.use(\"/sizes\", sizes);\napp.use(\"/extras\", extras);\n\nconst env = process.env.NODE_ENV || 'production';\n\nif (env === 'production')\n  app.listen(8080, () => console.log(env + \"env. Server listening on port 8080\"));\nelse {\n  // dev server\n  // Lift the https server\n  https\n    .createServer(\n      {\n        key: fs.readFileSync(\"certificates/server_key.pem\"),\n        cert: fs.readFileSync(\"certificates/server_crt.pem\")\n      },\n      app\n    )\n    .listen(8080, () => console.log(env + \" Server listening on port 8080\"));\n}"],"file":"server-webapp.js"}