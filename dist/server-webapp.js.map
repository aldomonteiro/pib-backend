{"version":3,"sources":["../src/server-webapp.js"],"names":["app","logger","token","req","res","tz","format","use","set","bodyParser","urlencoded","extended","json","dotenv","config","env","process","NODE_ENV","allowedOrigins","DEV_ALLOWED_ORIGIN","PRD_ALLOWED_ORIGIN","next","header","method","sendStatus","RETRY_TIMEOUT","options","useNewUrlParser","autoReconnect","keepAlive","reconnectInterval","reconnectTries","isConnectedBefore","mongo_url","DEV_MONGODB_URL","PRD_MONGODB_URL","connect","mongoose","catch","err","console","error","Promise","connection","on","setTimeout","info","close","warn","exit","users","flavors","toppings","pricings","beverages","stores","openingtimes","pages","sizes","extras","orders","customers","accounts","categories","items","webForms","server","listen","log","http","createServer","https","key","fs","readFileSync","cert","io","origins","interval","socket","clearInterval","setInterval","getApiAndEmit","pageID","handshake","query","lastOrders","emit","code"],"mappings":"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","sourcesContent":["import '@babel/polyfill';\nimport express from 'express';\nimport logger from 'morgan';\nimport bodyParser from 'body-parser';\nimport https from 'https';\nimport http from 'http';\nimport fs from 'fs';\nimport mongoose from 'mongoose';\nimport dotenv from 'dotenv';\nimport Promise from 'bluebird';\nimport moment from 'moment-timezone';\nimport socketIo from 'socket.io';\n\nimport users from './api/routes/users';\nimport flavors from './api/routes/flavors';\nimport toppings from './api/routes/toppings';\nimport pricings from './api/routes/pricings';\nimport beverages from './api/routes/beverages';\nimport stores from './api/routes/stores';\nimport openingtimes from './api/routes/openingtimes';\nimport pages from './api/routes/pages';\nimport extras from './api/routes/extras';\nimport sizes from './api/routes/sizes';\nimport orders from './api/routes/orders';\nimport items from './api/routes/items';\nimport customers from './api/routes/customers';\nimport accounts from './api/routes/accounts';\nimport categories from './api/routes/categories';\nimport webForms from './api/routes/webForms';\nimport { getLastPendingOrders } from './api/controllers/ordersController';\n\n\nconst app = express();\n\n// Beggining - That is all to log in the local timezone\n// https://medium.com/front-end-hacking/node-js-logs-in-local-timezone-on-morgan-and-winston-9e98b2b9ca45\n// [Node.js] Logs in Local Timezone on Morgan\nlogger.token('date', (req, res, tz) => {\n    return moment().tz(tz).format();\n})\nlogger.format('myformat', '[:date[America/Sao_Paulo]] \":method :url\" :status :res[content-length] - :response-time ms');\n\napp.use(logger('myformat'));\n// End - That is all to log in the right timezone\n\napp.set('json spaces', 2);\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\ndotenv.config();\nconst env = process.env.NODE_ENV || 'production';\n\nlet allowedOrigins = process.env.DEV_ALLOWED_ORIGIN;\nif (env === 'production')\n    allowedOrigins = process.env.PRD_ALLOWED_ORIGIN;\n\n\napp.use(function (req, res, next) {\n    res.header('Access-Control-Allow-Origin', allowedOrigins);\n    res.header('Access-Control-Allow-Credentials', true);\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n    res.header('Access-Control-Allow-Headers', 'Authorization,Origin,X-Requested-With,Content-Type,Accept,application/json,Content-Range');\n    res.header('Access-Control-Expose-Headers', 'Content-Range');\n\n    if (req.method === 'OPTIONS') {\n        res.sendStatus(200);\n    } else {\n        next();\n    }\n});\n\nconst RETRY_TIMEOUT = 3000\n\nconst options = {\n    useNewUrlParser: true,\n    autoReconnect: true,\n    keepAlive: 30000,\n    reconnectInterval: RETRY_TIMEOUT,\n    reconnectTries: 10000,\n}\n\nlet isConnectedBefore = false\nlet mongo_url = process.env.DEV_MONGODB_URL;\nif (env === 'production')\n    mongo_url = process.env.PRD_MONGODB_URL;\n\n\nconst connect = () => {\n    return mongoose.connect(mongo_url, options)\n        .catch(err => console.error('Mongoose connect(...) failed with err: ', err))\n}\n\nconnect();\n\nmongoose.set('useCreateIndex', true);\n\nif (env !== 'production') { // dev\n    mongoose.set('debug', true);\n}\n\nmongoose.Promise = Promise;\n\nmongoose.connection.on('error', () => {\n    console.error('SERVER-WEBAPP - Could not connect to MongoDB')\n});\n\nmongoose.connection.on('disconnected', () => {\n    console.error('SERVER-WEBAPP - Lost MongoDB connection...')\n    if (!isConnectedBefore) {\n        setTimeout(() => connect(), RETRY_TIMEOUT)\n    }\n});\n\nmongoose.connection.on('connected', () => {\n    isConnectedBefore = true\n    console.info('SERVER-WEBAPP - Connection established to MongoDB')\n});\n\nmongoose.connection.on('reconnected', () => {\n    console.info('SERVER-WEBAPP - Reconnected to MongoDB')\n});\n\n// Close the Mongoose connection, when receiving SIGINT\nprocess.on('SIGINT', () => {\n    mongoose.connection.close(function () {\n        console.warn('SERVER-WEBAPP - Force to close the MongoDB connection after SIGINT')\n        process.exit(0)\n    })\n});\n\n\n// Setup the routes\napp.use('/users', users);\napp.use('/flavors', flavors);\napp.use('/toppings', toppings);\napp.use('/pricings', pricings);\napp.use('/beverages', beverages);\napp.use('/stores', stores);\napp.use('/openingtimes', openingtimes);\napp.use('/pages', pages);\napp.use('/sizes', sizes);\napp.use('/extras', extras);\napp.use('/orders', orders);\napp.use('/customers', customers);\napp.use('/accounts', accounts);\napp.use('/categories', categories);\napp.use('/reportOrders', orders);\napp.use('/reportFlavors', items);\napp.use('/webforms', webForms);\n\n// const env = process.env.NODE_ENV || 'production';\n\nlet server;\n\nif (env === 'production') {\n    app.listen(8080, () => console.log(env + 'env. Server listening on port 8080'));\n    server = http.createServer(app);\n} else {\n    // dev server\n    // Lift the https server\n    server = https\n        .createServer(\n            {\n                key: fs.readFileSync('/Users/aldo/.localhost-ssl/localhost.key'),\n                cert: fs.readFileSync('/Users/aldo/.localhost-ssl/localhost.crt'),\n            },\n            app\n        )\n        .listen(8080, () => console.log(env + ' Server listening on port 8080'));\n}\n\n\nconst io = socketIo(server, { origins: allowedOrigins });\n\nlet interval;\nio.on('connection', socket => {\n    console.info('New client connected');\n    if (interval) {\n        clearInterval(interval);\n    }\n    interval = setInterval(() => getApiAndEmit(socket), 30000);\n    socket.on('disconnect', () => {\n        console.info('Client disconnected');\n    });\n});\n\nconst getApiAndEmit = async socket => {\n    try {\n        let pageID = socket.handshake.query.pageID;\n        // const lastOrderID = await getLastOrder(pageID);\n        const lastOrders = await getLastPendingOrders(pageID);\n        socket.emit('LastOrders', lastOrders);\n    } catch (error) {\n        console.error(`Error: ${error.code}`);\n    }\n};\n\n\n"],"file":"server-webapp.js"}