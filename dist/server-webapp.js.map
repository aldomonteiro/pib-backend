{"version":3,"sources":["../src/server-webapp.js"],"names":["app","logger","token","req","res","tz","format","use","set","bodyParser","urlencoded","extended","json","next","header","method","sendStatus","dotenv","config","RETRY_TIMEOUT","options","useNewUrlParser","autoReconnect","keepAlive","reconnectInterval","reconnectTries","isConnectedBefore","env","process","NODE_ENV","mongo_url","DEV_MONGODB_URL","PRD_MONGODB_URL","connect","mongoose","catch","err","console","error","Promise","connection","on","setTimeout","info","close","warn","exit","users","flavors","toppings","pricings","beverages","stores","openingtimes","pages","sizes","extras","orders","customers","listen","log","https","createServer","key","fs","readFileSync","cert"],"mappings":"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","sourcesContent":["import express from \"express\";\nimport logger from \"morgan\";\nimport bodyParser from \"body-parser\";\nimport https from \"https\";\nimport fs from \"fs\";\nimport mongoose from \"mongoose\";\nimport dotenv from \"dotenv\";\nimport Promise from \"bluebird\";\nimport moment from 'moment-timezone';\n\nimport users from \"./api/routes/users\";\nimport flavors from \"./api/routes/flavors\";\nimport toppings from \"./api/routes/toppings\";\nimport pricings from \"./api/routes/pricings\";\nimport beverages from \"./api/routes/beverages\";\nimport stores from \"./api/routes/stores\";\nimport openingtimes from \"./api/routes/openingtimes\";\nimport pages from \"./api/routes/pages\";\nimport extras from \"./api/routes/extras\";\nimport sizes from \"./api/routes/sizes\";\nimport orders from \"./api/routes/orders\";\nimport customers from \"./api/routes/customers\";\n\n\nconst app = express();\n\n// Beggining - That is all to log in the local timezone\n// https://medium.com/front-end-hacking/node-js-logs-in-local-timezone-on-morgan-and-winston-9e98b2b9ca45\n// [Node.js] Logs in Local Timezone on Morgan\nlogger.token('date', (req, res, tz) => {\n  return moment().tz(tz).format();\n})\nlogger.format('myformat', '[:date[America/Sao_Paulo]] \":method :url\" :status :res[content-length] - :response-time ms');\n\napp.use(logger(\"myformat\"));\n// End - That is all to log in the right timezone\n\napp.set('json spaces', 2);\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\napp.use(function (req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", '*');\n  res.header(\"Access-Control-Allow-Credentials\", true);\n  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n  res.header(\"Access-Control-Allow-Headers\", 'Authorization,Origin,X-Requested-With,Content-Type,Accept,application/json,Content-Range');\n  res.header(\"Access-Control-Expose-Headers\", 'Content-Range');\n\n  if (req.method === 'OPTIONS') {\n    res.sendStatus(200);\n  }\n  else {\n    next();\n  }\n});\n\n// Connect to mongodb\ndotenv.config();\n// mongoose.connect(\n//   process.env.MONGODB_URL,\n//   { useNewUrlParser: true }\n// );\n// mongoose.set('useCreateIndex', true);\n// mongoose.Promise = Promise;\n\nconst RETRY_TIMEOUT = 3000\n\nconst options = {\n  useNewUrlParser: true,\n  autoReconnect: true,\n  keepAlive: 30000,\n  reconnectInterval: RETRY_TIMEOUT,\n  reconnectTries: 10000\n}\n\nlet isConnectedBefore = false\n\nconst env = process.env.NODE_ENV || 'production';\n\nlet mongo_url = process.env.DEV_MONGODB_URL;\nif (env === 'production')\n  mongo_url = process.env.PRD_MONGODB_URL;\n\n\nconst connect = () => {\n  return mongoose.connect(mongo_url, options)\n    .catch(err => console.error('Mongoose connect(...) failed with err: ', err))\n}\n\nconnect();\n\nmongoose.set('useCreateIndex', true);\n\nif (env !== 'production') { // dev\n  mongoose.set('debug', true);\n}\n\nmongoose.Promise = Promise;\n\nmongoose.connection.on('error', () => {\n  console.error('SERVER-WEBAPP - Could not connect to MongoDB')\n});\n\nmongoose.connection.on('disconnected', () => {\n  console.error('SERVER-WEBAPP - Lost MongoDB connection...')\n  if (!isConnectedBefore) {\n    setTimeout(() => connect(), RETRY_TIMEOUT)\n  }\n});\n\nmongoose.connection.on('connected', () => {\n  isConnectedBefore = true\n  console.info('SERVER-WEBAPP - Connection established to MongoDB')\n});\n\nmongoose.connection.on('reconnected', () => {\n  console.info('SERVER-WEBAPP - Reconnected to MongoDB')\n});\n\n// Close the Mongoose connection, when receiving SIGINT\nprocess.on('SIGINT', () => {\n  mongoose.connection.close(function () {\n    console.warn('SERVER-WEBAPP - Force to close the MongoDB connection after SIGINT')\n    process.exit(0)\n  })\n});\n\n\n\n// Setup the routes\napp.use(\"/users\", users);\napp.use(\"/flavors\", flavors);\napp.use(\"/toppings\", toppings);\napp.use(\"/pricings\", pricings);\napp.use(\"/beverages\", beverages);\napp.use(\"/stores\", stores);\napp.use(\"/openingtimes\", openingtimes);\napp.use(\"/pages\", pages);\napp.use(\"/sizes\", sizes);\napp.use(\"/extras\", extras);\napp.use(\"/orders\", orders);\napp.use(\"/customers\", customers);\n\n// const env = process.env.NODE_ENV || 'production';\n\nif (env === 'production')\n  app.listen(8080, () => console.log(env + \"env. Server listening on port 8080\"));\nelse {\n  // dev server\n  // Lift the https server\n  https\n    .createServer(\n      {\n        key: fs.readFileSync(\"/Users/aldo/.localhost-ssl/localhost.key\"),\n        cert: fs.readFileSync(\"/Users/aldo/.localhost-ssl/localhost.crt\")\n      },\n      app\n    )\n    .listen(8080, () => console.log(env + \" Server listening on port 8080\"));\n}"],"file":"server-webapp.js"}