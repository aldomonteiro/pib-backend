{"version":3,"sources":["../src/server-webapp.js"],"names":["app","logger","token","req","res","tz","format","use","set","bodyParser","urlencoded","extended","json","dotenv","config","env","process","NODE_ENV","allowedOrigins","DEV_ALLOWED_ORIGIN","split","PRD_ALLOWED_ORIGIN","next","origin","headers","indexOf","header","method","sendStatus","RETRY_TIMEOUT","options","useNewUrlParser","autoReconnect","keepAlive","reconnectInterval","reconnectTries","isConnectedBefore","mongo_url","DEV_MONGODB_URL","PRD_MONGODB_URL","connect","mongoose","err","console","error","Promise","connection","on","setTimeout","info","close","warn","exit","users","flavors","toppings","pricings","beverages","stores","openingtimes","pages","sizes","extras","orders","customers","accounts","categories","items","webForms","server","http","createServer","listen","log","https","key","fs","readFileSync","cert"],"mappings":"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","sourcesContent":["import '@babel/polyfill';\nimport express from 'express';\nimport logger from 'morgan';\nimport bodyParser from 'body-parser';\nimport https from 'https';\nimport http from 'http';\nimport fs from 'fs';\nimport mongoose from 'mongoose';\nimport dotenv from 'dotenv';\nimport Promise from 'bluebird';\nimport moment from 'moment-timezone';\n\nimport users from './api/routes/users';\nimport flavors from './api/routes/flavors';\nimport toppings from './api/routes/toppings';\nimport pricings from './api/routes/pricings';\nimport beverages from './api/routes/beverages';\nimport stores from './api/routes/stores';\nimport openingtimes from './api/routes/openingtimes';\nimport pages from './api/routes/pages';\nimport extras from './api/routes/extras';\nimport sizes from './api/routes/sizes';\nimport orders from './api/routes/orders';\nimport items from './api/routes/items';\nimport customers from './api/routes/customers';\nimport accounts from './api/routes/accounts';\nimport categories from './api/routes/categories';\nimport webForms from './api/routes/webForms';\nimport { setupSocketIo } from './api/controllers/socketController';\n\nconst app = express();\n\n// Beggining - That is all to log in the local timezone\n// https://medium.com/front-end-hacking/node-js-logs-in-local-timezone-on-morgan-and-winston-9e98b2b9ca45\n// [Node.js] Logs in Local Timezone on Morgan\nlogger.token('date', (req, res, tz) => {\n    return moment().tz(tz).format();\n})\nlogger.format('myformat', '[:date[America/Sao_Paulo]] \":method :url\" :status :res[content-length] - :response-time ms');\n\napp.use(logger('myformat'));\n// End - That is all to log in the right timezone\n\napp.set('json spaces', 2);\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\ndotenv.config();\nconst env = process.env.NODE_ENV || 'production';\n\nvar allowedOrigins = process.env.DEV_ALLOWED_ORIGIN.split(' ');\nif (env === 'production')\n    allowedOrigins = process.env.PRD_ALLOWED_ORIGIN.split(' ');\n\napp.use(function (req, res, next) {\n    let origin = req.headers.origin;\n    if (allowedOrigins.indexOf(origin) > -1) {\n        res.header('Access-Control-Allow-Origin', origin);\n    }\n    res.header('Access-Control-Allow-Credentials', true);\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n    res.header('Access-Control-Allow-Headers', 'Authorization,Origin,X-Requested-With,Content-Type,Accept,application/json,Content-Range');\n    res.header('Access-Control-Expose-Headers', 'Content-Range');\n\n    if (req.method === 'OPTIONS') {\n        res.sendStatus(200);\n    } else {\n        next();\n    }\n});\n\nconst RETRY_TIMEOUT = 3000\n\nconst options = {\n    useNewUrlParser: true,\n    autoReconnect: true,\n    keepAlive: 30000,\n    reconnectInterval: RETRY_TIMEOUT,\n    reconnectTries: 10000,\n}\n\nlet isConnectedBefore = false\nlet mongo_url = process.env.DEV_MONGODB_URL;\nif (env === 'production')\n    mongo_url = process.env.PRD_MONGODB_URL;\n\n\nconst connect = () => {\n    return mongoose.connect(mongo_url, options)\n        .catch(err => console.error('Mongoose connect(...) failed with err: ', err))\n}\n\nconnect();\n\nmongoose.set('useCreateIndex', true);\n\nif (env !== 'production') { // dev\n    mongoose.set('debug', true);\n}\n\nmongoose.Promise = Promise;\n\nmongoose.connection.on('error', () => {\n    console.error('SERVER-WEBAPP - Could not connect to MongoDB')\n});\n\nmongoose.connection.on('disconnected', () => {\n    console.error('SERVER-WEBAPP - Lost MongoDB connection...')\n    if (!isConnectedBefore) {\n        setTimeout(() => connect(), RETRY_TIMEOUT)\n    }\n});\n\nmongoose.connection.on('connected', () => {\n    isConnectedBefore = true\n    console.info('SERVER-WEBAPP - Connection established to MongoDB')\n});\n\nmongoose.connection.on('reconnected', () => {\n    console.info('SERVER-WEBAPP - Reconnected to MongoDB')\n});\n\n// Close the Mongoose connection, when receiving SIGINT\nprocess.on('SIGINT', () => {\n    mongoose.connection.close(function () {\n        console.warn('SERVER-WEBAPP - Force to close the MongoDB connection after SIGINT')\n        process.exit(0)\n    })\n});\n\n\n// Setup the routes\napp.use('/users', users);\napp.use('/flavors', flavors);\napp.use('/toppings', toppings);\napp.use('/pricings', pricings);\napp.use('/beverages', beverages);\napp.use('/stores', stores);\napp.use('/openingtimes', openingtimes);\napp.use('/pages', pages);\napp.use('/sizes', sizes);\napp.use('/extras', extras);\napp.use('/orders', orders);\napp.use('/customers', customers);\napp.use('/accounts', accounts);\napp.use('/categories', categories);\napp.use('/reportOrders', orders);\napp.use('/reportFlavors', items);\napp.use('/webforms', webForms);\n\n// const env = process.env.NODE_ENV || 'production';\n\nlet server;\n\nif (env === 'production') {\n    // app.listen(8080, () => console.log(env + 'env. Server listening on port 8080'));\n    server = http\n        .createServer(app)\n        .listen(8080, () => console.log(env + ' Server listening on port 8080'));\n} else {\n    // dev server\n    // Lift the https server\n    server = https\n        .createServer(\n            {\n                key: fs.readFileSync('/Users/aldo/.localhost-ssl/localhost.key'),\n                cert: fs.readFileSync('/Users/aldo/.localhost-ssl/localhost.crt'),\n            },\n            app\n        )\n        .listen(8080, () => console.log(env + ' Server listening on port 8080'));\n}\n\nsetupSocketIo(server, allowedOrigins);\n"],"file":"server-webapp.js"}